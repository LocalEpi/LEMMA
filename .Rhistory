z$new2$total.cases
z$old2$total.cases
z$old2$S
z$new2$S
seir.list <- RunBoth(inputs, HP2, 1:2, run.cred.int = F)
print(all.equal(seir.list$new1, seir.list$old1))
print(all.equal(seir.list$new2, seir.list$old2))
cred.list <- RunBoth(inputs, HP2, 1:2, run.cred.int = T)
print(all.equal(cred.list$new1, cred.list$old1))
print(all.equal(cred.list$new2, cred.list$old2))
cred.list$new2$E
cred.list$new2$hosp
cred.list$old2$hosp
cred.list$new2$hosp
HP2
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks.R', echo=TRUE)
cred.list$new2$hosp
cred.list$old2$hosp
seir.list$old2
seir.list$old2$hosp
seir.list$old2$total.cases
RunBoth <- function(inputs, HP2, pop.num.set, run.cred.int) {
if (run.cred.int) {
E0 <- NA
} else {
E0 <- rep(20, nrow(inputs$all.params)) #runif(nrow(inputs$all.params), 0, 1e-3)
}
outputs.new <- Run1(inputs, HP2, pop.num = stop("pop.num not used"), run.cred.int, run.new = T, E0)
new.list <- list(NULL, NULL)
if (run.cred.int) {
for (pop.num in pop.num.set) {
new.list[[pop.num]] <- ConvertSimArray(outputs.new, pop.num)
}
} else {
for (pop.num in pop.num.set) {
new.list[[pop.num]] <- ConvertSimArray(outputs.new, pop.num)
}
}
old.list <- list(NULL, NULL)
for (pop.num in pop.num.set) {
old.list[[pop.num]] <- Run1(inputs, HP2, pop.num, run.cred.int, run.new = F, E0)
}
return(list(new1 = new.list[[1]], new2 = new.list[[2]], old1 = old.list[[1]], old2 = old.list[[2]]))
}
seir.list <- RunBoth(inputs, HP2, 1:2, run.cred.int = F)
print(all.equal(seir.list$new1, seir.list$old1))
print(all.equal(seir.list$new2, seir.list$old2))
seir.list$new2$total.cases
seir.list$new2$S
inputs$all.params
source('~/Dropbox (UC Berkeley Biostat)/jsLEMMA/R/InputsFromSpreadsheet.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks.R', echo=TRUE)
seir.list$new1$hosp
seir.list$new2$hosp
cred.list$new1
### Test 3
inputs <- GetInputs("~/Dropbox/LEMMA_shared/JS code branch/VulnPopsDev/SF-homeless test-small niter.xlsx")
load_all()
### Test 3
inputs <- GetInputs("~/Dropbox/LEMMA_shared/JS code branch/VulnPopsDev/SF-homeless test-small niter.xlsx")
inputs$internal.args$simulation.start.date <- as.Date("2020/2/15")
inputs$model.inputs$end.date <- as.Date("2020/3/1")
# inputs$all.params <- inputs$all.params[1:2]
pop2.scale <- 1/8000
inputs$model.inputs$total.population[2] <- inputs$model.inputs$total.population[2] * pop2.scale
HP2 <- copy(HP2.orig)
HP2 <- inputs.list$HP2
HP2[, lower := NA]
HP2[, upper := NA]
z <- RunBoth(inputs, HP2, pop.num.set = 1, run.cred.int = F)
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks.R', echo=TRUE)
### Test 3
inputs.list <- GetInputs("~/Dropbox/LEMMA_shared/JS code branch/VulnPopsDev/SF-homeless test-small niter.xlsx")
load_all()
### Test 3
inputs.list <- GetInputs("~/Dropbox/LEMMA_shared/JS code branch/VulnPopsDev/SF-homeless test-small niter.xlsx")
inputs <- inputs.list$inputs
HP2 <- inputs.list$HP2
inputs$internal.args$simulation.start.date <- as.Date("2020/2/15")
inputs$model.inputs$end.date <- as.Date("2020/3/1")
# inputs$all.params <- inputs$all.params[1:2]
pop2.scale <- 1/8000
inputs$model.inputs$total.population[2] <- inputs$model.inputs$total.population[2] * pop2.scale
HP2 <- inputs.list$HP2
HP2[, lower := NA]
HP2[, upper := NA]
z <- RunBoth(inputs, HP2, pop.num.set = 1, run.cred.int = F)
print(all.equal(z$new1, z$old1))
inputs$model.inputs$end.date <- as.Date("2020/4/25")
z.cred <- RunBoth(inputs, HP2, pop.num.set = 1, run.cred.int = T)
print(all.equal(z.cred$new1, z.cred$old1))
### Test 3
inputs.list <- GetInputs("~/Dropbox/LEMMA_shared/JS code branch/VulnPopsDev/SF-homeless test-small niter.xlsx")
### Test 3
inputs.list <- GetInputs("~/Dropbox/LEMMA_shared/JS code branch/VulnPopsDev/SF-homeless test-small niter.xlsx")
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks.R', echo=TRUE)
inputs$model.inputs$total.population
### Test 3
inputs.list <- GetInputs("~/Dropbox/LEMMA_shared/JS code branch/VulnPopsDev/SF-homeless test-small niter.xlsx")
inputs <- inputs.list$inputs
HP2 <- inputs.list$HP2
inputs$internal.args$simulation.start.date <- as.Date("2020/2/15")
inputs$model.inputs$end.date <- as.Date("2020/3/1")
# inputs$all.params <- inputs$all.params[1:2]
inputs$model.inputs$total.population[2] <- 0.00001
HP2 <- inputs.list$HP2
HP2[, lower := NA]
HP2[, upper := NA]
z <- RunBoth(inputs, HP2, pop.num.set = 1, run.cred.int = F)
print(all.equal(z$new1, z$old1))
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks.R', echo=TRUE)
inputs.list$inputs$model.inputs$total.population
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks.R', echo=TRUE)
inputs.list$inputs$model.inputs$total.population
inputs$all.params
head(inputs$all.params)
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks.R', echo=TRUE)
r.mat
p$r0.initial.1
N
GetBetaMatrix
sum(N)/N
(sum(N)/N)[1]
(sum(N)/N)[1]-1
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
params$use.hosp.rate
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
seir.list
names(seir.list$new1)
new.sum <- seir.list$new1
for (i in names(seir.list$new1)) {
new.sum[[i]] <- new.sum[[i]] + seir.list$new2
}
i
new.sum[[i]]
class(new.sum[[i]])
new.sum <- seir.list$new1
for (i in names(seir.list$new1)) {
new.sum[[i]] <- new.sum[[i]] + seir.list$new2[[i]]
}
print(all.equal(new.sum, seir.list$old1))
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
seir.list$new1$S
seir.list$new2$S
seir.list$new1$E
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
seir.list$new1$S
seir.list$new2$S
seir.list$new1$E
seir.list$new2$E
new.sum$E
seir.list$old1
seir.list$old1$E
seir.list$old2$E
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
seir.list$old1$E
seir.list$old2$E
seir.list$old1$S
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
seir.list$old1$S
seir.list$old2$S
seir.list$new1$S
seir.list$new2$S
seir.list$new1$E
seir.list$new2$E
seir.list$old1$E
inputs$all.params[1]
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
inputs$all.params[1]
seir.list$old1$E
seir.list$new1$E
seir.list$new2$E
new.sum$E
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
new.sum$E
cbind(seir.list$new1$E, seir.list$new2$E)
seir.list$old1$E
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
rm(list = ls())
setwd("~/Dropbox/jsLEMMA/")
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks - old SEIR.R')
library(devtools)
library(data.table)
library(matrixStats)
load_all()
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
?unload
unload
loadedNamespaces()
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
inputs$all.params
head(inputs$all.params)
seir.list$new1$E - seir.list$old1$E
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
setwd("~/Dropbox/LEMMA_shared/JS code branch/lemma input and output/SF May 8/
setwd("~/Dropbox/LEMMA_shared/JS code branch/lemma input and output/SF May 8/")
setwd("~/Dropbox/LEMMA_shared/JS code branch/lemma input and output/SF May 8/")
dt <- fread("COVID-19_HospitalizationsMay8.csv")
dt[, date := as.Date(reportDate)]
dt[, .(meanAcrossDays = mean(PatientCount)), by = c("Hospital", "DPHCategory", "CovidStatus")]
dt[CovidStatus == "COVID+", mult.low := 1]
dt[CovidStatus == "COVID+", mult.high := 1]
dt[CovidStatus == "PUI", mult.low := 0]
dt[CovidStatus == "PUI", mult.high := 0.3]
write.table(hosp.bounds, sep = ",", row.names = F, col.names = F)
source('~/.active-rstudio-document', echo=TRUE)
hosp.bounds
write.table(hosp.bounds, sep = ",", row.names = F, col.names = F)
setwd("~/Dropbox/jsLEMMA/vignettes/")
result <- LEMMA::CredibilityIntervalFromExcel("SF-May4.xlsx")
rm(list = ls())
library(LEMMA)
library(data.table)
library(ggplot2)
dt <- fread("COVID-19_Hospitalizations_SFMay4.csv")
dt[, date := as.Date(reportDate)]
dt[, .(meanAcrossDays = mean(PatientCount)), by = c("Hospital", "DPHCategory", "CovidStatus")]
dt <- fread("COVID-19_Hospitalizations_SF.csv")
dt <- fread("COVID-19_Hospitalizations_SF.csv")
dt[, date := as.Date(reportDate)]
dt[, .(meanAcrossDays = mean(PatientCount)), by = c("Hospital", "DPHCategory", "CovidStatus")]
dt[CovidStatus == "COVID+", mult.low := 1]
dt[CovidStatus == "COVID+", mult.high := 1]
dt[CovidStatus == "PUI", mult.low := 0]
dt[CovidStatus == "PUI", mult.high := 0.3]
hosp.bounds <- dt[, .(LowerBound = sum(PatientCount * mult.low),
UpperBound = sum(PatientCount * mult.high)), by=date]
hosp.bounds
hosp.bounds <-
hosp.bounds[!date %in% as.Date(c("2020-03-30", "2020-03-31", "2020-04-03", "2020-04-04"))]
write.table(hosp.bounds, sep = ",", row.names = F, col.names = F)
dt <- fread("COVID-19_Hospitalizations_SFMay6.csv")
dt[, date := as.Date(reportDate)]
dt[, .(meanAcrossDays = mean(PatientCount)), by = c("Hospital", "DPHCategory", "CovidStatus")]
dt[CovidStatus == "COVID+", mult.low := 1]
dt[CovidStatus == "COVID+", mult.high := 1]
dt[CovidStatus == "PUI", mult.low := 0]
dt[CovidStatus == "PUI", mult.high := 0.3]
hosp.bounds <- dt[, .(LowerBound = sum(PatientCount * mult.low),
UpperBound = sum(PatientCount * mult.high)), by=date]
hosp.bounds
ggplot(hosp.bounds, aes(x = date)) +
geom_line(aes(y = LowerBound)) +
geom_line(aes(y = UpperBound)) +
ylab("Hospitalizations")
ggplot(hosp.bounds, aes(x = date)) +
geom_line(aes(y = LowerBound)) +
geom_line(aes(y = UpperBound)) +
ylab("Hospitalizations")
hosp.bounds <-
hosp.bounds[!date %in% as.Date(c("2020-03-30", "2020-03-31", "2020-04-03", "2020-04-04"))]
write.table(hosp.bounds, sep = ",", row.names = F, col.names = F)
result <- LEMMA::CredibilityIntervalFromExcel("SF-May6.xlsx")
CachePlot("SF-May6.rds", print.long.term = F)
CachePlot <- function(filename, print.short.term = T, print.long.term = T) {
if (eval.all) {
gplot <- result$gplot
saveRDS(gplot, filename)
} else {
gplot <- readRDS(filename)
}
if (print.short.term) print(gplot$short.term)
if (print.long.term) print(gplot$long.term)
invisible(NULL)
}
CachePlot("SF-May6.rds", print.long.term = F)
eval.all=T
CachePlot
CachePlot("SF-May6.rds", print.long.term = F)
result <- LEMMA::CredibilityIntervalFromExcel("SF-May6-v2.xlsx")
result$gplot$long.term <- result$gplot$long.term + labs(subtitle = "Scenario: Re increases 50% (20%-100%) on June 1")
CachePlot("SF-May6-v2.rds", print.long.term = F)
CachePlot("SF-May6-v2.rds", print.short.term = F)
build_site()
setwd("~/Dropbox/jsLEMMA/")
build_site()
# rm(list = ls())
setwd("~/Dropbox/MyLEMMA(STL)/Josh_Help/May 8/")
library(ggplot2)
library(data.table)
# rm(list = ls())
setwd("~/Dropbox/MyLEMMA(STL)/Josh_Help/May 8/")
regionC <- T
if (regionC) {
elvin.file <- "RegionC_Josh.xlsx"
input.file <- "RegionC_JS.xlsx"
start.smooth.day <- 10
} else {
elvin.file <- "RegionE_Josh.xlsx"
input.file <- "RegionE_JS.xlsx"
start.smooth.day <- 0
}
if (F) {
inputs.elvin <- LEMMA:::ReadInputs(elvin.file)
h <- copy(inputs.elvin$hosp.bounds)
h <- h[lower > 0]
h[, orig.lower := lower]
h[, orig.upper := upper]
h[, date.index := 1:nrow(h)]
span <- 0.4
m1 <- loess(lower ~ date.index, data = h, span = span)
h$smooth.lower <- predict(m1)
m2 <- loess(upper ~ date.index, data = h, span = span)
h$smooth.upper <- predict(m2)
h[date.index > start.smooth.day, lower := smooth.lower]
h[date.index > start.smooth.day, upper := smooth.upper]
g=ggplot(h, aes(x = date)) +
geom_line(aes(y = lower)) +
geom_line(aes(y = upper)) +
geom_point(aes(y=orig.upper, shape = "Upper Bound"), fill = "black", na.rm = T) +
geom_point(aes(y=orig.lower, shape = "Lower Bound"), fill = "black", na.rm = T)
print(g)
print(h[, .(date, lower, upper)], row.names = F)
stop("paste these to excel")
}
inputs.orig <- LEMMA:::ReadInputs(input.file)
inputs.orig <- LEMMA:::ReadInputs(input.file)
scenario.set <- 2 #c(2, 3, 1, 3.1, 3.2, 3.3, 3.4, 3.5)
for (scenario in scenario.set) {
inputs <- copy(inputs.orig)
inputs$internal.args$output.filestr <- paste0(sub(".xlsx", " output - Scenario ", input.file, fixed = T), scenario)
if (scenario == 1) {
inputs$all.params[, intervention1.date := as.Date("2020/3/19")]
inputs$best.guess.params[, intervention1.date := as.Date("2020/3/19")]
inputs$all.params$intervention1.multiplier <- LEMMA:::SampleParam(p = list(0.8, 0.85, 0.9, 0.95, 1), probs = c(0.1, 0.2, 0.4, 0.2, 0.1), niter = nrow(inputs$all.params))
inputs$all.params$best.guess.params <- 0.9
inputs$all.params[, intervention2.multiplier := 1]
inputs$best.guess.params[, intervention2.multiplier := 1]
inputs$all.params[, intervention3.multiplier := 1]
inputs$best.guess.params[, intervention3.multiplier := 1]
inputs$hosp.bounds <- inputs$hosp.bounds[date <= as.Date("2020/3/19")]
inputs$observed.data <- inputs$observed.data[date <= as.Date("2020/3/19")]
inputs$internal.args$required.in.bounds <- 0.7
} else if (scenario == 2) {
#scen 2 - mult3 = 1
inputs$all.params[, intervention3.multiplier := 1]
inputs$best.guess.params[, intervention3.multiplier := 1]
} else if (scenario %in% c(3, 3.1, 3.2, 3.3, 3.4, 3.5)) {
#scen 3 - as in input
if (scenario == 3) {
v1 <- LEMMA::VaryOneParameter(input.file, parameter.name = "intervention3.multiplier")
print(v1$gplot)
} else {
mult3.index <- as.integer(round(10 * (scenario - 3)))
fixed.mult3 <- c(1.1, 1.3, 1.5, 1.7, 1.9)[mult3.index]
inputs$all.params[, intervention3.multiplier := fixed.mult3]
inputs$best.guess.params[, intervention3.multiplier := fixed.mult3]
}
} else {
stop()
}
z <- LEMMA:::CredibilityInterval(all.params = inputs$all.params, model.inputs = inputs$model.inputs, hosp.bounds = inputs$hosp.bounds, best.guess.params = inputs$best.guess.params, observed.data = inputs$observed.data, internal.args = inputs$internal.args, extras = inputs$excel.input)
}
inputs$all.params
inputs <- copy(inputs.orig)
LEMMA::CredibilityIntervalFromExcel("RegionC_JS-scenario2.xlsx")
LEMMA::CredibilityIntervalFromExcel("RegionC_JS-scenario2.xlsx")
LEMMA::CredibilityIntervalFromExcel("RegionC_JS-scenario2.xlsx")
500/92
LEMMA::CredibilityIntervalFromExcel("RegionC_JS-scenario2.xlsx")
LEMMA::CredibilityIntervalFromExcel("RegionC_JS-scenario2-data As Is.xlsx")
LEMMA::CredibilityIntervalFromExcel("RegionC_JS-scenario2-data As Is.xlsx")
28/10000
500/28/10000
500/(28/10000 )
LEMMA::CredibilityIntervalFromExcel("RegionC_JS-scenario2-data As Is.xlsx")
LEMMA::CredibilityIntervalFromExcel("RegionC_JS-scenario2-data As Is.xlsx")
library(readxl)
inputs.elvin <- read_excel("Raw data to May5.xlsx")
inputs.elvin
h <- copy(as.data.table(inputs.elvin))
h
class(h$Date)
h <- h[ , .(date = as.Date(Date), lower = `# of beds occupied with COVID-19`)]
h
h[, orig.lower := lower]
h[, date.index := 1:nrow(h)]
span <- 0.4
m1 <- loess(lower ~ date.index, data = h, span = span)
h$smooth.lower <- predict(m1)
h[, smooth.upper := smooth.lower * 1.15]
h
g=ggplot(h, aes(x = date)) +
geom_line(aes(y = lower)) +
geom_line(aes(y = upper)) +
geom_point(aes(y=orig.upper, shape = "Upper Bound"), fill = "black", na.rm = T) +
geom_point(aes(y=orig.lower, shape = "Lower Bound"), fill = "black", na.rm = T)
print(g)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
h2 <- h[, .(date, lower = smooth.lower, upper = smooth.lower * 1.15)]
write.table(h2, sep = ",", row.names = F, col.names = F)
h
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
LEMMA::CredibilityIntervalFromExcel("RegionC_JS-scenario2-data As Is.xlsx")
x=fread("~/Documents/GitHub/DL-COVID-19/DL-us-mobility-daterow.csv")
unique(x$admin1)
xx <- x[admin1 == "Missouri"]
unique(xx$admin2)
xx <- x[admin1 == "Missouri" & admin2 == "Saint Louis County"]
xx[, Date := as.Date(date)]
ggplot(xx, aes(x = Date, y = m50_index)) +
geom_line(color = "blue") +
ylab("Descartes Lab Mobility Index")
xx
xx[, .(date, m50_index)]
rm(list = ls())
x=fread("~/Dropbox/Reopen Berkeley/nhgis0001_csv/nhgis0001_ds239_20185_2018_tract.csv")
x
names(x)
x[, unique(STATE)]
x[, unique(STATEA)]
x[, unique(STATE)]
x[STATE == "California", unique("COUNTY")]
x[STATE == "California", unique(COUNTY)]
x[STATE == "California" & COUNTY = "San Francisco County", TRACTA]
x[STATE == "California" & COUNTY == "San Francisco County", unique(TRACTA)]
rm(list = ls())
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/Fit StL-May8.R', echo=TRUE)
names(inputs)
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/Fit StL-May8.R', echo=TRUE)
inputs
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/Fit StL-May8.R', echo=TRUE)
names(inputs$all.params)
fixed.mult3
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/Fit StL-May8.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/Fit StL-May8.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/Fit StL-May8.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/Fit StL-May8.R')
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/Fit StL-May8.R')
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R')
799911.11+99988.89
0.7*899900 * 33.33333 / 9e+05
33.33333/9e+05
29.629630/8e5
3.703704/1e5
c(799911.11 , 99988.89)/9e5
c(799911.11 , 99988.89)/9e5 * c(29.629630 , 3.703704)
b=matrix(c(.7, 0.0875, 5.6, 0.7), 2, 2)
b
b %*% c(26.3345225 , 0.4114769)
20.738436 + 2.592305
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
new.sum$E
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
names(params)
load_all()
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
inputs$all.params
GetBetaMatrix
LEMMA:::GetBetaMatrix
load_all()
GetBetaMatrix
load_all()
GetBetaMatrix
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
inputs$all.params
head(inputs$all.params)
nrow(inputs$all.params)
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
new.sum$E
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
new.sum$E
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/VulnPopsDev/consistency checks2.R', echo=TRUE)
remotes::install_github("LocalEpi/LEMMA")
inputs <- ReadInputs("~/Dropbox/LEMMA_shared/JS code branch/VulnPopsDev/SF-two populations.xlsx")
load_all()
inputs <- ReadInputs("~/Dropbox/LEMMA_shared/JS code branch/VulnPopsDev/SF-two populations.xlsx")
inputs$hosp.bounds
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
total.hosp
