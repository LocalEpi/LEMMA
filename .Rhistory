class(says)
class(days)
bounds <- data.table(date = days)
dt[, lower := -Inf]
bounds <- data.table(date = days)
bounds[, lower := -Inf]
bounds[, upper := Inf]
bounds
xls
xls <- xls[, .(Date, lower, upper)]
xls
bounds
i=2
index <- which(bounds$date == xls[i, Date])
index
xls[, date := as.Date(Date)]
xls
xls <- xls[, .(date, lower, upper)]
xls
bounds
bounds <- data.table(date = days)
bounds
merge(bounds, xls, by = "date")
merge(bounds, xls, by = "date", all.x = T)
bounds
GetBounds <- function(days, xls) {
bounds <- data.table(date = days)
bounds <- merge(bounds, xls, by = "date", all.x = T)
return(list(lower = lower, upper = upper))
}
xls <- as.data.table(read_excel("Dropbox/Josh-Berkeley/Covid/Hospital data SF Mar23_29.xlsx", range = "A3:X10"))
xls[, date := as.Date(Date)]
xls[, lower := 0.75 * `Calc Total...5`]
xls[, upper := 1.25 * `Calc Total...24`]
xls <- xls[, .(date, lower, upper)]
bounds <- GetBounds(dates = best.guess$date, xls) #lower: 47 x 1, upper 47 x 1
GetBounds <- function(dates, xls) {
bounds <- data.table(date = dates)
bounds <- merge(bounds, xls, by = "date", all.x = T)
return(list(lower = lower, upper = upper))
}
if (old.data) {
xls <- as.data.table(read_excel("Dropbox/Josh-Berkeley/Covid/Hospital data SF Mar23_29.xlsx", range = "A3:X10"))
} else {
xls <- as.data.table(read_excel("Dropbox/Josh-Berkeley/Covid/Hospital data SF Mar23_Apr1.xlsx", range = "A3:X13"))
}
xls[, date := as.Date(Date)]
if (old.data) {
xls <- as.data.table(read_excel("Dropbox/Josh-Berkeley/Covid/Hospital data SF Mar23_29.xlsx", range = "A3:X10"))
} else {
xls <- as.data.table(read_excel("Dropbox/Josh-Berkeley/Covid/Hospital data SF Mar23_Apr1.xlsx", range = "A3:X13"))
}
old.data <- T
if (old.data) {
xls <- as.data.table(read_excel("Dropbox/Josh-Berkeley/Covid/Hospital data SF Mar23_29.xlsx", range = "A3:X10"))
} else {
xls <- as.data.table(read_excel("Dropbox/Josh-Berkeley/Covid/Hospital data SF Mar23_Apr1.xlsx", range = "A3:X13"))
}
xls[, date := as.Date(Date)]
xls[, lower := 0.75 * `Calc Total...5`]
xls[, upper := 1.25 * `Calc Total...24`]
xls <- xls[, .(date, lower, upper)]
bounds <- GetBounds(dates = best.guess$date, xls) #lower: 47 x 1, upper 47 x 1
best.guess
xls
bounds <- GetBounds(dates = best.guess$date, xls) #lower: 47 x 1, upper 47 x 1
GetBounds <- function(dates, xls) {
bounds <- data.table(date = dates)
bounds <- merge(bounds, xls, by = "date", all.x = T)
return(bounds)
}
bounds <- GetBounds(dates = best.guess$date, xls) #lower: 47 x 1, upper 47 x 1
bounds
?merge
GetBounds <- function(dates, xls) {
bounds <- data.table(date = dates)
bounds <- merge(bounds, xls, by = "date", all.x = T)
bounds[is.na(lower), lower := -Inf]
bounds[is.na(upper), lower := Inf]
return(bounds)
}
bounds <- GetBounds(dates = best.guess$date, xls) #lower: 47 x 1, upper 47 x 1
bounds
bounds
GetBounds <- function(dates, xls) {
bounds <- data.table(date = dates)
bounds <- merge(bounds, xls, by = "date", all.x = T)
bounds[is.na(lower), lower := -Inf]
bounds[is.na(upper), upper := Inf]
return(bounds)
}
bounds <- GetBounds(dates = best.guess$date, xls) #lower: 47 x 1, upper 47 x 1
bounds
bounds
stopifnot(all(best.guess$hosp > bounds$lower & best.guess$hosp < bounds$upper))
dim(sim.hosp)
in.bounds <- apply(sim.hosp, 2, function (z) all(z > bounds$lower & z < bounds$upper))
warnings()
in.bounds <- apply(sim.hosp, 1, function (z) all(z > bounds$lower & z < bounds$upper))
in.bounds
quant <- colQuantiles(sim.hosp.accepted, probs = c(0.05, 0.5, 0.95))
output <- data.table(date = best.guess$date, quant, bestguess = best.guess$hosp)
output
sim.hosp.accepted <- sim.hosp[in.bounds, ]
quant <- colQuantiles(sim.hosp.accepted, probs = c(0.05, 0.5, 0.95))
output <- data.table(date = best.guess$date, quant, bestguess = best.guess$hosp)
output
old.data
output <- output[, .(date, `5%`, `50%`, bestguess, `95%`)]
output
rm(list = ls())
source('~/Dropbox (UC Berkeley Biostat)/Josh-Berkeley/Covid/CredibilityInterval.R')
options(warn=2)
source('~/Dropbox (UC Berkeley Biostat)/Josh-Berkeley/Covid/CredibilityInterval.R')
sim.hosp
sim.hosp <- t(simplify2array(mclapply(1:niter, RunIter, input.range.real, mc.cores = 8))) #niter x 47
sim.hosp
options(warn=0)
sim.hosp <- t(simplify2array(mclapply(1:niter, RunIter, input.range.real, mc.cores = 8))) #niter x 47
sim.hosp
?is.unsorted
source('~/Dropbox (UC Berkeley Biostat)/Josh-Berkeley/Covid/CredibilityInterval.R')
diff(sort(runif(10)))
source('~/Dropbox (UC Berkeley Biostat)/Josh-Berkeley/Covid/CredibilityInterval.R')
warnings()
options(warn=2)
source('~/Dropbox (UC Berkeley Biostat)/Josh-Berkeley/Covid/CredibilityInterval.R')
options(warn=0)
sim.hosp <- t(simplify2array(mclapply(1:niter, RunIter, input.range.real, mc.cores = 8))) #niter x 47
sim.hosp
input.range.real
source('~/Dropbox (UC Berkeley Biostat)/Josh-Berkeley/Covid/CredibilityInterval.R')
source('~/Dropbox (UC Berkeley Biostat)/Josh-Berkeley/Covid/CredibilityInterval.R')
source('~/Dropbox (UC Berkeley Biostat)/Josh-Berkeley/Covid/CredibilityInterval.R')
source('~/Dropbox (UC Berkeley Biostat)/Josh-Berkeley/Covid/CredibilityInterval.R')
?colQuantiles
suppressMessages({
if (old.data) {
xls <- as.data.table(read_excel("Dropbox/Josh-Berkeley/Covid/Hospital data SF Mar23_29.xlsx", range = "A3:X10"))
} else {
xls <- as.data.table(read_excel("Dropbox/Josh-Berkeley/Covid/Hospital data SF Mar23_Apr1.xlsx", range = "A3:X13"))
}})
library(openxlsx)
?write.xlsx
quant <- colQuantiles(sim.hosp.accepted, probs = c(0, 0.05, 0.5, 0.95, 1))
output <- data.table(date = best.guess$date, quant, bestguess = best.guess$hosp)
input.range=input.range.real
input.vary <- lapply(input.range, DrawInput)
if (input.vary$int.new.r0 == -999) input.vary$int.new.r0 <- input.vary$r0_prior
input.vary
input.const <- list(icu.rate = 0.50,
vent.rate = 0.85,
proj_num_days = 47,
num_people = 883305,
curr_date = as.Date("2020/3/16"),
int_date = as.Date("2020/3/16"))
input <- c(input.vary, input.const)
params <- M0$save.params(params = NULL, input = input)
params$patients.in.hosp.are.infectious <- F #JS added
seir.df <- LocalLemma(input, params, model = M0, est.days = 150)
seir.df
head(seir.df)
source('Dropbox/Josh-Berkeley/utils/GeneralUtilities.R')
source('~/Dropbox (UC Berkeley Biostat)/Josh-Berkeley/Covid/CredibilityInterval.R')
rm(list = ls())
source('~/Dropbox (UC Berkeley Biostat)/Josh-Berkeley/Covid/CredibilityInterval.R')
sim
dim(sim)
dimnames(sim)[3]
dimnames(sim)[[3]]
dimnames(sim)
dim(sim[, "hosp", ])
in.bounds <- apply(sim[, "hosp", ], 1, function (z) all(z > bounds$lower & z < bounds$upper))
suppressMessages({
if (old.data) {
xls <- as.data.table(read_excel("Dropbox/Josh-Berkeley/Covid/Hospital data SF Mar23_29.xlsx", range = "A3:X10"))
} else {
xls <- as.data.table(read_excel("Dropbox/Josh-Berkeley/Covid/Hospital data SF Mar23_Apr1.xlsx", range = "A3:X13"))
}})
xls[, date := as.Date(Date)]
xls[, lower := 0.75 * `Calc Total...5`]
xls[, upper := 1.25 * `Calc Total...24`]
xls <- xls[, .(date, lower, upper)]
bounds <- GetBounds(dates = best.guess$date, xls) #lower: 47 x 1, upper 47 x 1
stopifnot(all(best.guess$hosp > bounds$lower & best.guess$hosp < bounds$upper))
in.bounds <- apply(sim[, "hosp", ], 1, function (z) all(z > bounds$lower & z < bounds$upper))
in.bounds <- apply(sim[, "hosp", ], 2, function (z) all(z > bounds$lower & z < bounds$upper))
in.bounds
j="icu"
sim.accepted <- sim[in.bounds, j, ]
dim(sim)
sim.accepted <- sim[, j, in.bounds]
sim.accepted
dim(sim)
j
in.bounds
dim(sim[, j, in.bounds])
sim.accepted <- sim[, j, in.bounds]
sim.accepted
quant <- colQuantiles(sim.hosp.accepted, probs = c(0, 0.05, 0.5, 0.95, 1))
dim(sim.accepted)
sim.accepted <- sim[, j, in.bounds]
quant <- rowQuantiles(sim.hosp.accepted, probs = c(0, 0.05, 0.5, 0.95, 1))
sim.accepted <- sim[, j, in.bounds]
quant <- rowQuantiles(sim.accepted, probs = c(0, 0.05, 0.5, 0.95, 1))
output <- data.table(date = best.guess$date, quant, bestguess = best.guess[[j]])
output <- output[, .(date, min = `0%`,`5%`, `50%`, bestguess, `95%`, max = `100%`)]
output
source('~/Dropbox (UC Berkeley Biostat)/Josh-Berkeley/Covid/CredibilityInterval.R')
source('~/Dropbox (UC Berkeley Biostat)/Josh-Berkeley/Covid/CredibilityInterval.R')
ls()
ls()
ls()
source('~/Dropbox (UC Berkeley Biostat)/Josh-Berkeley/Covid/CredibilityInterval.R')
ls()
dt
source('~/Dropbox (UC Berkeley Biostat)/Josh-Berkeley/Covid/CredibilityInterval.R')
output.list
source('~/Dropbox (UC Berkeley Biostat)/Josh-Berkeley/Covid/CredibilityInterval.R')
source('~/Dropbox (UC Berkeley Biostat)/Josh-Berkeley/Covid/CredibilityInterval.R')
source('~/Dropbox (UC Berkeley Biostat)/Josh-Berkeley/Covid/CredibilityInterval.R')
ls()
dt[1, ]
seir.df[, c("date", output.names)]
input$curr_date
input$curr_date - 1
dt <- as.data.table(seir.df[, c("date", output.names)])
hosp.day0 <- dt[date == input$curr_date - 1, hosp]
hosp.day0
hosp.day2 <- dt[date == input$curr_date + 1, hosp]
hosp.day2
output.list <- list()
output.list[[1]]
cbind(NULL, output)
?list
source('~/Dropbox (UC Berkeley Biostat)/Josh-Berkeley/Covid/CredibilityInterval.R')
source('~/Dropbox (UC Berkeley Biostat)/Josh-Berkeley/Covid/CredibilityInterval.R')
cat("No Intervention                                     Intervention")
source('~/Dropbox (UC Berkeley Biostat)/Josh-Berkeley/Covid/CredibilityInterval.R')
debugSource('~/Dropbox (UC Berkeley Biostat)/Josh-Berkeley/Covid/CredibilityInterval.R')
sim
dim(sim)
sim
sim[, "Re", ]
sim[1, "Re", ]
hist(Re)
Re
Re <- sim[1, "Re", ] #any row, they're all the same
Re
hist(Re)
hist(Re[in.bounds])
hist(Re, breaks = unique(Re)))
hist(Re, breaks = unique(Re))
unique(Re)
hist(Re)
library(ggplot2)
ggplot(Re) + geom_histogram()
ggplot(data.frame(Re)) + geom_histogram()
ggplot(data.frame(Re)) + geom_histogram(aes(x = Re))
ggplot(data.frame(Re)) + geom_histogram(aes(x = Re)) + ggtitle("Prior")
ggplot(data.frame(Re)) + geom_histogram(aes(x = Re)) + ggtitle("Prior Distribution")
?geom_histogram
ggplot(data.frame(Re)) + stat_bin(aes(x = Re)) + ggtitle("Prior Distribution")
ggplot(data.frame(Re)) + geom_freqpoly(aes(x = Re)) + ggtitle("Prior Distribution")
ggplot(data.frame(Re)) + stat_count(aes(x = Re)) + ggtitle("Prior Distribution")
ggplot(data.frame(Re)) + geom_bar(aes(x = Re)) + ggtitle("Prior Distribution")
ggplot(data.frame(Re)) + geom_bar(aes(x = Re, y = ..density..)) + ggtitle("Prior Distribution")
ggplot(data.frame(Re)) + geom_bar(aes(x = Re, y = ..prop..)) + ggtitle("Prior Distribution")
ggplot(data.frame(Re)) + geom_bar(aes(x = Re, y = ..prop..)) + ggtitle("Prior Distribution") + ylab("Freq")
print(ggplot(data.frame(Re)) + geom_bar(aes(x = Re, y = ..prop..)) + ggtitle("Prior Distribution") + ylab("Freq"))
print(ggplot(data.frame(Re[in.bounds])) + geom_bar(aes(x = Re, y = ..prop..)) + ggtitle("Posterior Distribution") + ylab("Freq"))
print(ggplot(data.frame(Re = Re[in.bounds])) + geom_bar(aes(x = Re, y = ..prop..)) + ggtitle("Posterior Distribution") + ylab("Freq"))
?unique
Re.dt <- data.table(Re = factor(Re, levels = sort(unique(Re))))
Re.dt
print(ggplot(data.frame(Re)) + geom_bar(aes(x = Re, y = ..prop..)) + ggtitle("Prior Distribution") + ylab("Freq"))
print(ggplot(Re.dt) + geom_bar(aes(x = Re, y = ..prop..)) + ggtitle("Prior Distribution") + ylab("Freq"))
print(ggplot(Re.dt) + stat_count(aes(x = Re, y = ..prop..)) + ggtitle("Prior Distribution") + ylab("Freq"))
Re.dt <- data.table(Re = factor(Re, levels = sort(unique(Re))))
barplot(prop.table(table(Re.dt)))
prop.table(table(Re.dt))
barplot(prop.table(table(Re.dt[in.bounds])))
barplot(prop.table(table(Re.dt[in.bounds])), main = "Posterior Distribution")
barplot(prop.table(table(Re.dt)), main = "Prior Distribution")
?table
tabulate(factor(letters[1:10]))
tabulate(factor(letters[c(1:10, 1)]))
factor(c(5, 2, 4))
as.integer(factor(c(5, 2, 4)))
?factor
factor(c(5, 2, 4, 12, 1))
?sample
input.range
input.range=input.range.real
lapply(input.range, sample, size = 1, prob = c(0.1, 0.8, 0.1))
lapply(input.range, sample, size = 10, prob = c(0.1, 0.8, 0.1))
lapply(input.range, sample, size = 10, prob = c(0.1, 0.8, 0.1), replace=T)
lapply(input.range, sample, size = 20, prob = c(0.1, 0.8, 0.1), replace=T)
?write.xlsx
?barplot
barplot(prop.table(table(Re.dt[in.bounds])), main = "Posterior Distribution", xlab = "Re", ylab = "Freq")
?pdf
dev.off
?dev.off
dev.list()
pdf()
dev.list()
pdf()
dev.list()
dev.off(dev.list())
sapply(dev.list(), dev.off)
dev.list()
source('~/Dropbox (UC Berkeley Biostat)/Josh-Berkeley/Covid/CredibilityInterval.R')
c(0.9, 0.5, 1.2, 1.7, 1.9, "R0")
as.numeric(c(0.9, 0.5, 1.2, 1.7, 1.9, "R0")[1:3])
c(0.9, 0.5, 1.2, 1.7, 1.9, "R0")[1:3]
input.range.real <- list(illness.length = c(5, 3, 4, 6, 7),
hosp.after.inf = c(6, 4, 5, 7, 8),
incubation.period = c(3.5, 2, 3, 4, 5),
hosp.los = c(10, 6, 8, 12, 14),
hosp.rate = c(4, 1, 2, 5, 6)/100,
num_hospitalized = c(20, 10, 15, 25, 30),
r0_prior = c(2.4, 2.0, 2.2, 3.0, 3.8),
int.new.r0 = if (has.intervention) c(0.9, 0.5, 1.2, 1.7, 1.9, "R0") else rep("R0", 5), #"R0" = same as r0_prior
int.smooth.days = c(10, 5, 7, 12, 14),
icu.rate = c(45, 40, 42, 52, 55)/100,
vent.rate = c(85, 80, 82, 87, 90)/100)
input.range.real
source('~/Dropbox (UC Berkeley Biostat)/Josh-Berkeley/Covid/CredibilityInterval.R')
cbind(best.guess, bounds)
old.data
input.range.bestguess
dt.print <- cbind(best.guess, bounds)[is.finite(lower)]
dt.print
dt.print <- cbind(best.guess, bounds)[is.finite(lower)]
dt.print[, OK := hosp > lower & hosp < upper]
dt.print
cat(filestr)
cat("best.guess$hosp is not compatible with bounds!\n")
cat("\n\nold.data = ", old.data, "has.intervention = ", has.intervention,  "\n")
cat("best.guess$hosp is not compatible with bounds!\n")
dt.print <- cbind(best.guess, bounds)[is.finite(lower)]
dt.print[, OK := hosp > lower & hosp < upper]
print(dt.print)
rm(list = ls())
source('~/Dropbox (UC Berkeley Biostat)/Josh-Berkeley/Covid/CredibilityInterval.R')
paste0("Dropbox/Josh-Berkeley/Covid/HospProj", ifelse(old.data, "OLD DATA", ""), " Re uniform=", new.r0.uniform)
old.data
old.data=T
paste0("Dropbox/Josh-Berkeley/Covid/HospProj", ifelse(old.data, "OLD DATA", ""), " Re uniform=", new.r0.uniform)
source('~/Dropbox (UC Berkeley Biostat)/Josh-Berkeley/Covid/CredibilityInterval.R')
rm(list = ls())
source('~/Dropbox (UC Berkeley Biostat)/Josh-Berkeley/Covid/CredibilityInterval.R')
output <- data.table(date = best.guess$date, quant, bestguess = best.guess[[j]])
quant <- rowQuantiles(sim.accepted, probs = c(0, 0.05, seq(0.5, 1, by = 0.05)))
output <- data.table(date = best.guess$date, quant, bestguess = best.guess[[j]])
output
rm(list = ls())
source('~/Dropbox (UC Berkeley Biostat)/Josh-Berkeley/Covid/CredibilityInterval.R')
as.Date("2020/5/1") - as.Date("2020/3/16")
as.Date("2020/7/1") - as.Date("2020/3/16") + 1
rm(list = ls())
source('~/Dropbox (UC Berkeley Biostat)/Josh-Berkeley/Covid/CredibilityInterval.R')
?uniroot
xls <- as.data.table(read_excel("Dropbox/Josh-Berkeley/Covid/Hospital data SF Mar23_Apr2.xlsx", range = "A3:X14"))
xls
xls[, date := as.Date(Date)]
xls[, date := as.Date(...1)]
xls[, lower := 0.9 * `Calc Total...5`]
xls[, upper := 1.1 * `Calc Total...24`]
xls <- xls[, .(date, lower, upper)]
xls
rm(list = ls())
source('~/Dropbox (UC Berkeley Biostat)/Josh-Berkeley/Covid/CredibilityInterval.R')
input.range=input.range.bestguess
input.vary <- lapply(input.range, sample, size = 1, prob = c(0.60, 0.05, 0.15, 0.15, 0.05))
if (input.vary$int.new.r0 == "R0") {
input.vary$int.new.r0 <- input.vary$r0_prior
} else {
input.vary$int.new.r0 <- as.numeric(input.vary$int.new.r0) #these end up as characters
}
input.const <- list(proj_num_days = 108, #as.Date("2020/7/1") - as.Date("2020/3/16") + 1
num_people = 883305,
curr_date = as.Date("2020/3/16"),
int_date = as.Date("2020/3/16"))
input <- c(input.vary, input.const)
params <- M0$save.params(params = NULL, input = input)
params$patients.in.hosp.are.infectious <- F #JS added
seir.df <- LocalLemma(input, params, model = M0, est.days = 150)
seir.df
dt=data.table(seir.df)
dt
dt[, .(date, I, HP)]
print(dt[, .(date, I, HP)], topn=999)
print(dt[, .(date, E, HP)], topn=999)
input.range.bestguess
bg = lapply(input.range.real, function (z) z[1])
bg
bg.int$int.new.r0 <- 0.9
bg$int.new.r0 <- 0.9
bg.int <- bg
bg.noint <- bg
bg.noint$int.new.r0 <- bg.noint$r0_prior
bg.noint
dput(bg.noint)
5/0.06
5/0.06/0.1
#' Get Beta from Doubling Time
#'
#' Returns beta from doubling time using formulas here:
#' https://penn-chime.phl.io/
#'
#' @param doubling.time Numeric.
#' @param gamma Numeric.
#' @import ggplot2 shinyWidgets
getBetaFromDoubling <- function(doubling.time, gamma) {
g <- 2 ^ (1 / doubling.time) - 1
beta <- g + gamma
return(beta)
}
#' Get Beta from Re
#'
#' @param Re Numeric.
#' @param gamma Numeric.
#'
#' @return Numeric.
getBetaFromRe <- function(Re, gamma) {
beta <- Re * gamma
return(beta)
}
getBetaFromRe(3.1, 1/7)
getBetaFromRe(5, 1/7)
getBetaFromRe(4, 1/7)
getBetaFromRe(3, 1/7)
83*8
581+210
2/.06/0.1 * 8
3/.06/0.1 * 8
3/.06 * 8
5/.06 * 8
7/.06 * 8
10/.06 * 8
12/.06 * 8
14/.06 * 8
833/664
2013/701
2013/791
install.packages("remote")
remove.packages("remote")
remove.packages("remotes")
library(remotes)
remove.packages("remotes")
install.packages("remotes")
remotes::install_github("LocalEpi/LEMMA")
system.file("extdata", "SF-April13.xlsx", package = "LEMMA", mustWork = TRUE)
?system.file
find.package("LEMMA")
library(LEMMA)
?remotes::install_github
?install.packages
?remotes::install_github
getOption("pkgType")
list.dirs()
?setwd
qnorm(1 - alpha/2)
qnorm(1 - 0.05/2)
qnorm(1 - 0.05)
source('~/Dropbox (UC Berkeley Biostat)/Reopen Berkeley/textbook sample size.R', echo=TRUE)
library(data.table)
source('~/Dropbox (UC Berkeley Biostat)/Reopen Berkeley/textbook sample size.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/Reopen Berkeley/textbook sample size.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/Reopen Berkeley/textbook sample size.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/Reopen Berkeley/textbook sample size.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/Reopen Berkeley/textbook sample size.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/Reopen Berkeley/textbook sample size.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/Reopen Berkeley/textbook sample size.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/Reopen Berkeley/textbook sample size.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/Reopen Berkeley/textbook sample size.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/Reopen Berkeley/textbook sample size.R', echo=TRUE)
rm(list = ls())
source('~/Dropbox (UC Berkeley Biostat)/Reopen Berkeley/textbook sample size.R', echo=TRUE)
rm(list = ls())
z()
source('~/Dropbox (UC Berkeley Biostat)/Reopen Berkeley/textbook sample size.R', echo=TRUE)
z()
source('~/Dropbox (UC Berkeley Biostat)/Reopen Berkeley/textbook sample size.R', echo=TRUE)
z()
source('~/Dropbox (UC Berkeley Biostat)/Reopen Berkeley/textbook sample size.R', echo=TRUE)
z()
rm(list = ls())
source('~/Dropbox (UC Berkeley Biostat)/Reopen Berkeley/textbook sample size.R', echo=TRUE)
z()
rm(list = ls())
source('~/Dropbox (UC Berkeley Biostat)/Reopen Berkeley/textbook sample size.R', echo=TRUE)
source('~/Dropbox (UC Berkeley Biostat)/Reopen Berkeley/textbook sample size.R', echo=TRUE)
setwd("Documents/GitHub/LEMMA/")
library(pkgdown)
preview_site()
build_site()
usethis::use_github_action("pkgdown")
library(pkgdown)
build_site()
preview_site()
?build_article
library(usethis)
use_vignette("faq", "FAQ")
build_vignettes()
build_articles()
preview_site()
build_articles()
build_site()
build_site()
