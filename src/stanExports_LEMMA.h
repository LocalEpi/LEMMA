// Generated by rstantools.  Do not edit by hand.

/*
    LEMMA is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    LEMMA is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with LEMMA.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_LEMMA_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_LEMMA");
    reader.add_event(302, 300, "end", "model_LEMMA");
    return reader;
}
#include <stan_meta_header.hpp>
class model_LEMMA
  : public stan::model::model_base_crtp<model_LEMMA> {
private:
        int nobs;
        std::vector<int> tobs;
        int npops;
        std::vector<std::vector<double> > obs_data_conf;
        std::vector<std::vector<double> > obs_data_pui;
        int nt;
        std::vector<std::vector<std::vector<double> > > mobility;
        std::vector<double> population;
        int extend;
        double mu_duration_latent;
        double sigma_duration_latent;
        double mu_duration_rec_mild;
        double sigma_duration_rec_mild;
        double mu_duration_pre_hosp;
        double sigma_duration_pre_hosp;
        double mu_duration_hosp_mod;
        double sigma_duration_hosp_mod;
        double mu_duration_hosp_icu;
        double sigma_duration_hosp_icu;
        double mu_r0;
        double sigma_r0;
        double frac_pui;
        double mu_frac_hosp;
        double sigma_frac_hosp;
        double frac_icu;
        double frac_mort;
        std::vector<double> lambda_ini_exposed;
        int ninter;
        std::vector<double> mu_t_inter;
        std::vector<double> sigma_t_inter;
        std::vector<double> mu_len_inter;
        std::vector<double> sigma_len_inter;
        std::vector<std::vector<double> > mu_beta_inter;
        std::vector<std::vector<double> > sigma_beta_inter;
        int S;
        int E;
        int Imild;
        int Ipreh;
        int Hmod;
        int Hicu;
        int Rlive;
        int Rmort;
        int ncompartments;
        int obs_hosp_census;
        int obs_icu_census;
        int obs_cum_deaths;
        int obs_cum_admits;
        int nobs_notmissing;
        double beta_limit;
public:
    model_LEMMA(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_LEMMA(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_LEMMA_namespace::model_LEMMA";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 13;
            context__.validate_dims("data initialization", "nobs", "int", context__.to_vec());
            nobs = int(0);
            vals_i__ = context__.vals_i("nobs");
            pos__ = 0;
            nobs = vals_i__[pos__++];
            check_greater_or_equal(function__, "nobs", nobs, 0);
            current_statement_begin__ = 14;
            validate_non_negative_index("tobs", "nobs", nobs);
            context__.validate_dims("data initialization", "tobs", "int", context__.to_vec(nobs));
            tobs = std::vector<int>(nobs, int(0));
            vals_i__ = context__.vals_i("tobs");
            pos__ = 0;
            size_t tobs_k_0_max__ = nobs;
            for (size_t k_0__ = 0; k_0__ < tobs_k_0_max__; ++k_0__) {
                tobs[k_0__] = vals_i__[pos__++];
            }
            size_t tobs_i_0_max__ = nobs;
            for (size_t i_0__ = 0; i_0__ < tobs_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "tobs[i_0__]", tobs[i_0__], 0);
            }
            current_statement_begin__ = 15;
            context__.validate_dims("data initialization", "npops", "int", context__.to_vec());
            npops = int(0);
            vals_i__ = context__.vals_i("npops");
            pos__ = 0;
            npops = vals_i__[pos__++];
            check_greater_or_equal(function__, "npops", npops, 0);
            current_statement_begin__ = 16;
            validate_non_negative_index("obs_data_conf", "nobs", nobs);
            validate_non_negative_index("obs_data_conf", "npops", npops);
            context__.validate_dims("data initialization", "obs_data_conf", "double", context__.to_vec(nobs,npops));
            obs_data_conf = std::vector<std::vector<double> >(nobs, std::vector<double>(npops, double(0)));
            vals_r__ = context__.vals_r("obs_data_conf");
            pos__ = 0;
            size_t obs_data_conf_k_0_max__ = nobs;
            size_t obs_data_conf_k_1_max__ = npops;
            for (size_t k_1__ = 0; k_1__ < obs_data_conf_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < obs_data_conf_k_0_max__; ++k_0__) {
                    obs_data_conf[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            size_t obs_data_conf_i_0_max__ = nobs;
            size_t obs_data_conf_i_1_max__ = npops;
            for (size_t i_0__ = 0; i_0__ < obs_data_conf_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < obs_data_conf_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "obs_data_conf[i_0__][i_1__]", obs_data_conf[i_0__][i_1__], -(1.0));
                }
            }
            current_statement_begin__ = 17;
            validate_non_negative_index("obs_data_pui", "nobs", nobs);
            validate_non_negative_index("obs_data_pui", "npops", npops);
            context__.validate_dims("data initialization", "obs_data_pui", "double", context__.to_vec(nobs,npops));
            obs_data_pui = std::vector<std::vector<double> >(nobs, std::vector<double>(npops, double(0)));
            vals_r__ = context__.vals_r("obs_data_pui");
            pos__ = 0;
            size_t obs_data_pui_k_0_max__ = nobs;
            size_t obs_data_pui_k_1_max__ = npops;
            for (size_t k_1__ = 0; k_1__ < obs_data_pui_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < obs_data_pui_k_0_max__; ++k_0__) {
                    obs_data_pui[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            size_t obs_data_pui_i_0_max__ = nobs;
            size_t obs_data_pui_i_1_max__ = npops;
            for (size_t i_0__ = 0; i_0__ < obs_data_pui_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < obs_data_pui_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "obs_data_pui[i_0__][i_1__]", obs_data_pui[i_0__][i_1__], -(1.0));
                }
            }
            current_statement_begin__ = 18;
            context__.validate_dims("data initialization", "nt", "int", context__.to_vec());
            nt = int(0);
            vals_i__ = context__.vals_i("nt");
            pos__ = 0;
            nt = vals_i__[pos__++];
            check_greater_or_equal(function__, "nt", nt, 0);
            current_statement_begin__ = 19;
            validate_non_negative_index("mobility", "nt", nt);
            validate_non_negative_index("mobility", "npops", npops);
            validate_non_negative_index("mobility", "npops", npops);
            context__.validate_dims("data initialization", "mobility", "double", context__.to_vec(nt,npops,npops));
            mobility = std::vector<std::vector<std::vector<double> > >(nt, std::vector<std::vector<double> >(npops, std::vector<double>(npops, double(0))));
            vals_r__ = context__.vals_r("mobility");
            pos__ = 0;
            size_t mobility_k_0_max__ = nt;
            size_t mobility_k_1_max__ = npops;
            size_t mobility_k_2_max__ = npops;
            for (size_t k_2__ = 0; k_2__ < mobility_k_2_max__; ++k_2__) {
                for (size_t k_1__ = 0; k_1__ < mobility_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < mobility_k_0_max__; ++k_0__) {
                        mobility[k_0__][k_1__][k_2__] = vals_r__[pos__++];
                    }
                }
            }
            size_t mobility_i_0_max__ = nt;
            size_t mobility_i_1_max__ = npops;
            size_t mobility_i_2_max__ = npops;
            for (size_t i_0__ = 0; i_0__ < mobility_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < mobility_i_1_max__; ++i_1__) {
                    for (size_t i_2__ = 0; i_2__ < mobility_i_2_max__; ++i_2__) {
                        check_greater_or_equal(function__, "mobility[i_0__][i_1__][i_2__]", mobility[i_0__][i_1__][i_2__], 0);
                        check_less_or_equal(function__, "mobility[i_0__][i_1__][i_2__]", mobility[i_0__][i_1__][i_2__], 1);
                    }
                }
            }
            current_statement_begin__ = 20;
            validate_non_negative_index("population", "npops", npops);
            context__.validate_dims("data initialization", "population", "double", context__.to_vec(npops));
            population = std::vector<double>(npops, double(0));
            vals_r__ = context__.vals_r("population");
            pos__ = 0;
            size_t population_k_0_max__ = npops;
            for (size_t k_0__ = 0; k_0__ < population_k_0_max__; ++k_0__) {
                population[k_0__] = vals_r__[pos__++];
            }
            size_t population_i_0_max__ = npops;
            for (size_t i_0__ = 0; i_0__ < population_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "population[i_0__]", population[i_0__], 0);
            }
            current_statement_begin__ = 21;
            context__.validate_dims("data initialization", "extend", "int", context__.to_vec());
            extend = int(0);
            vals_i__ = context__.vals_i("extend");
            pos__ = 0;
            extend = vals_i__[pos__++];
            check_greater_or_equal(function__, "extend", extend, 0);
            check_less_or_equal(function__, "extend", extend, 1);
            current_statement_begin__ = 25;
            context__.validate_dims("data initialization", "mu_duration_latent", "double", context__.to_vec());
            mu_duration_latent = double(0);
            vals_r__ = context__.vals_r("mu_duration_latent");
            pos__ = 0;
            mu_duration_latent = vals_r__[pos__++];
            check_greater_or_equal(function__, "mu_duration_latent", mu_duration_latent, 1.0);
            current_statement_begin__ = 26;
            context__.validate_dims("data initialization", "sigma_duration_latent", "double", context__.to_vec());
            sigma_duration_latent = double(0);
            vals_r__ = context__.vals_r("sigma_duration_latent");
            pos__ = 0;
            sigma_duration_latent = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_duration_latent", sigma_duration_latent, 0.0);
            current_statement_begin__ = 27;
            context__.validate_dims("data initialization", "mu_duration_rec_mild", "double", context__.to_vec());
            mu_duration_rec_mild = double(0);
            vals_r__ = context__.vals_r("mu_duration_rec_mild");
            pos__ = 0;
            mu_duration_rec_mild = vals_r__[pos__++];
            check_greater_or_equal(function__, "mu_duration_rec_mild", mu_duration_rec_mild, 1.0);
            current_statement_begin__ = 28;
            context__.validate_dims("data initialization", "sigma_duration_rec_mild", "double", context__.to_vec());
            sigma_duration_rec_mild = double(0);
            vals_r__ = context__.vals_r("sigma_duration_rec_mild");
            pos__ = 0;
            sigma_duration_rec_mild = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_duration_rec_mild", sigma_duration_rec_mild, 0.0);
            current_statement_begin__ = 29;
            context__.validate_dims("data initialization", "mu_duration_pre_hosp", "double", context__.to_vec());
            mu_duration_pre_hosp = double(0);
            vals_r__ = context__.vals_r("mu_duration_pre_hosp");
            pos__ = 0;
            mu_duration_pre_hosp = vals_r__[pos__++];
            check_greater_or_equal(function__, "mu_duration_pre_hosp", mu_duration_pre_hosp, 1.0);
            current_statement_begin__ = 30;
            context__.validate_dims("data initialization", "sigma_duration_pre_hosp", "double", context__.to_vec());
            sigma_duration_pre_hosp = double(0);
            vals_r__ = context__.vals_r("sigma_duration_pre_hosp");
            pos__ = 0;
            sigma_duration_pre_hosp = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_duration_pre_hosp", sigma_duration_pre_hosp, 0.0);
            current_statement_begin__ = 31;
            context__.validate_dims("data initialization", "mu_duration_hosp_mod", "double", context__.to_vec());
            mu_duration_hosp_mod = double(0);
            vals_r__ = context__.vals_r("mu_duration_hosp_mod");
            pos__ = 0;
            mu_duration_hosp_mod = vals_r__[pos__++];
            check_greater_or_equal(function__, "mu_duration_hosp_mod", mu_duration_hosp_mod, 1.0);
            current_statement_begin__ = 32;
            context__.validate_dims("data initialization", "sigma_duration_hosp_mod", "double", context__.to_vec());
            sigma_duration_hosp_mod = double(0);
            vals_r__ = context__.vals_r("sigma_duration_hosp_mod");
            pos__ = 0;
            sigma_duration_hosp_mod = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_duration_hosp_mod", sigma_duration_hosp_mod, 0.0);
            current_statement_begin__ = 33;
            context__.validate_dims("data initialization", "mu_duration_hosp_icu", "double", context__.to_vec());
            mu_duration_hosp_icu = double(0);
            vals_r__ = context__.vals_r("mu_duration_hosp_icu");
            pos__ = 0;
            mu_duration_hosp_icu = vals_r__[pos__++];
            check_greater_or_equal(function__, "mu_duration_hosp_icu", mu_duration_hosp_icu, 1.0);
            current_statement_begin__ = 34;
            context__.validate_dims("data initialization", "sigma_duration_hosp_icu", "double", context__.to_vec());
            sigma_duration_hosp_icu = double(0);
            vals_r__ = context__.vals_r("sigma_duration_hosp_icu");
            pos__ = 0;
            sigma_duration_hosp_icu = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_duration_hosp_icu", sigma_duration_hosp_icu, 0.0);
            current_statement_begin__ = 36;
            context__.validate_dims("data initialization", "mu_r0", "double", context__.to_vec());
            mu_r0 = double(0);
            vals_r__ = context__.vals_r("mu_r0");
            pos__ = 0;
            mu_r0 = vals_r__[pos__++];
            check_greater_or_equal(function__, "mu_r0", mu_r0, 0.0);
            current_statement_begin__ = 37;
            context__.validate_dims("data initialization", "sigma_r0", "double", context__.to_vec());
            sigma_r0 = double(0);
            vals_r__ = context__.vals_r("sigma_r0");
            pos__ = 0;
            sigma_r0 = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_r0", sigma_r0, 0.0);
            current_statement_begin__ = 39;
            context__.validate_dims("data initialization", "frac_pui", "double", context__.to_vec());
            frac_pui = double(0);
            vals_r__ = context__.vals_r("frac_pui");
            pos__ = 0;
            frac_pui = vals_r__[pos__++];
            check_greater_or_equal(function__, "frac_pui", frac_pui, 0.0);
            current_statement_begin__ = 41;
            context__.validate_dims("data initialization", "mu_frac_hosp", "double", context__.to_vec());
            mu_frac_hosp = double(0);
            vals_r__ = context__.vals_r("mu_frac_hosp");
            pos__ = 0;
            mu_frac_hosp = vals_r__[pos__++];
            check_greater_or_equal(function__, "mu_frac_hosp", mu_frac_hosp, 0.0);
            current_statement_begin__ = 42;
            context__.validate_dims("data initialization", "sigma_frac_hosp", "double", context__.to_vec());
            sigma_frac_hosp = double(0);
            vals_r__ = context__.vals_r("sigma_frac_hosp");
            pos__ = 0;
            sigma_frac_hosp = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_frac_hosp", sigma_frac_hosp, 0.0);
            current_statement_begin__ = 43;
            context__.validate_dims("data initialization", "frac_icu", "double", context__.to_vec());
            frac_icu = double(0);
            vals_r__ = context__.vals_r("frac_icu");
            pos__ = 0;
            frac_icu = vals_r__[pos__++];
            check_greater_or_equal(function__, "frac_icu", frac_icu, 0.0);
            current_statement_begin__ = 44;
            context__.validate_dims("data initialization", "frac_mort", "double", context__.to_vec());
            frac_mort = double(0);
            vals_r__ = context__.vals_r("frac_mort");
            pos__ = 0;
            frac_mort = vals_r__[pos__++];
            check_greater_or_equal(function__, "frac_mort", frac_mort, 0.0);
            current_statement_begin__ = 46;
            validate_non_negative_index("lambda_ini_exposed", "npops", npops);
            context__.validate_dims("data initialization", "lambda_ini_exposed", "double", context__.to_vec(npops));
            lambda_ini_exposed = std::vector<double>(npops, double(0));
            vals_r__ = context__.vals_r("lambda_ini_exposed");
            pos__ = 0;
            size_t lambda_ini_exposed_k_0_max__ = npops;
            for (size_t k_0__ = 0; k_0__ < lambda_ini_exposed_k_0_max__; ++k_0__) {
                lambda_ini_exposed[k_0__] = vals_r__[pos__++];
            }
            size_t lambda_ini_exposed_i_0_max__ = npops;
            for (size_t i_0__ = 0; i_0__ < lambda_ini_exposed_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "lambda_ini_exposed[i_0__]", lambda_ini_exposed[i_0__], 0.0);
            }
            current_statement_begin__ = 51;
            context__.validate_dims("data initialization", "ninter", "int", context__.to_vec());
            ninter = int(0);
            vals_i__ = context__.vals_i("ninter");
            pos__ = 0;
            ninter = vals_i__[pos__++];
            check_greater_or_equal(function__, "ninter", ninter, 0);
            current_statement_begin__ = 52;
            validate_non_negative_index("mu_t_inter", "ninter", ninter);
            context__.validate_dims("data initialization", "mu_t_inter", "double", context__.to_vec(ninter));
            mu_t_inter = std::vector<double>(ninter, double(0));
            vals_r__ = context__.vals_r("mu_t_inter");
            pos__ = 0;
            size_t mu_t_inter_k_0_max__ = ninter;
            for (size_t k_0__ = 0; k_0__ < mu_t_inter_k_0_max__; ++k_0__) {
                mu_t_inter[k_0__] = vals_r__[pos__++];
            }
            size_t mu_t_inter_i_0_max__ = ninter;
            for (size_t i_0__ = 0; i_0__ < mu_t_inter_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "mu_t_inter[i_0__]", mu_t_inter[i_0__], 1.0);
            }
            current_statement_begin__ = 53;
            validate_non_negative_index("sigma_t_inter", "ninter", ninter);
            context__.validate_dims("data initialization", "sigma_t_inter", "double", context__.to_vec(ninter));
            sigma_t_inter = std::vector<double>(ninter, double(0));
            vals_r__ = context__.vals_r("sigma_t_inter");
            pos__ = 0;
            size_t sigma_t_inter_k_0_max__ = ninter;
            for (size_t k_0__ = 0; k_0__ < sigma_t_inter_k_0_max__; ++k_0__) {
                sigma_t_inter[k_0__] = vals_r__[pos__++];
            }
            size_t sigma_t_inter_i_0_max__ = ninter;
            for (size_t i_0__ = 0; i_0__ < sigma_t_inter_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "sigma_t_inter[i_0__]", sigma_t_inter[i_0__], 0.0);
            }
            current_statement_begin__ = 54;
            validate_non_negative_index("mu_len_inter", "ninter", ninter);
            context__.validate_dims("data initialization", "mu_len_inter", "double", context__.to_vec(ninter));
            mu_len_inter = std::vector<double>(ninter, double(0));
            vals_r__ = context__.vals_r("mu_len_inter");
            pos__ = 0;
            size_t mu_len_inter_k_0_max__ = ninter;
            for (size_t k_0__ = 0; k_0__ < mu_len_inter_k_0_max__; ++k_0__) {
                mu_len_inter[k_0__] = vals_r__[pos__++];
            }
            size_t mu_len_inter_i_0_max__ = ninter;
            for (size_t i_0__ = 0; i_0__ < mu_len_inter_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "mu_len_inter[i_0__]", mu_len_inter[i_0__], 1.0);
            }
            current_statement_begin__ = 55;
            validate_non_negative_index("sigma_len_inter", "ninter", ninter);
            context__.validate_dims("data initialization", "sigma_len_inter", "double", context__.to_vec(ninter));
            sigma_len_inter = std::vector<double>(ninter, double(0));
            vals_r__ = context__.vals_r("sigma_len_inter");
            pos__ = 0;
            size_t sigma_len_inter_k_0_max__ = ninter;
            for (size_t k_0__ = 0; k_0__ < sigma_len_inter_k_0_max__; ++k_0__) {
                sigma_len_inter[k_0__] = vals_r__[pos__++];
            }
            size_t sigma_len_inter_i_0_max__ = ninter;
            for (size_t i_0__ = 0; i_0__ < sigma_len_inter_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "sigma_len_inter[i_0__]", sigma_len_inter[i_0__], 0.0);
            }
            current_statement_begin__ = 56;
            validate_non_negative_index("mu_beta_inter", "ninter", ninter);
            validate_non_negative_index("mu_beta_inter", "npops", npops);
            context__.validate_dims("data initialization", "mu_beta_inter", "double", context__.to_vec(ninter,npops));
            mu_beta_inter = std::vector<std::vector<double> >(ninter, std::vector<double>(npops, double(0)));
            vals_r__ = context__.vals_r("mu_beta_inter");
            pos__ = 0;
            size_t mu_beta_inter_k_0_max__ = ninter;
            size_t mu_beta_inter_k_1_max__ = npops;
            for (size_t k_1__ = 0; k_1__ < mu_beta_inter_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < mu_beta_inter_k_0_max__; ++k_0__) {
                    mu_beta_inter[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            size_t mu_beta_inter_i_0_max__ = ninter;
            size_t mu_beta_inter_i_1_max__ = npops;
            for (size_t i_0__ = 0; i_0__ < mu_beta_inter_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < mu_beta_inter_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "mu_beta_inter[i_0__][i_1__]", mu_beta_inter[i_0__][i_1__], 0.0);
                }
            }
            current_statement_begin__ = 57;
            validate_non_negative_index("sigma_beta_inter", "ninter", ninter);
            validate_non_negative_index("sigma_beta_inter", "npops", npops);
            context__.validate_dims("data initialization", "sigma_beta_inter", "double", context__.to_vec(ninter,npops));
            sigma_beta_inter = std::vector<std::vector<double> >(ninter, std::vector<double>(npops, double(0)));
            vals_r__ = context__.vals_r("sigma_beta_inter");
            pos__ = 0;
            size_t sigma_beta_inter_k_0_max__ = ninter;
            size_t sigma_beta_inter_k_1_max__ = npops;
            for (size_t k_1__ = 0; k_1__ < sigma_beta_inter_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < sigma_beta_inter_k_0_max__; ++k_0__) {
                    sigma_beta_inter[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            size_t sigma_beta_inter_i_0_max__ = ninter;
            size_t sigma_beta_inter_i_1_max__ = npops;
            for (size_t i_0__ = 0; i_0__ < sigma_beta_inter_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < sigma_beta_inter_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "sigma_beta_inter[i_0__][i_1__]", sigma_beta_inter[i_0__][i_1__], 0.0);
                }
            }
            // initialize transformed data variables
            current_statement_begin__ = 62;
            S = int(0);
            stan::math::fill(S, std::numeric_limits<int>::min());
            stan::math::assign(S,1);
            current_statement_begin__ = 63;
            E = int(0);
            stan::math::fill(E, std::numeric_limits<int>::min());
            stan::math::assign(E,2);
            current_statement_begin__ = 64;
            Imild = int(0);
            stan::math::fill(Imild, std::numeric_limits<int>::min());
            stan::math::assign(Imild,3);
            current_statement_begin__ = 65;
            Ipreh = int(0);
            stan::math::fill(Ipreh, std::numeric_limits<int>::min());
            stan::math::assign(Ipreh,4);
            current_statement_begin__ = 66;
            Hmod = int(0);
            stan::math::fill(Hmod, std::numeric_limits<int>::min());
            stan::math::assign(Hmod,5);
            current_statement_begin__ = 67;
            Hicu = int(0);
            stan::math::fill(Hicu, std::numeric_limits<int>::min());
            stan::math::assign(Hicu,6);
            current_statement_begin__ = 68;
            Rlive = int(0);
            stan::math::fill(Rlive, std::numeric_limits<int>::min());
            stan::math::assign(Rlive,7);
            current_statement_begin__ = 69;
            Rmort = int(0);
            stan::math::fill(Rmort, std::numeric_limits<int>::min());
            stan::math::assign(Rmort,8);
            current_statement_begin__ = 71;
            ncompartments = int(0);
            stan::math::fill(ncompartments, std::numeric_limits<int>::min());
            stan::math::assign(ncompartments,8);
            current_statement_begin__ = 73;
            obs_hosp_census = int(0);
            stan::math::fill(obs_hosp_census, std::numeric_limits<int>::min());
            stan::math::assign(obs_hosp_census,1);
            current_statement_begin__ = 74;
            obs_icu_census = int(0);
            stan::math::fill(obs_icu_census, std::numeric_limits<int>::min());
            stan::math::assign(obs_icu_census,2);
            current_statement_begin__ = 75;
            obs_cum_deaths = int(0);
            stan::math::fill(obs_cum_deaths, std::numeric_limits<int>::min());
            stan::math::assign(obs_cum_deaths,3);
            current_statement_begin__ = 76;
            obs_cum_admits = int(0);
            stan::math::fill(obs_cum_admits, std::numeric_limits<int>::min());
            stan::math::assign(obs_cum_admits,4);
            current_statement_begin__ = 78;
            nobs_notmissing = int(0);
            stan::math::fill(nobs_notmissing, std::numeric_limits<int>::min());
            stan::math::assign(nobs_notmissing,0);
            current_statement_begin__ = 79;
            beta_limit = double(0);
            stan::math::fill(beta_limit, DUMMY_VAR__);
            // execute transformed data statements
            current_statement_begin__ = 81;
            for (int ipop = 1; ipop <= npops; ++ipop) {
                current_statement_begin__ = 82;
                for (int iobs = 1; iobs <= nobs; ++iobs) {
                    current_statement_begin__ = 83;
                    if (as_bool(logical_gt(get_base1(get_base1(obs_data_conf, iobs, "obs_data_conf", 1), ipop, "obs_data_conf", 2), 0))) {
                        current_statement_begin__ = 84;
                        stan::math::assign(nobs_notmissing, (nobs_notmissing + 1));
                    }
                }
            }
            current_statement_begin__ = 89;
            if (as_bool(logical_eq(extend, 1))) {
                current_statement_begin__ = 90;
                stan::math::assign(beta_limit, 9999);
            } else {
                current_statement_begin__ = 92;
                stan::math::assign(beta_limit, 2.0);
            }
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 97;
            num_params_r__ += 1;
            current_statement_begin__ = 98;
            num_params_r__ += 1;
            current_statement_begin__ = 100;
            num_params_r__ += 1;
            current_statement_begin__ = 101;
            num_params_r__ += 1;
            current_statement_begin__ = 102;
            num_params_r__ += 1;
            current_statement_begin__ = 104;
            num_params_r__ += 1;
            current_statement_begin__ = 107;
            validate_non_negative_index("ini_exposed", "npops", npops);
            num_params_r__ += (1 * npops);
            current_statement_begin__ = 109;
            num_params_r__ += 1;
            current_statement_begin__ = 111;
            num_params_r__ += 1;
            current_statement_begin__ = 112;
            validate_non_negative_index("beta_multiplier", "ninter", ninter);
            validate_non_negative_index("beta_multiplier", "npops", npops);
            num_params_r__ += ((1 * ninter) * npops);
            current_statement_begin__ = 113;
            validate_non_negative_index("t_inter", "ninter", ninter);
            num_params_r__ += (1 * ninter);
            current_statement_begin__ = 114;
            validate_non_negative_index("len_inter", "ninter", ninter);
            num_params_r__ += (1 * ninter);
            current_statement_begin__ = 116;
            num_params_r__ += 1;
            current_statement_begin__ = 117;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_LEMMA() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 97;
        if (!(context__.contains_r("duration_latent")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable duration_latent missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("duration_latent");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "duration_latent", "double", context__.to_vec());
        double duration_latent(0);
        duration_latent = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(1.0, duration_latent);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable duration_latent: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 98;
        if (!(context__.contains_r("duration_rec_mild")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable duration_rec_mild missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("duration_rec_mild");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "duration_rec_mild", "double", context__.to_vec());
        double duration_rec_mild(0);
        duration_rec_mild = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(1.0, duration_rec_mild);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable duration_rec_mild: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 100;
        if (!(context__.contains_r("duration_pre_hosp")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable duration_pre_hosp missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("duration_pre_hosp");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "duration_pre_hosp", "double", context__.to_vec());
        double duration_pre_hosp(0);
        duration_pre_hosp = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(1.0, duration_pre_hosp);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable duration_pre_hosp: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 101;
        if (!(context__.contains_r("duration_hosp_mod")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable duration_hosp_mod missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("duration_hosp_mod");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "duration_hosp_mod", "double", context__.to_vec());
        double duration_hosp_mod(0);
        duration_hosp_mod = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(1.0, duration_hosp_mod);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable duration_hosp_mod: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 102;
        if (!(context__.contains_r("duration_hosp_icu")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable duration_hosp_icu missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("duration_hosp_icu");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "duration_hosp_icu", "double", context__.to_vec());
        double duration_hosp_icu(0);
        duration_hosp_icu = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(1.0, duration_hosp_icu);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable duration_hosp_icu: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 104;
        if (!(context__.contains_r("frac_hosp")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable frac_hosp missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("frac_hosp");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "frac_hosp", "double", context__.to_vec());
        double frac_hosp(0);
        frac_hosp = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0.005, 1.0, frac_hosp);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable frac_hosp: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 107;
        if (!(context__.contains_r("ini_exposed")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable ini_exposed missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("ini_exposed");
        pos__ = 0U;
        validate_non_negative_index("ini_exposed", "npops", npops);
        context__.validate_dims("parameter initialization", "ini_exposed", "double", context__.to_vec(npops));
        std::vector<double> ini_exposed(npops, double(0));
        size_t ini_exposed_k_0_max__ = npops;
        for (size_t k_0__ = 0; k_0__ < ini_exposed_k_0_max__; ++k_0__) {
            ini_exposed[k_0__] = vals_r__[pos__++];
        }
        size_t ini_exposed_i_0_max__ = npops;
        for (size_t i_0__ = 0; i_0__ < ini_exposed_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, ini_exposed[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable ini_exposed: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 109;
        if (!(context__.contains_r("sigma_obs")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_obs missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_obs");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_obs", "double", context__.to_vec());
        double sigma_obs(0);
        sigma_obs = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_obs);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_obs: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 111;
        if (!(context__.contains_r("r0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable r0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("r0");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "r0", "double", context__.to_vec());
        double r0(0);
        r0 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0.0, r0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable r0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 112;
        if (!(context__.contains_r("beta_multiplier")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_multiplier missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_multiplier");
        pos__ = 0U;
        validate_non_negative_index("beta_multiplier", "ninter", ninter);
        validate_non_negative_index("beta_multiplier", "npops", npops);
        context__.validate_dims("parameter initialization", "beta_multiplier", "double", context__.to_vec(ninter,npops));
        std::vector<std::vector<double> > beta_multiplier(ninter, std::vector<double>(npops, double(0)));
        size_t beta_multiplier_k_0_max__ = ninter;
        size_t beta_multiplier_k_1_max__ = npops;
        for (size_t k_1__ = 0; k_1__ < beta_multiplier_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_multiplier_k_0_max__; ++k_0__) {
                beta_multiplier[k_0__][k_1__] = vals_r__[pos__++];
            }
        }
        size_t beta_multiplier_i_0_max__ = ninter;
        size_t beta_multiplier_i_1_max__ = npops;
        for (size_t i_0__ = 0; i_0__ < beta_multiplier_i_0_max__; ++i_0__) {
            for (size_t i_1__ = 0; i_1__ < beta_multiplier_i_1_max__; ++i_1__) {
                try {
                    writer__.scalar_lb_unconstrain(0.0, beta_multiplier[i_0__][i_1__]);
                } catch (const std::exception& e) {
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_multiplier: ") + e.what()), current_statement_begin__, prog_reader__());
                }
            }
        }
        current_statement_begin__ = 113;
        if (!(context__.contains_r("t_inter")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable t_inter missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("t_inter");
        pos__ = 0U;
        validate_non_negative_index("t_inter", "ninter", ninter);
        context__.validate_dims("parameter initialization", "t_inter", "double", context__.to_vec(ninter));
        std::vector<double> t_inter(ninter, double(0));
        size_t t_inter_k_0_max__ = ninter;
        for (size_t k_0__ = 0; k_0__ < t_inter_k_0_max__; ++k_0__) {
            t_inter[k_0__] = vals_r__[pos__++];
        }
        size_t t_inter_i_0_max__ = ninter;
        for (size_t i_0__ = 0; i_0__ < t_inter_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(1.0, t_inter[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable t_inter: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 114;
        if (!(context__.contains_r("len_inter")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable len_inter missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("len_inter");
        pos__ = 0U;
        validate_non_negative_index("len_inter", "ninter", ninter);
        context__.validate_dims("parameter initialization", "len_inter", "double", context__.to_vec(ninter));
        std::vector<double> len_inter(ninter, double(0));
        size_t len_inter_k_0_max__ = ninter;
        for (size_t k_0__ = 0; k_0__ < len_inter_k_0_max__; ++k_0__) {
            len_inter[k_0__] = vals_r__[pos__++];
        }
        size_t len_inter_i_0_max__ = ninter;
        for (size_t i_0__ = 0; i_0__ < len_inter_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(1.0, len_inter[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable len_inter: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 116;
        if (!(context__.contains_r("mobility_coef0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mobility_coef0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mobility_coef0");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mobility_coef0", "double", context__.to_vec());
        double mobility_coef0(0);
        mobility_coef0 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mobility_coef0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mobility_coef0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 117;
        if (!(context__.contains_r("mobility_coef1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mobility_coef1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mobility_coef1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mobility_coef1", "double", context__.to_vec());
        double mobility_coef1(0);
        mobility_coef1 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mobility_coef1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mobility_coef1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 97;
            local_scalar_t__ duration_latent;
            (void) duration_latent;  // dummy to suppress unused var warning
            if (jacobian__)
                duration_latent = in__.scalar_lb_constrain(1.0, lp__);
            else
                duration_latent = in__.scalar_lb_constrain(1.0);
            current_statement_begin__ = 98;
            local_scalar_t__ duration_rec_mild;
            (void) duration_rec_mild;  // dummy to suppress unused var warning
            if (jacobian__)
                duration_rec_mild = in__.scalar_lb_constrain(1.0, lp__);
            else
                duration_rec_mild = in__.scalar_lb_constrain(1.0);
            current_statement_begin__ = 100;
            local_scalar_t__ duration_pre_hosp;
            (void) duration_pre_hosp;  // dummy to suppress unused var warning
            if (jacobian__)
                duration_pre_hosp = in__.scalar_lb_constrain(1.0, lp__);
            else
                duration_pre_hosp = in__.scalar_lb_constrain(1.0);
            current_statement_begin__ = 101;
            local_scalar_t__ duration_hosp_mod;
            (void) duration_hosp_mod;  // dummy to suppress unused var warning
            if (jacobian__)
                duration_hosp_mod = in__.scalar_lb_constrain(1.0, lp__);
            else
                duration_hosp_mod = in__.scalar_lb_constrain(1.0);
            current_statement_begin__ = 102;
            local_scalar_t__ duration_hosp_icu;
            (void) duration_hosp_icu;  // dummy to suppress unused var warning
            if (jacobian__)
                duration_hosp_icu = in__.scalar_lb_constrain(1.0, lp__);
            else
                duration_hosp_icu = in__.scalar_lb_constrain(1.0);
            current_statement_begin__ = 104;
            local_scalar_t__ frac_hosp;
            (void) frac_hosp;  // dummy to suppress unused var warning
            if (jacobian__)
                frac_hosp = in__.scalar_lub_constrain(0.005, 1.0, lp__);
            else
                frac_hosp = in__.scalar_lub_constrain(0.005, 1.0);
            current_statement_begin__ = 107;
            std::vector<local_scalar_t__> ini_exposed;
            size_t ini_exposed_d_0_max__ = npops;
            ini_exposed.reserve(ini_exposed_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < ini_exposed_d_0_max__; ++d_0__) {
                if (jacobian__)
                    ini_exposed.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    ini_exposed.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 109;
            local_scalar_t__ sigma_obs;
            (void) sigma_obs;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_obs = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_obs = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 111;
            local_scalar_t__ r0;
            (void) r0;  // dummy to suppress unused var warning
            if (jacobian__)
                r0 = in__.scalar_lb_constrain(0.0, lp__);
            else
                r0 = in__.scalar_lb_constrain(0.0);
            current_statement_begin__ = 112;
            std::vector<std::vector<local_scalar_t__> > beta_multiplier;
            size_t beta_multiplier_d_0_max__ = ninter;
            size_t beta_multiplier_d_1_max__ = npops;
            beta_multiplier.resize(beta_multiplier_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < beta_multiplier_d_0_max__; ++d_0__) {
                beta_multiplier[d_0__].reserve(beta_multiplier_d_1_max__);
                for (size_t d_1__ = 0; d_1__ < beta_multiplier_d_1_max__; ++d_1__) {
                    if (jacobian__)
                        beta_multiplier[d_0__].push_back(in__.scalar_lb_constrain(0.0, lp__));
                    else
                        beta_multiplier[d_0__].push_back(in__.scalar_lb_constrain(0.0));
                }
            }
            current_statement_begin__ = 113;
            std::vector<local_scalar_t__> t_inter;
            size_t t_inter_d_0_max__ = ninter;
            t_inter.reserve(t_inter_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < t_inter_d_0_max__; ++d_0__) {
                if (jacobian__)
                    t_inter.push_back(in__.scalar_lb_constrain(1.0, lp__));
                else
                    t_inter.push_back(in__.scalar_lb_constrain(1.0));
            }
            current_statement_begin__ = 114;
            std::vector<local_scalar_t__> len_inter;
            size_t len_inter_d_0_max__ = ninter;
            len_inter.reserve(len_inter_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < len_inter_d_0_max__; ++d_0__) {
                if (jacobian__)
                    len_inter.push_back(in__.scalar_lb_constrain(1.0, lp__));
                else
                    len_inter.push_back(in__.scalar_lb_constrain(1.0));
            }
            current_statement_begin__ = 116;
            local_scalar_t__ mobility_coef0;
            (void) mobility_coef0;  // dummy to suppress unused var warning
            if (jacobian__)
                mobility_coef0 = in__.scalar_constrain(lp__);
            else
                mobility_coef0 = in__.scalar_constrain();
            current_statement_begin__ = 117;
            local_scalar_t__ mobility_coef1;
            (void) mobility_coef1;  // dummy to suppress unused var warning
            if (jacobian__)
                mobility_coef1 = in__.scalar_constrain(lp__);
            else
                mobility_coef1 = in__.scalar_constrain();
            // transformed parameters
            current_statement_begin__ = 121;
            validate_non_negative_index("x", "ncompartments", ncompartments);
            validate_non_negative_index("x", "nt", nt);
            validate_non_negative_index("x", "npops", npops);
            std::vector<std::vector<std::vector<local_scalar_t__> > > x(ncompartments, std::vector<std::vector<local_scalar_t__> >(nt, std::vector<local_scalar_t__>(npops, local_scalar_t__(0))));
            stan::math::initialize(x, DUMMY_VAR__);
            stan::math::fill(x, DUMMY_VAR__);
            current_statement_begin__ = 122;
            validate_non_negative_index("sim_data", "nt", nt);
            validate_non_negative_index("sim_data", "npops", npops);
            std::vector<std::vector<local_scalar_t__> > sim_data(nt, std::vector<local_scalar_t__>(npops, local_scalar_t__(0)));
            stan::math::initialize(sim_data, DUMMY_VAR__);
            stan::math::fill(sim_data, DUMMY_VAR__);
            current_statement_begin__ = 123;
            validate_non_negative_index("beta", "nt", nt);
            validate_non_negative_index("beta", "npops", npops);
            std::vector<std::vector<local_scalar_t__> > beta(nt, std::vector<local_scalar_t__>(npops, local_scalar_t__(0)));
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            current_statement_begin__ = 124;
            validate_non_negative_index("beta_mat", "(nt - 1)", (nt - 1));
            validate_non_negative_index("beta_mat", "npops", npops);
            validate_non_negative_index("beta_mat", "npops", npops);
            std::vector<std::vector<std::vector<local_scalar_t__> > > beta_mat((nt - 1), std::vector<std::vector<local_scalar_t__> >(npops, std::vector<local_scalar_t__>(npops, local_scalar_t__(0))));
            stan::math::initialize(beta_mat, DUMMY_VAR__);
            stan::math::fill(beta_mat, DUMMY_VAR__);
            // transformed parameters block statements
            {
            current_statement_begin__ = 129;
            validate_non_negative_index("newE", "npops", npops);
            std::vector<local_scalar_t__  > newE(npops, local_scalar_t__(DUMMY_VAR__));
            stan::math::initialize(newE, DUMMY_VAR__);
            stan::math::fill(newE, DUMMY_VAR__);
            current_statement_begin__ = 130;
            validate_non_negative_index("newI", "npops", npops);
            std::vector<local_scalar_t__  > newI(npops, local_scalar_t__(DUMMY_VAR__));
            stan::math::initialize(newI, DUMMY_VAR__);
            stan::math::fill(newI, DUMMY_VAR__);
            current_statement_begin__ = 131;
            validate_non_negative_index("newrec_mild", "npops", npops);
            std::vector<local_scalar_t__  > newrec_mild(npops, local_scalar_t__(DUMMY_VAR__));
            stan::math::initialize(newrec_mild, DUMMY_VAR__);
            stan::math::fill(newrec_mild, DUMMY_VAR__);
            current_statement_begin__ = 132;
            validate_non_negative_index("newrec_mod", "npops", npops);
            std::vector<local_scalar_t__  > newrec_mod(npops, local_scalar_t__(DUMMY_VAR__));
            stan::math::initialize(newrec_mod, DUMMY_VAR__);
            stan::math::fill(newrec_mod, DUMMY_VAR__);
            current_statement_begin__ = 133;
            validate_non_negative_index("newhosp", "npops", npops);
            std::vector<local_scalar_t__  > newhosp(npops, local_scalar_t__(DUMMY_VAR__));
            stan::math::initialize(newhosp, DUMMY_VAR__);
            stan::math::fill(newhosp, DUMMY_VAR__);
            current_statement_begin__ = 134;
            validate_non_negative_index("leave_icu", "npops", npops);
            std::vector<local_scalar_t__  > leave_icu(npops, local_scalar_t__(DUMMY_VAR__));
            stan::math::initialize(leave_icu, DUMMY_VAR__);
            stan::math::fill(leave_icu, DUMMY_VAR__);
            current_statement_begin__ = 135;
            validate_non_negative_index("beta_0", "npops", npops);
            std::vector<local_scalar_t__  > beta_0(npops, local_scalar_t__(DUMMY_VAR__));
            stan::math::initialize(beta_0, DUMMY_VAR__);
            stan::math::fill(beta_0, DUMMY_VAR__);
            current_statement_begin__ = 136;
            local_scalar_t__ zero(DUMMY_VAR__);
            (void) zero;  // dummy to suppress unused var warning
            stan::math::initialize(zero, DUMMY_VAR__);
            stan::math::fill(zero, DUMMY_VAR__);
            current_statement_begin__ = 137;
            local_scalar_t__ total_population(DUMMY_VAR__);
            (void) total_population;  // dummy to suppress unused var warning
            stan::math::initialize(total_population, DUMMY_VAR__);
            stan::math::fill(total_population, DUMMY_VAR__);
            stan::math::assign(total_population,sum(population));
            current_statement_begin__ = 138;
            local_scalar_t__ m(DUMMY_VAR__);
            (void) m;  // dummy to suppress unused var warning
            stan::math::initialize(m, DUMMY_VAR__);
            stan::math::fill(m, DUMMY_VAR__);
            current_statement_begin__ = 144;
            for (int ipop = 1; ipop <= npops; ++ipop) {
                current_statement_begin__ = 145;
                stan::model::assign(beta_0, 
                            stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list()), 
                            (r0 / ((frac_hosp * duration_pre_hosp) + ((1 - frac_hosp) * duration_rec_mild))), 
                            "assigning variable beta_0");
                current_statement_begin__ = 146;
                for (int it = 1; it <= nt; ++it) {
                    current_statement_begin__ = 147;
                    stan::model::assign(beta, 
                                stan::model::cons_list(stan::model::index_uni(it), stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list())), 
                                get_base1(beta_0, ipop, "beta_0", 1), 
                                "assigning variable beta");
                    current_statement_begin__ = 148;
                    for (int iinter = 1; iinter <= ninter; ++iinter) {
                        current_statement_begin__ = 151;
                        stan::model::assign(beta, 
                                    stan::model::cons_list(stan::model::index_uni(it), stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list())), 
                                    (get_base1(get_base1(beta, it, "beta", 1), ipop, "beta", 2) * pow(get_base1(get_base1(beta_multiplier, iinter, "beta_multiplier", 1), ipop, "beta_multiplier", 2), inv_logit(((9.19024 / get_base1(len_inter, iinter, "len_inter", 1)) * (it - (get_base1(t_inter, iinter, "t_inter", 1) + (get_base1(len_inter, iinter, "len_inter", 1) / 2))))))), 
                                    "assigning variable beta");
                    }
                }
            }
            current_statement_begin__ = 157;
            stan::math::assign(zero, (get_base1(ini_exposed, 1, "ini_exposed", 1) * 1e-15));
            current_statement_begin__ = 158;
            for (int ipop = 1; ipop <= npops; ++ipop) {
                current_statement_begin__ = 159;
                for (int icompartment = 1; icompartment <= ncompartments; ++icompartment) {
                    current_statement_begin__ = 160;
                    stan::model::assign(x, 
                                stan::model::cons_list(stan::model::index_uni(icompartment), stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list()))), 
                                zero, 
                                "assigning variable x");
                }
                current_statement_begin__ = 162;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(S), stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list()))), 
                            (get_base1(population, ipop, "population", 1) - get_base1(ini_exposed, ipop, "ini_exposed", 1)), 
                            "assigning variable x");
                current_statement_begin__ = 163;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(E), stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list()))), 
                            get_base1(ini_exposed, ipop, "ini_exposed", 1), 
                            "assigning variable x");
            }
            current_statement_begin__ = 169;
            for (int it = 1; it <= (nt - 1); ++it) {
                current_statement_begin__ = 172;
                for (int ipop1 = 1; ipop1 <= npops; ++ipop1) {
                    current_statement_begin__ = 173;
                    stan::model::assign(newE, 
                                stan::model::cons_list(stan::model::index_uni(ipop1), stan::model::nil_index_list()), 
                                0, 
                                "assigning variable newE");
                    current_statement_begin__ = 175;
                    for (int ipop2 = 1; ipop2 <= npops; ++ipop2) {
                        current_statement_begin__ = 177;
                        stan::math::assign(m, inv_logit((mobility_coef0 + (mobility_coef1 * get_base1(get_base1(get_base1(mobility, it, "mobility", 1), ipop1, "mobility", 2), ipop2, "mobility", 3)))));
                        current_statement_begin__ = 178;
                        if (as_bool(logical_eq(ipop1, ipop2))) {
                            current_statement_begin__ = 179;
                            stan::model::assign(beta_mat, 
                                        stan::model::cons_list(stan::model::index_uni(it), stan::model::cons_list(stan::model::index_uni(ipop1), stan::model::cons_list(stan::model::index_uni(ipop2), stan::model::nil_index_list()))), 
                                        (get_base1(get_base1(beta, it, "beta", 1), ipop1, "beta", 2) * (1 + (m * ((total_population / get_base1(population, ipop1, "population", 1)) - 1)))), 
                                        "assigning variable beta_mat");
                        } else {
                            current_statement_begin__ = 181;
                            stan::model::assign(beta_mat, 
                                        stan::model::cons_list(stan::model::index_uni(it), stan::model::cons_list(stan::model::index_uni(ipop1), stan::model::cons_list(stan::model::index_uni(ipop2), stan::model::nil_index_list()))), 
                                        ((0.5 * (get_base1(get_base1(beta, it, "beta", 1), ipop1, "beta", 2) + get_base1(get_base1(beta, it, "beta", 1), ipop2, "beta", 2))) * (1 - m)), 
                                        "assigning variable beta_mat");
                        }
                    }
                }
                current_statement_begin__ = 186;
                for (int ipop1 = 1; ipop1 <= npops; ++ipop1) {
                    current_statement_begin__ = 187;
                    for (int ipop2 = 1; ipop2 <= npops; ++ipop2) {
                        current_statement_begin__ = 188;
                        stan::model::assign(newE, 
                                    stan::model::cons_list(stan::model::index_uni(ipop1), stan::model::nil_index_list()), 
                                    (get_base1(newE, ipop1, "newE", 1) + (((get_base1(get_base1(get_base1(beta_mat, it, "beta_mat", 1), ipop1, "beta_mat", 2), ipop2, "beta_mat", 3) * get_base1(get_base1(get_base1(x, S, "x", 1), it, "x", 2), ipop1, "x", 3)) * (get_base1(get_base1(get_base1(x, Imild, "x", 1), it, "x", 2), ipop2, "x", 3) + get_base1(get_base1(get_base1(x, Ipreh, "x", 1), it, "x", 2), ipop2, "x", 3))) / total_population)), 
                                    "assigning variable newE");
                    }
                }
                current_statement_begin__ = 192;
                for (int ipop = 1; ipop <= npops; ++ipop) {
                    current_statement_begin__ = 193;
                    stan::model::assign(newE, 
                                stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list()), 
                                stan::math::fmin(get_base1(newE, ipop, "newE", 1), get_base1(get_base1(get_base1(x, S, "x", 1), it, "x", 2), ipop, "x", 3)), 
                                "assigning variable newE");
                    current_statement_begin__ = 194;
                    stan::model::assign(newI, 
                                stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list()), 
                                ((1.0 / duration_latent) * get_base1(get_base1(get_base1(x, E, "x", 1), it, "x", 2), ipop, "x", 3)), 
                                "assigning variable newI");
                    current_statement_begin__ = 195;
                    stan::model::assign(newhosp, 
                                stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list()), 
                                ((1.0 / duration_pre_hosp) * get_base1(get_base1(get_base1(x, Ipreh, "x", 1), it, "x", 2), ipop, "x", 3)), 
                                "assigning variable newhosp");
                    current_statement_begin__ = 196;
                    stan::model::assign(newrec_mild, 
                                stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list()), 
                                ((1.0 / duration_rec_mild) * get_base1(get_base1(get_base1(x, Imild, "x", 1), it, "x", 2), ipop, "x", 3)), 
                                "assigning variable newrec_mild");
                    current_statement_begin__ = 197;
                    stan::model::assign(newrec_mod, 
                                stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list()), 
                                ((1.0 / duration_hosp_mod) * get_base1(get_base1(get_base1(x, Hmod, "x", 1), it, "x", 2), ipop, "x", 3)), 
                                "assigning variable newrec_mod");
                    current_statement_begin__ = 198;
                    stan::model::assign(leave_icu, 
                                stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list()), 
                                ((1.0 / duration_hosp_icu) * get_base1(get_base1(get_base1(x, Hicu, "x", 1), it, "x", 2), ipop, "x", 3)), 
                                "assigning variable leave_icu");
                    current_statement_begin__ = 203;
                    stan::model::assign(x, 
                                stan::model::cons_list(stan::model::index_uni(S), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list()))), 
                                (get_base1(get_base1(get_base1(x, S, "x", 1), it, "x", 2), ipop, "x", 3) - get_base1(newE, ipop, "newE", 1)), 
                                "assigning variable x");
                    current_statement_begin__ = 204;
                    stan::model::assign(x, 
                                stan::model::cons_list(stan::model::index_uni(E), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list()))), 
                                ((get_base1(get_base1(get_base1(x, E, "x", 1), it, "x", 2), ipop, "x", 3) + get_base1(newE, ipop, "newE", 1)) - get_base1(newI, ipop, "newI", 1)), 
                                "assigning variable x");
                    current_statement_begin__ = 205;
                    stan::model::assign(x, 
                                stan::model::cons_list(stan::model::index_uni(Imild), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list()))), 
                                ((get_base1(get_base1(get_base1(x, Imild, "x", 1), it, "x", 2), ipop, "x", 3) + (get_base1(newI, ipop, "newI", 1) * (1 - frac_hosp))) - get_base1(newrec_mild, ipop, "newrec_mild", 1)), 
                                "assigning variable x");
                    current_statement_begin__ = 206;
                    stan::model::assign(x, 
                                stan::model::cons_list(stan::model::index_uni(Ipreh), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list()))), 
                                ((get_base1(get_base1(get_base1(x, Ipreh, "x", 1), it, "x", 2), ipop, "x", 3) + (get_base1(newI, ipop, "newI", 1) * frac_hosp)) - get_base1(newhosp, ipop, "newhosp", 1)), 
                                "assigning variable x");
                    current_statement_begin__ = 207;
                    stan::model::assign(x, 
                                stan::model::cons_list(stan::model::index_uni(Hmod), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list()))), 
                                ((get_base1(get_base1(get_base1(x, Hmod, "x", 1), it, "x", 2), ipop, "x", 3) + (get_base1(newhosp, ipop, "newhosp", 1) * (1 - frac_icu))) - get_base1(newrec_mod, ipop, "newrec_mod", 1)), 
                                "assigning variable x");
                    current_statement_begin__ = 208;
                    stan::model::assign(x, 
                                stan::model::cons_list(stan::model::index_uni(Hicu), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list()))), 
                                ((get_base1(get_base1(get_base1(x, Hicu, "x", 1), it, "x", 2), ipop, "x", 3) + (get_base1(newhosp, ipop, "newhosp", 1) * frac_icu)) - get_base1(leave_icu, ipop, "leave_icu", 1)), 
                                "assigning variable x");
                    current_statement_begin__ = 209;
                    stan::model::assign(x, 
                                stan::model::cons_list(stan::model::index_uni(Rlive), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list()))), 
                                (((get_base1(get_base1(get_base1(x, Rlive, "x", 1), it, "x", 2), ipop, "x", 3) + get_base1(newrec_mild, ipop, "newrec_mild", 1)) + get_base1(newrec_mod, ipop, "newrec_mod", 1)) + (get_base1(leave_icu, ipop, "leave_icu", 1) * (1 - frac_mort))), 
                                "assigning variable x");
                    current_statement_begin__ = 210;
                    stan::model::assign(x, 
                                stan::model::cons_list(stan::model::index_uni(Rmort), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list()))), 
                                (get_base1(get_base1(get_base1(x, Rmort, "x", 1), it, "x", 2), ipop, "x", 3) + (get_base1(leave_icu, ipop, "leave_icu", 1) * frac_mort)), 
                                "assigning variable x");
                    current_statement_begin__ = 214;
                    if (as_bool(logical_gt(stan::math::fabs((sum(stan::model::rvalue(x, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list()))), "x")) - get_base1(population, ipop, "population", 1))), 1e-1))) {
                        current_statement_begin__ = 215;
                        std::stringstream errmsg_stream__;
                        errmsg_stream__ << "Model is leaking, net gain: ";
                        errmsg_stream__ << (sum(stan::model::rvalue(x, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list()))), "x")) - get_base1(population, ipop, "population", 1));
                        throw std::domain_error(errmsg_stream__.str());
                    }
                }
            }
            }
            current_statement_begin__ = 222;
            for (int ipop = 1; ipop <= npops; ++ipop) {
                current_statement_begin__ = 223;
                for (int it = 1; it <= nt; ++it) {
                    current_statement_begin__ = 224;
                    stan::model::assign(sim_data, 
                                stan::model::cons_list(stan::model::index_uni(it), stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list())), 
                                (get_base1(get_base1(get_base1(x, Hmod, "x", 1), it, "x", 2), ipop, "x", 3) + get_base1(get_base1(get_base1(x, Hicu, "x", 1), it, "x", 2), ipop, "x", 3)), 
                                "assigning variable sim_data");
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 121;
            size_t x_k_0_max__ = ncompartments;
            size_t x_k_1_max__ = nt;
            size_t x_k_2_max__ = npops;
            for (size_t k_0__ = 0; k_0__ < x_k_0_max__; ++k_0__) {
                for (size_t k_1__ = 0; k_1__ < x_k_1_max__; ++k_1__) {
                    for (size_t k_2__ = 0; k_2__ < x_k_2_max__; ++k_2__) {
                        if (stan::math::is_uninitialized(x[k_0__][k_1__][k_2__])) {
                            std::stringstream msg__;
                            msg__ << "Undefined transformed parameter: x" << "[" << k_0__ << "]" << "[" << k_1__ << "]" << "[" << k_2__ << "]";
                            stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable x: ") + msg__.str()), current_statement_begin__, prog_reader__());
                        }
                    }
                }
            }
            size_t x_i_0_max__ = ncompartments;
            size_t x_i_1_max__ = nt;
            size_t x_i_2_max__ = npops;
            for (size_t i_0__ = 0; i_0__ < x_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < x_i_1_max__; ++i_1__) {
                    for (size_t i_2__ = 0; i_2__ < x_i_2_max__; ++i_2__) {
                        check_greater_or_equal(function__, "x[i_0__][i_1__][i_2__]", x[i_0__][i_1__][i_2__], 0.0);
                    }
                }
            }
            current_statement_begin__ = 122;
            size_t sim_data_k_0_max__ = nt;
            size_t sim_data_k_1_max__ = npops;
            for (size_t k_0__ = 0; k_0__ < sim_data_k_0_max__; ++k_0__) {
                for (size_t k_1__ = 0; k_1__ < sim_data_k_1_max__; ++k_1__) {
                    if (stan::math::is_uninitialized(sim_data[k_0__][k_1__])) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: sim_data" << "[" << k_0__ << "]" << "[" << k_1__ << "]";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sim_data: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            size_t sim_data_i_0_max__ = nt;
            size_t sim_data_i_1_max__ = npops;
            for (size_t i_0__ = 0; i_0__ < sim_data_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < sim_data_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "sim_data[i_0__][i_1__]", sim_data[i_0__][i_1__], 0.0);
                }
            }
            current_statement_begin__ = 123;
            size_t beta_k_0_max__ = nt;
            size_t beta_k_1_max__ = npops;
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                for (size_t k_1__ = 0; k_1__ < beta_k_1_max__; ++k_1__) {
                    if (stan::math::is_uninitialized(beta[k_0__][k_1__])) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: beta" << "[" << k_0__ << "]" << "[" << k_1__ << "]";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable beta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            size_t beta_i_0_max__ = nt;
            size_t beta_i_1_max__ = npops;
            for (size_t i_0__ = 0; i_0__ < beta_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < beta_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "beta[i_0__][i_1__]", beta[i_0__][i_1__], 0.0);
                    check_less_or_equal(function__, "beta[i_0__][i_1__]", beta[i_0__][i_1__], 2.0);
                }
            }
            current_statement_begin__ = 124;
            size_t beta_mat_k_0_max__ = (nt - 1);
            size_t beta_mat_k_1_max__ = npops;
            size_t beta_mat_k_2_max__ = npops;
            for (size_t k_0__ = 0; k_0__ < beta_mat_k_0_max__; ++k_0__) {
                for (size_t k_1__ = 0; k_1__ < beta_mat_k_1_max__; ++k_1__) {
                    for (size_t k_2__ = 0; k_2__ < beta_mat_k_2_max__; ++k_2__) {
                        if (stan::math::is_uninitialized(beta_mat[k_0__][k_1__][k_2__])) {
                            std::stringstream msg__;
                            msg__ << "Undefined transformed parameter: beta_mat" << "[" << k_0__ << "]" << "[" << k_1__ << "]" << "[" << k_2__ << "]";
                            stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable beta_mat: ") + msg__.str()), current_statement_begin__, prog_reader__());
                        }
                    }
                }
            }
            size_t beta_mat_i_0_max__ = (nt - 1);
            size_t beta_mat_i_1_max__ = npops;
            size_t beta_mat_i_2_max__ = npops;
            for (size_t i_0__ = 0; i_0__ < beta_mat_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < beta_mat_i_1_max__; ++i_1__) {
                    for (size_t i_2__ = 0; i_2__ < beta_mat_i_2_max__; ++i_2__) {
                        check_greater_or_equal(function__, "beta_mat[i_0__][i_1__][i_2__]", beta_mat[i_0__][i_1__][i_2__], 0.0);
                    }
                }
            }
            // model body
            current_statement_begin__ = 232;
            lp_accum__.add(exponential_log<propto__>(ini_exposed, lambda_ini_exposed));
            current_statement_begin__ = 237;
            lp_accum__.add(exponential_log<propto__>(sigma_obs, 1.0));
            {
            current_statement_begin__ = 240;
            validate_non_negative_index("error", "((nobs_notmissing + 9) + ((npops + 2) * ninter))", ((nobs_notmissing + 9) + ((npops + 2) * ninter)));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> error(((nobs_notmissing + 9) + ((npops + 2) * ninter)));
            stan::math::initialize(error, DUMMY_VAR__);
            stan::math::fill(error, DUMMY_VAR__);
            current_statement_begin__ = 241;
            local_scalar_t__ obs(DUMMY_VAR__);
            (void) obs;  // dummy to suppress unused var warning
            stan::math::initialize(obs, DUMMY_VAR__);
            stan::math::fill(obs, DUMMY_VAR__);
            current_statement_begin__ = 242;
            local_scalar_t__ sim(DUMMY_VAR__);
            (void) sim;  // dummy to suppress unused var warning
            stan::math::initialize(sim, DUMMY_VAR__);
            stan::math::fill(sim, DUMMY_VAR__);
            current_statement_begin__ = 243;
            int cnt(0);
            (void) cnt;  // dummy to suppress unused var warning
            stan::math::fill(cnt, std::numeric_limits<int>::min());
            stan::math::assign(cnt,0);
            current_statement_begin__ = 244;
            local_scalar_t__ scale(DUMMY_VAR__);
            (void) scale;  // dummy to suppress unused var warning
            stan::math::initialize(scale, DUMMY_VAR__);
            stan::math::fill(scale, DUMMY_VAR__);
            current_statement_begin__ = 246;
            for (int ipop = 1; ipop <= npops; ++ipop) {
                current_statement_begin__ = 247;
                stan::math::assign(scale, (get_base1(population, ipop, "population", 1) / 1000000));
                current_statement_begin__ = 248;
                for (int iobs = 1; iobs <= nobs; ++iobs) {
                    current_statement_begin__ = 249;
                    if (as_bool(logical_gt(get_base1(get_base1(obs_data_conf, iobs, "obs_data_conf", 1), ipop, "obs_data_conf", 2), 0))) {
                        current_statement_begin__ = 250;
                        stan::math::assign(cnt, (cnt + 1));
                        current_statement_begin__ = 251;
                        stan::math::assign(obs, get_base1(get_base1(obs_data_conf, iobs, "obs_data_conf", 1), ipop, "obs_data_conf", 2));
                        current_statement_begin__ = 252;
                        if (as_bool(logical_gt(get_base1(get_base1(obs_data_pui, iobs, "obs_data_pui", 1), ipop, "obs_data_pui", 2), 0))) {
                            current_statement_begin__ = 253;
                            stan::math::assign(obs, (obs + (get_base1(get_base1(obs_data_pui, iobs, "obs_data_pui", 1), ipop, "obs_data_pui", 2) * frac_pui)));
                        }
                        current_statement_begin__ = 255;
                        stan::math::assign(sim, get_base1(get_base1(sim_data, get_base1(tobs, iobs, "tobs", 1), "sim_data", 1), ipop, "sim_data", 2));
                        current_statement_begin__ = 256;
                        stan::model::assign(error, 
                                    stan::model::cons_list(stan::model::index_uni(cnt), stan::model::nil_index_list()), 
                                    ((obs - sim) / (sigma_obs * scale)), 
                                    "assigning variable error");
                    }
                }
            }
            current_statement_begin__ = 261;
            stan::math::assign(cnt, (cnt + 1));
            current_statement_begin__ = 262;
            stan::model::assign(error, 
                        stan::model::cons_list(stan::model::index_uni(cnt), stan::model::nil_index_list()), 
                        ((r0 - mu_r0) / sigma_r0), 
                        "assigning variable error");
            current_statement_begin__ = 263;
            stan::math::assign(cnt, (cnt + 1));
            current_statement_begin__ = 264;
            stan::model::assign(error, 
                        stan::model::cons_list(stan::model::index_uni(cnt), stan::model::nil_index_list()), 
                        (mobility_coef0 / 5), 
                        "assigning variable error");
            current_statement_begin__ = 265;
            stan::math::assign(cnt, (cnt + 1));
            current_statement_begin__ = 266;
            stan::model::assign(error, 
                        stan::model::cons_list(stan::model::index_uni(cnt), stan::model::nil_index_list()), 
                        (mobility_coef1 / 5), 
                        "assigning variable error");
            current_statement_begin__ = 267;
            stan::math::assign(cnt, (cnt + 1));
            current_statement_begin__ = 268;
            stan::model::assign(error, 
                        stan::model::cons_list(stan::model::index_uni(cnt), stan::model::nil_index_list()), 
                        ((duration_pre_hosp - mu_duration_pre_hosp) / sigma_duration_pre_hosp), 
                        "assigning variable error");
            current_statement_begin__ = 269;
            stan::math::assign(cnt, (cnt + 1));
            current_statement_begin__ = 270;
            stan::model::assign(error, 
                        stan::model::cons_list(stan::model::index_uni(cnt), stan::model::nil_index_list()), 
                        ((duration_hosp_mod - mu_duration_hosp_mod) / sigma_duration_hosp_mod), 
                        "assigning variable error");
            current_statement_begin__ = 271;
            stan::math::assign(cnt, (cnt + 1));
            current_statement_begin__ = 272;
            stan::model::assign(error, 
                        stan::model::cons_list(stan::model::index_uni(cnt), stan::model::nil_index_list()), 
                        ((duration_hosp_icu - mu_duration_hosp_icu) / sigma_duration_hosp_icu), 
                        "assigning variable error");
            current_statement_begin__ = 273;
            stan::math::assign(cnt, (cnt + 1));
            current_statement_begin__ = 274;
            stan::model::assign(error, 
                        stan::model::cons_list(stan::model::index_uni(cnt), stan::model::nil_index_list()), 
                        ((frac_hosp - mu_frac_hosp) / sigma_frac_hosp), 
                        "assigning variable error");
            current_statement_begin__ = 275;
            stan::math::assign(cnt, (cnt + 1));
            current_statement_begin__ = 276;
            stan::model::assign(error, 
                        stan::model::cons_list(stan::model::index_uni(cnt), stan::model::nil_index_list()), 
                        ((duration_latent - mu_duration_latent) / sigma_duration_latent), 
                        "assigning variable error");
            current_statement_begin__ = 277;
            stan::math::assign(cnt, (cnt + 1));
            current_statement_begin__ = 278;
            stan::model::assign(error, 
                        stan::model::cons_list(stan::model::index_uni(cnt), stan::model::nil_index_list()), 
                        ((duration_rec_mild - mu_duration_rec_mild) / sigma_duration_rec_mild), 
                        "assigning variable error");
            current_statement_begin__ = 279;
            for (int iinter = 1; iinter <= ninter; ++iinter) {
                current_statement_begin__ = 280;
                for (int ipop = 1; ipop <= npops; ++ipop) {
                    current_statement_begin__ = 281;
                    stan::math::assign(cnt, (cnt + 1));
                    current_statement_begin__ = 282;
                    stan::model::assign(error, 
                                stan::model::cons_list(stan::model::index_uni(cnt), stan::model::nil_index_list()), 
                                ((get_base1(get_base1(beta_multiplier, iinter, "beta_multiplier", 1), ipop, "beta_multiplier", 2) - get_base1(get_base1(mu_beta_inter, iinter, "mu_beta_inter", 1), ipop, "mu_beta_inter", 2)) / get_base1(get_base1(sigma_beta_inter, iinter, "sigma_beta_inter", 1), ipop, "sigma_beta_inter", 2)), 
                                "assigning variable error");
                }
                current_statement_begin__ = 284;
                stan::math::assign(cnt, (cnt + 1));
                current_statement_begin__ = 285;
                stan::model::assign(error, 
                            stan::model::cons_list(stan::model::index_uni(cnt), stan::model::nil_index_list()), 
                            ((get_base1(t_inter, iinter, "t_inter", 1) - get_base1(mu_t_inter, iinter, "mu_t_inter", 1)) / get_base1(sigma_t_inter, iinter, "sigma_t_inter", 1)), 
                            "assigning variable error");
                current_statement_begin__ = 286;
                stan::math::assign(cnt, (cnt + 1));
                current_statement_begin__ = 287;
                stan::model::assign(error, 
                            stan::model::cons_list(stan::model::index_uni(cnt), stan::model::nil_index_list()), 
                            ((get_base1(len_inter, iinter, "len_inter", 1) - get_base1(mu_len_inter, iinter, "mu_len_inter", 1)) / get_base1(sigma_len_inter, iinter, "sigma_len_inter", 1)), 
                            "assigning variable error");
            }
            current_statement_begin__ = 290;
            lp_accum__.add(std_normal_log<propto__>(error));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("duration_latent");
        names__.push_back("duration_rec_mild");
        names__.push_back("duration_pre_hosp");
        names__.push_back("duration_hosp_mod");
        names__.push_back("duration_hosp_icu");
        names__.push_back("frac_hosp");
        names__.push_back("ini_exposed");
        names__.push_back("sigma_obs");
        names__.push_back("r0");
        names__.push_back("beta_multiplier");
        names__.push_back("t_inter");
        names__.push_back("len_inter");
        names__.push_back("mobility_coef0");
        names__.push_back("mobility_coef1");
        names__.push_back("x");
        names__.push_back("sim_data");
        names__.push_back("beta");
        names__.push_back("beta_mat");
        names__.push_back("Rt");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(npops);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(ninter);
        dims__.push_back(npops);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(ninter);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(ninter);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(ncompartments);
        dims__.push_back(nt);
        dims__.push_back(npops);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dims__.push_back(npops);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dims__.push_back(npops);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((nt - 1));
        dims__.push_back(npops);
        dims__.push_back(npops);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dims__.push_back(npops);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_LEMMA_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double duration_latent = in__.scalar_lb_constrain(1.0);
        vars__.push_back(duration_latent);
        double duration_rec_mild = in__.scalar_lb_constrain(1.0);
        vars__.push_back(duration_rec_mild);
        double duration_pre_hosp = in__.scalar_lb_constrain(1.0);
        vars__.push_back(duration_pre_hosp);
        double duration_hosp_mod = in__.scalar_lb_constrain(1.0);
        vars__.push_back(duration_hosp_mod);
        double duration_hosp_icu = in__.scalar_lb_constrain(1.0);
        vars__.push_back(duration_hosp_icu);
        double frac_hosp = in__.scalar_lub_constrain(0.005, 1.0);
        vars__.push_back(frac_hosp);
        std::vector<double> ini_exposed;
        size_t ini_exposed_d_0_max__ = npops;
        ini_exposed.reserve(ini_exposed_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < ini_exposed_d_0_max__; ++d_0__) {
            ini_exposed.push_back(in__.scalar_lb_constrain(0));
        }
        size_t ini_exposed_k_0_max__ = npops;
        for (size_t k_0__ = 0; k_0__ < ini_exposed_k_0_max__; ++k_0__) {
            vars__.push_back(ini_exposed[k_0__]);
        }
        double sigma_obs = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_obs);
        double r0 = in__.scalar_lb_constrain(0.0);
        vars__.push_back(r0);
        std::vector<std::vector<double> > beta_multiplier;
        size_t beta_multiplier_d_0_max__ = ninter;
        size_t beta_multiplier_d_1_max__ = npops;
        beta_multiplier.resize(beta_multiplier_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < beta_multiplier_d_0_max__; ++d_0__) {
            beta_multiplier[d_0__].reserve(beta_multiplier_d_1_max__);
            for (size_t d_1__ = 0; d_1__ < beta_multiplier_d_1_max__; ++d_1__) {
                beta_multiplier[d_0__].push_back(in__.scalar_lb_constrain(0.0));
            }
        }
        size_t beta_multiplier_k_0_max__ = ninter;
        size_t beta_multiplier_k_1_max__ = npops;
        for (size_t k_1__ = 0; k_1__ < beta_multiplier_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_multiplier_k_0_max__; ++k_0__) {
                vars__.push_back(beta_multiplier[k_0__][k_1__]);
            }
        }
        std::vector<double> t_inter;
        size_t t_inter_d_0_max__ = ninter;
        t_inter.reserve(t_inter_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < t_inter_d_0_max__; ++d_0__) {
            t_inter.push_back(in__.scalar_lb_constrain(1.0));
        }
        size_t t_inter_k_0_max__ = ninter;
        for (size_t k_0__ = 0; k_0__ < t_inter_k_0_max__; ++k_0__) {
            vars__.push_back(t_inter[k_0__]);
        }
        std::vector<double> len_inter;
        size_t len_inter_d_0_max__ = ninter;
        len_inter.reserve(len_inter_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < len_inter_d_0_max__; ++d_0__) {
            len_inter.push_back(in__.scalar_lb_constrain(1.0));
        }
        size_t len_inter_k_0_max__ = ninter;
        for (size_t k_0__ = 0; k_0__ < len_inter_k_0_max__; ++k_0__) {
            vars__.push_back(len_inter[k_0__]);
        }
        double mobility_coef0 = in__.scalar_constrain();
        vars__.push_back(mobility_coef0);
        double mobility_coef1 = in__.scalar_constrain();
        vars__.push_back(mobility_coef1);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 121;
            validate_non_negative_index("x", "ncompartments", ncompartments);
            validate_non_negative_index("x", "nt", nt);
            validate_non_negative_index("x", "npops", npops);
            std::vector<std::vector<std::vector<double> > > x(ncompartments, std::vector<std::vector<double> >(nt, std::vector<double>(npops, double(0))));
            stan::math::initialize(x, DUMMY_VAR__);
            stan::math::fill(x, DUMMY_VAR__);
            current_statement_begin__ = 122;
            validate_non_negative_index("sim_data", "nt", nt);
            validate_non_negative_index("sim_data", "npops", npops);
            std::vector<std::vector<double> > sim_data(nt, std::vector<double>(npops, double(0)));
            stan::math::initialize(sim_data, DUMMY_VAR__);
            stan::math::fill(sim_data, DUMMY_VAR__);
            current_statement_begin__ = 123;
            validate_non_negative_index("beta", "nt", nt);
            validate_non_negative_index("beta", "npops", npops);
            std::vector<std::vector<double> > beta(nt, std::vector<double>(npops, double(0)));
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            current_statement_begin__ = 124;
            validate_non_negative_index("beta_mat", "(nt - 1)", (nt - 1));
            validate_non_negative_index("beta_mat", "npops", npops);
            validate_non_negative_index("beta_mat", "npops", npops);
            std::vector<std::vector<std::vector<double> > > beta_mat((nt - 1), std::vector<std::vector<double> >(npops, std::vector<double>(npops, double(0))));
            stan::math::initialize(beta_mat, DUMMY_VAR__);
            stan::math::fill(beta_mat, DUMMY_VAR__);
            // do transformed parameters statements
            {
            current_statement_begin__ = 129;
            validate_non_negative_index("newE", "npops", npops);
            std::vector<local_scalar_t__  > newE(npops, local_scalar_t__(DUMMY_VAR__));
            stan::math::initialize(newE, DUMMY_VAR__);
            stan::math::fill(newE, DUMMY_VAR__);
            current_statement_begin__ = 130;
            validate_non_negative_index("newI", "npops", npops);
            std::vector<local_scalar_t__  > newI(npops, local_scalar_t__(DUMMY_VAR__));
            stan::math::initialize(newI, DUMMY_VAR__);
            stan::math::fill(newI, DUMMY_VAR__);
            current_statement_begin__ = 131;
            validate_non_negative_index("newrec_mild", "npops", npops);
            std::vector<local_scalar_t__  > newrec_mild(npops, local_scalar_t__(DUMMY_VAR__));
            stan::math::initialize(newrec_mild, DUMMY_VAR__);
            stan::math::fill(newrec_mild, DUMMY_VAR__);
            current_statement_begin__ = 132;
            validate_non_negative_index("newrec_mod", "npops", npops);
            std::vector<local_scalar_t__  > newrec_mod(npops, local_scalar_t__(DUMMY_VAR__));
            stan::math::initialize(newrec_mod, DUMMY_VAR__);
            stan::math::fill(newrec_mod, DUMMY_VAR__);
            current_statement_begin__ = 133;
            validate_non_negative_index("newhosp", "npops", npops);
            std::vector<local_scalar_t__  > newhosp(npops, local_scalar_t__(DUMMY_VAR__));
            stan::math::initialize(newhosp, DUMMY_VAR__);
            stan::math::fill(newhosp, DUMMY_VAR__);
            current_statement_begin__ = 134;
            validate_non_negative_index("leave_icu", "npops", npops);
            std::vector<local_scalar_t__  > leave_icu(npops, local_scalar_t__(DUMMY_VAR__));
            stan::math::initialize(leave_icu, DUMMY_VAR__);
            stan::math::fill(leave_icu, DUMMY_VAR__);
            current_statement_begin__ = 135;
            validate_non_negative_index("beta_0", "npops", npops);
            std::vector<local_scalar_t__  > beta_0(npops, local_scalar_t__(DUMMY_VAR__));
            stan::math::initialize(beta_0, DUMMY_VAR__);
            stan::math::fill(beta_0, DUMMY_VAR__);
            current_statement_begin__ = 136;
            local_scalar_t__ zero(DUMMY_VAR__);
            (void) zero;  // dummy to suppress unused var warning
            stan::math::initialize(zero, DUMMY_VAR__);
            stan::math::fill(zero, DUMMY_VAR__);
            current_statement_begin__ = 137;
            local_scalar_t__ total_population(DUMMY_VAR__);
            (void) total_population;  // dummy to suppress unused var warning
            stan::math::initialize(total_population, DUMMY_VAR__);
            stan::math::fill(total_population, DUMMY_VAR__);
            stan::math::assign(total_population,sum(population));
            current_statement_begin__ = 138;
            local_scalar_t__ m(DUMMY_VAR__);
            (void) m;  // dummy to suppress unused var warning
            stan::math::initialize(m, DUMMY_VAR__);
            stan::math::fill(m, DUMMY_VAR__);
            current_statement_begin__ = 144;
            for (int ipop = 1; ipop <= npops; ++ipop) {
                current_statement_begin__ = 145;
                stan::model::assign(beta_0, 
                            stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list()), 
                            (r0 / ((frac_hosp * duration_pre_hosp) + ((1 - frac_hosp) * duration_rec_mild))), 
                            "assigning variable beta_0");
                current_statement_begin__ = 146;
                for (int it = 1; it <= nt; ++it) {
                    current_statement_begin__ = 147;
                    stan::model::assign(beta, 
                                stan::model::cons_list(stan::model::index_uni(it), stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list())), 
                                get_base1(beta_0, ipop, "beta_0", 1), 
                                "assigning variable beta");
                    current_statement_begin__ = 148;
                    for (int iinter = 1; iinter <= ninter; ++iinter) {
                        current_statement_begin__ = 151;
                        stan::model::assign(beta, 
                                    stan::model::cons_list(stan::model::index_uni(it), stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list())), 
                                    (get_base1(get_base1(beta, it, "beta", 1), ipop, "beta", 2) * pow(get_base1(get_base1(beta_multiplier, iinter, "beta_multiplier", 1), ipop, "beta_multiplier", 2), inv_logit(((9.19024 / get_base1(len_inter, iinter, "len_inter", 1)) * (it - (get_base1(t_inter, iinter, "t_inter", 1) + (get_base1(len_inter, iinter, "len_inter", 1) / 2))))))), 
                                    "assigning variable beta");
                    }
                }
            }
            current_statement_begin__ = 157;
            stan::math::assign(zero, (get_base1(ini_exposed, 1, "ini_exposed", 1) * 1e-15));
            current_statement_begin__ = 158;
            for (int ipop = 1; ipop <= npops; ++ipop) {
                current_statement_begin__ = 159;
                for (int icompartment = 1; icompartment <= ncompartments; ++icompartment) {
                    current_statement_begin__ = 160;
                    stan::model::assign(x, 
                                stan::model::cons_list(stan::model::index_uni(icompartment), stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list()))), 
                                zero, 
                                "assigning variable x");
                }
                current_statement_begin__ = 162;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(S), stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list()))), 
                            (get_base1(population, ipop, "population", 1) - get_base1(ini_exposed, ipop, "ini_exposed", 1)), 
                            "assigning variable x");
                current_statement_begin__ = 163;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(E), stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list()))), 
                            get_base1(ini_exposed, ipop, "ini_exposed", 1), 
                            "assigning variable x");
            }
            current_statement_begin__ = 169;
            for (int it = 1; it <= (nt - 1); ++it) {
                current_statement_begin__ = 172;
                for (int ipop1 = 1; ipop1 <= npops; ++ipop1) {
                    current_statement_begin__ = 173;
                    stan::model::assign(newE, 
                                stan::model::cons_list(stan::model::index_uni(ipop1), stan::model::nil_index_list()), 
                                0, 
                                "assigning variable newE");
                    current_statement_begin__ = 175;
                    for (int ipop2 = 1; ipop2 <= npops; ++ipop2) {
                        current_statement_begin__ = 177;
                        stan::math::assign(m, inv_logit((mobility_coef0 + (mobility_coef1 * get_base1(get_base1(get_base1(mobility, it, "mobility", 1), ipop1, "mobility", 2), ipop2, "mobility", 3)))));
                        current_statement_begin__ = 178;
                        if (as_bool(logical_eq(ipop1, ipop2))) {
                            current_statement_begin__ = 179;
                            stan::model::assign(beta_mat, 
                                        stan::model::cons_list(stan::model::index_uni(it), stan::model::cons_list(stan::model::index_uni(ipop1), stan::model::cons_list(stan::model::index_uni(ipop2), stan::model::nil_index_list()))), 
                                        (get_base1(get_base1(beta, it, "beta", 1), ipop1, "beta", 2) * (1 + (m * ((total_population / get_base1(population, ipop1, "population", 1)) - 1)))), 
                                        "assigning variable beta_mat");
                        } else {
                            current_statement_begin__ = 181;
                            stan::model::assign(beta_mat, 
                                        stan::model::cons_list(stan::model::index_uni(it), stan::model::cons_list(stan::model::index_uni(ipop1), stan::model::cons_list(stan::model::index_uni(ipop2), stan::model::nil_index_list()))), 
                                        ((0.5 * (get_base1(get_base1(beta, it, "beta", 1), ipop1, "beta", 2) + get_base1(get_base1(beta, it, "beta", 1), ipop2, "beta", 2))) * (1 - m)), 
                                        "assigning variable beta_mat");
                        }
                    }
                }
                current_statement_begin__ = 186;
                for (int ipop1 = 1; ipop1 <= npops; ++ipop1) {
                    current_statement_begin__ = 187;
                    for (int ipop2 = 1; ipop2 <= npops; ++ipop2) {
                        current_statement_begin__ = 188;
                        stan::model::assign(newE, 
                                    stan::model::cons_list(stan::model::index_uni(ipop1), stan::model::nil_index_list()), 
                                    (get_base1(newE, ipop1, "newE", 1) + (((get_base1(get_base1(get_base1(beta_mat, it, "beta_mat", 1), ipop1, "beta_mat", 2), ipop2, "beta_mat", 3) * get_base1(get_base1(get_base1(x, S, "x", 1), it, "x", 2), ipop1, "x", 3)) * (get_base1(get_base1(get_base1(x, Imild, "x", 1), it, "x", 2), ipop2, "x", 3) + get_base1(get_base1(get_base1(x, Ipreh, "x", 1), it, "x", 2), ipop2, "x", 3))) / total_population)), 
                                    "assigning variable newE");
                    }
                }
                current_statement_begin__ = 192;
                for (int ipop = 1; ipop <= npops; ++ipop) {
                    current_statement_begin__ = 193;
                    stan::model::assign(newE, 
                                stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list()), 
                                stan::math::fmin(get_base1(newE, ipop, "newE", 1), get_base1(get_base1(get_base1(x, S, "x", 1), it, "x", 2), ipop, "x", 3)), 
                                "assigning variable newE");
                    current_statement_begin__ = 194;
                    stan::model::assign(newI, 
                                stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list()), 
                                ((1.0 / duration_latent) * get_base1(get_base1(get_base1(x, E, "x", 1), it, "x", 2), ipop, "x", 3)), 
                                "assigning variable newI");
                    current_statement_begin__ = 195;
                    stan::model::assign(newhosp, 
                                stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list()), 
                                ((1.0 / duration_pre_hosp) * get_base1(get_base1(get_base1(x, Ipreh, "x", 1), it, "x", 2), ipop, "x", 3)), 
                                "assigning variable newhosp");
                    current_statement_begin__ = 196;
                    stan::model::assign(newrec_mild, 
                                stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list()), 
                                ((1.0 / duration_rec_mild) * get_base1(get_base1(get_base1(x, Imild, "x", 1), it, "x", 2), ipop, "x", 3)), 
                                "assigning variable newrec_mild");
                    current_statement_begin__ = 197;
                    stan::model::assign(newrec_mod, 
                                stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list()), 
                                ((1.0 / duration_hosp_mod) * get_base1(get_base1(get_base1(x, Hmod, "x", 1), it, "x", 2), ipop, "x", 3)), 
                                "assigning variable newrec_mod");
                    current_statement_begin__ = 198;
                    stan::model::assign(leave_icu, 
                                stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list()), 
                                ((1.0 / duration_hosp_icu) * get_base1(get_base1(get_base1(x, Hicu, "x", 1), it, "x", 2), ipop, "x", 3)), 
                                "assigning variable leave_icu");
                    current_statement_begin__ = 203;
                    stan::model::assign(x, 
                                stan::model::cons_list(stan::model::index_uni(S), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list()))), 
                                (get_base1(get_base1(get_base1(x, S, "x", 1), it, "x", 2), ipop, "x", 3) - get_base1(newE, ipop, "newE", 1)), 
                                "assigning variable x");
                    current_statement_begin__ = 204;
                    stan::model::assign(x, 
                                stan::model::cons_list(stan::model::index_uni(E), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list()))), 
                                ((get_base1(get_base1(get_base1(x, E, "x", 1), it, "x", 2), ipop, "x", 3) + get_base1(newE, ipop, "newE", 1)) - get_base1(newI, ipop, "newI", 1)), 
                                "assigning variable x");
                    current_statement_begin__ = 205;
                    stan::model::assign(x, 
                                stan::model::cons_list(stan::model::index_uni(Imild), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list()))), 
                                ((get_base1(get_base1(get_base1(x, Imild, "x", 1), it, "x", 2), ipop, "x", 3) + (get_base1(newI, ipop, "newI", 1) * (1 - frac_hosp))) - get_base1(newrec_mild, ipop, "newrec_mild", 1)), 
                                "assigning variable x");
                    current_statement_begin__ = 206;
                    stan::model::assign(x, 
                                stan::model::cons_list(stan::model::index_uni(Ipreh), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list()))), 
                                ((get_base1(get_base1(get_base1(x, Ipreh, "x", 1), it, "x", 2), ipop, "x", 3) + (get_base1(newI, ipop, "newI", 1) * frac_hosp)) - get_base1(newhosp, ipop, "newhosp", 1)), 
                                "assigning variable x");
                    current_statement_begin__ = 207;
                    stan::model::assign(x, 
                                stan::model::cons_list(stan::model::index_uni(Hmod), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list()))), 
                                ((get_base1(get_base1(get_base1(x, Hmod, "x", 1), it, "x", 2), ipop, "x", 3) + (get_base1(newhosp, ipop, "newhosp", 1) * (1 - frac_icu))) - get_base1(newrec_mod, ipop, "newrec_mod", 1)), 
                                "assigning variable x");
                    current_statement_begin__ = 208;
                    stan::model::assign(x, 
                                stan::model::cons_list(stan::model::index_uni(Hicu), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list()))), 
                                ((get_base1(get_base1(get_base1(x, Hicu, "x", 1), it, "x", 2), ipop, "x", 3) + (get_base1(newhosp, ipop, "newhosp", 1) * frac_icu)) - get_base1(leave_icu, ipop, "leave_icu", 1)), 
                                "assigning variable x");
                    current_statement_begin__ = 209;
                    stan::model::assign(x, 
                                stan::model::cons_list(stan::model::index_uni(Rlive), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list()))), 
                                (((get_base1(get_base1(get_base1(x, Rlive, "x", 1), it, "x", 2), ipop, "x", 3) + get_base1(newrec_mild, ipop, "newrec_mild", 1)) + get_base1(newrec_mod, ipop, "newrec_mod", 1)) + (get_base1(leave_icu, ipop, "leave_icu", 1) * (1 - frac_mort))), 
                                "assigning variable x");
                    current_statement_begin__ = 210;
                    stan::model::assign(x, 
                                stan::model::cons_list(stan::model::index_uni(Rmort), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list()))), 
                                (get_base1(get_base1(get_base1(x, Rmort, "x", 1), it, "x", 2), ipop, "x", 3) + (get_base1(leave_icu, ipop, "leave_icu", 1) * frac_mort)), 
                                "assigning variable x");
                    current_statement_begin__ = 214;
                    if (as_bool(logical_gt(stan::math::fabs((sum(stan::model::rvalue(x, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list()))), "x")) - get_base1(population, ipop, "population", 1))), 1e-1))) {
                        current_statement_begin__ = 215;
                        std::stringstream errmsg_stream__;
                        errmsg_stream__ << "Model is leaking, net gain: ";
                        errmsg_stream__ << (sum(stan::model::rvalue(x, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list()))), "x")) - get_base1(population, ipop, "population", 1));
                        throw std::domain_error(errmsg_stream__.str());
                    }
                }
            }
            }
            current_statement_begin__ = 222;
            for (int ipop = 1; ipop <= npops; ++ipop) {
                current_statement_begin__ = 223;
                for (int it = 1; it <= nt; ++it) {
                    current_statement_begin__ = 224;
                    stan::model::assign(sim_data, 
                                stan::model::cons_list(stan::model::index_uni(it), stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list())), 
                                (get_base1(get_base1(get_base1(x, Hmod, "x", 1), it, "x", 2), ipop, "x", 3) + get_base1(get_base1(get_base1(x, Hicu, "x", 1), it, "x", 2), ipop, "x", 3)), 
                                "assigning variable sim_data");
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 121;
            size_t x_i_0_max__ = ncompartments;
            size_t x_i_1_max__ = nt;
            size_t x_i_2_max__ = npops;
            for (size_t i_0__ = 0; i_0__ < x_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < x_i_1_max__; ++i_1__) {
                    for (size_t i_2__ = 0; i_2__ < x_i_2_max__; ++i_2__) {
                        check_greater_or_equal(function__, "x[i_0__][i_1__][i_2__]", x[i_0__][i_1__][i_2__], 0.0);
                    }
                }
            }
            current_statement_begin__ = 122;
            size_t sim_data_i_0_max__ = nt;
            size_t sim_data_i_1_max__ = npops;
            for (size_t i_0__ = 0; i_0__ < sim_data_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < sim_data_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "sim_data[i_0__][i_1__]", sim_data[i_0__][i_1__], 0.0);
                }
            }
            current_statement_begin__ = 123;
            size_t beta_i_0_max__ = nt;
            size_t beta_i_1_max__ = npops;
            for (size_t i_0__ = 0; i_0__ < beta_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < beta_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "beta[i_0__][i_1__]", beta[i_0__][i_1__], 0.0);
                    check_less_or_equal(function__, "beta[i_0__][i_1__]", beta[i_0__][i_1__], 2.0);
                }
            }
            current_statement_begin__ = 124;
            size_t beta_mat_i_0_max__ = (nt - 1);
            size_t beta_mat_i_1_max__ = npops;
            size_t beta_mat_i_2_max__ = npops;
            for (size_t i_0__ = 0; i_0__ < beta_mat_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < beta_mat_i_1_max__; ++i_1__) {
                    for (size_t i_2__ = 0; i_2__ < beta_mat_i_2_max__; ++i_2__) {
                        check_greater_or_equal(function__, "beta_mat[i_0__][i_1__][i_2__]", beta_mat[i_0__][i_1__][i_2__], 0.0);
                    }
                }
            }
            // write transformed parameters
            if (include_tparams__) {
                size_t x_k_0_max__ = ncompartments;
                size_t x_k_1_max__ = nt;
                size_t x_k_2_max__ = npops;
                for (size_t k_2__ = 0; k_2__ < x_k_2_max__; ++k_2__) {
                    for (size_t k_1__ = 0; k_1__ < x_k_1_max__; ++k_1__) {
                        for (size_t k_0__ = 0; k_0__ < x_k_0_max__; ++k_0__) {
                            vars__.push_back(x[k_0__][k_1__][k_2__]);
                        }
                    }
                }
                size_t sim_data_k_0_max__ = nt;
                size_t sim_data_k_1_max__ = npops;
                for (size_t k_1__ = 0; k_1__ < sim_data_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < sim_data_k_0_max__; ++k_0__) {
                        vars__.push_back(sim_data[k_0__][k_1__]);
                    }
                }
                size_t beta_k_0_max__ = nt;
                size_t beta_k_1_max__ = npops;
                for (size_t k_1__ = 0; k_1__ < beta_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                        vars__.push_back(beta[k_0__][k_1__]);
                    }
                }
                size_t beta_mat_k_0_max__ = (nt - 1);
                size_t beta_mat_k_1_max__ = npops;
                size_t beta_mat_k_2_max__ = npops;
                for (size_t k_2__ = 0; k_2__ < beta_mat_k_2_max__; ++k_2__) {
                    for (size_t k_1__ = 0; k_1__ < beta_mat_k_1_max__; ++k_1__) {
                        for (size_t k_0__ = 0; k_0__ < beta_mat_k_0_max__; ++k_0__) {
                            vars__.push_back(beta_mat[k_0__][k_1__][k_2__]);
                        }
                    }
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 294;
            validate_non_negative_index("Rt", "nt", nt);
            validate_non_negative_index("Rt", "npops", npops);
            std::vector<std::vector<double> > Rt(nt, std::vector<double>(npops, double(0)));
            stan::math::initialize(Rt, DUMMY_VAR__);
            stan::math::fill(Rt, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 295;
            for (int it = 1; it <= nt; ++it) {
                current_statement_begin__ = 296;
                for (int ipop = 1; ipop <= npops; ++ipop) {
                    current_statement_begin__ = 297;
                    stan::model::assign(Rt, 
                                stan::model::cons_list(stan::model::index_uni(it), stan::model::cons_list(stan::model::index_uni(ipop), stan::model::nil_index_list())), 
                                (((get_base1(get_base1(beta, it, "beta", 1), ipop, "beta", 2) * ((frac_hosp * duration_pre_hosp) + ((1 - frac_hosp) * duration_rec_mild))) * get_base1(get_base1(get_base1(x, S, "x", 1), it, "x", 2), ipop, "x", 3)) / get_base1(population, ipop, "population", 1)), 
                                "assigning variable Rt");
                }
            }
            // validate, write generated quantities
            current_statement_begin__ = 294;
            size_t Rt_i_0_max__ = nt;
            size_t Rt_i_1_max__ = npops;
            for (size_t i_0__ = 0; i_0__ < Rt_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < Rt_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "Rt[i_0__][i_1__]", Rt[i_0__][i_1__], 0.0);
                }
            }
            size_t Rt_k_0_max__ = nt;
            size_t Rt_k_1_max__ = npops;
            for (size_t k_1__ = 0; k_1__ < Rt_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < Rt_k_0_max__; ++k_0__) {
                    vars__.push_back(Rt[k_0__][k_1__]);
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_LEMMA";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "duration_latent";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "duration_rec_mild";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "duration_pre_hosp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "duration_hosp_mod";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "duration_hosp_icu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "frac_hosp";
        param_names__.push_back(param_name_stream__.str());
        size_t ini_exposed_k_0_max__ = npops;
        for (size_t k_0__ = 0; k_0__ < ini_exposed_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ini_exposed" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_obs";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "r0";
        param_names__.push_back(param_name_stream__.str());
        size_t beta_multiplier_k_0_max__ = ninter;
        size_t beta_multiplier_k_1_max__ = npops;
        for (size_t k_1__ = 0; k_1__ < beta_multiplier_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_multiplier_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_multiplier" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t t_inter_k_0_max__ = ninter;
        for (size_t k_0__ = 0; k_0__ < t_inter_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "t_inter" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t len_inter_k_0_max__ = ninter;
        for (size_t k_0__ = 0; k_0__ < len_inter_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "len_inter" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mobility_coef0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mobility_coef1";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t x_k_0_max__ = ncompartments;
            size_t x_k_1_max__ = nt;
            size_t x_k_2_max__ = npops;
            for (size_t k_2__ = 0; k_2__ < x_k_2_max__; ++k_2__) {
                for (size_t k_1__ = 0; k_1__ < x_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < x_k_0_max__; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "x" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << k_2__ + 1;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
            size_t sim_data_k_0_max__ = nt;
            size_t sim_data_k_1_max__ = npops;
            for (size_t k_1__ = 0; k_1__ < sim_data_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < sim_data_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "sim_data" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t beta_k_0_max__ = nt;
            size_t beta_k_1_max__ = npops;
            for (size_t k_1__ = 0; k_1__ < beta_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "beta" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t beta_mat_k_0_max__ = (nt - 1);
            size_t beta_mat_k_1_max__ = npops;
            size_t beta_mat_k_2_max__ = npops;
            for (size_t k_2__ = 0; k_2__ < beta_mat_k_2_max__; ++k_2__) {
                for (size_t k_1__ = 0; k_1__ < beta_mat_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < beta_mat_k_0_max__; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "beta_mat" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << k_2__ + 1;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
        }
        if (!include_gqs__) return;
        size_t Rt_k_0_max__ = nt;
        size_t Rt_k_1_max__ = npops;
        for (size_t k_1__ = 0; k_1__ < Rt_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < Rt_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Rt" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "duration_latent";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "duration_rec_mild";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "duration_pre_hosp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "duration_hosp_mod";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "duration_hosp_icu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "frac_hosp";
        param_names__.push_back(param_name_stream__.str());
        size_t ini_exposed_k_0_max__ = npops;
        for (size_t k_0__ = 0; k_0__ < ini_exposed_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ini_exposed" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_obs";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "r0";
        param_names__.push_back(param_name_stream__.str());
        size_t beta_multiplier_k_0_max__ = ninter;
        size_t beta_multiplier_k_1_max__ = npops;
        for (size_t k_1__ = 0; k_1__ < beta_multiplier_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_multiplier_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_multiplier" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t t_inter_k_0_max__ = ninter;
        for (size_t k_0__ = 0; k_0__ < t_inter_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "t_inter" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t len_inter_k_0_max__ = ninter;
        for (size_t k_0__ = 0; k_0__ < len_inter_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "len_inter" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mobility_coef0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mobility_coef1";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t x_k_0_max__ = ncompartments;
            size_t x_k_1_max__ = nt;
            size_t x_k_2_max__ = npops;
            for (size_t k_2__ = 0; k_2__ < x_k_2_max__; ++k_2__) {
                for (size_t k_1__ = 0; k_1__ < x_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < x_k_0_max__; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "x" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << k_2__ + 1;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
            size_t sim_data_k_0_max__ = nt;
            size_t sim_data_k_1_max__ = npops;
            for (size_t k_1__ = 0; k_1__ < sim_data_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < sim_data_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "sim_data" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t beta_k_0_max__ = nt;
            size_t beta_k_1_max__ = npops;
            for (size_t k_1__ = 0; k_1__ < beta_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "beta" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t beta_mat_k_0_max__ = (nt - 1);
            size_t beta_mat_k_1_max__ = npops;
            size_t beta_mat_k_2_max__ = npops;
            for (size_t k_2__ = 0; k_2__ < beta_mat_k_2_max__; ++k_2__) {
                for (size_t k_1__ = 0; k_1__ < beta_mat_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < beta_mat_k_0_max__; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "beta_mat" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << k_2__ + 1;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
        }
        if (!include_gqs__) return;
        size_t Rt_k_0_max__ = nt;
        size_t Rt_k_1_max__ = npops;
        for (size_t k_1__ = 0; k_1__ < Rt_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < Rt_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Rt" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
}; // model
}  // namespace
typedef model_LEMMA_namespace::model_LEMMA stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
