// Generated by rstantools.  Do not edit by hand.

/*
    LEMMA is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    LEMMA is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with LEMMA.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-1-g67504470
#include <stan/model/model_header.hpp>
namespace model_LEMMA_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'LEMMA', line 100, column 2 to column 35)",
                                                      " (in 'LEMMA', line 101, column 2 to column 35)",
                                                      " (in 'LEMMA', line 102, column 2 to column 51)",
                                                      " (in 'LEMMA', line 103, column 2 to column 36)",
                                                      " (in 'LEMMA', line 104, column 2 to column 37)",
                                                      " (in 'LEMMA', line 105, column 2 to column 37)",
                                                      " (in 'LEMMA', line 106, column 2 to column 48)",
                                                      " (in 'LEMMA', line 107, column 2 to column 50)",
                                                      " (in 'LEMMA', line 108, column 2 to column 41)",
                                                      " (in 'LEMMA', line 109, column 2 to column 43)",
                                                      " (in 'LEMMA', line 111, column 2 to column 50)",
                                                      " (in 'LEMMA', line 114, column 2 to column 42)",
                                                      " (in 'LEMMA', line 115, column 2 to column 29)",
                                                      " (in 'LEMMA', line 116, column 2 to column 40)",
                                                      " (in 'LEMMA', line 117, column 2 to column 48)",
                                                      " (in 'LEMMA', line 118, column 2 to column 45)",
                                                      " (in 'LEMMA', line 119, column 2 to column 46)",
                                                      " (in 'LEMMA', line 120, column 2 to column 42)",
                                                      " (in 'LEMMA', line 123, column 2 to column 40)",
                                                      " (in 'LEMMA', line 124, column 2 to column 44)",
                                                      " (in 'LEMMA', line 125, column 2 to column 39)",
                                                      " (in 'LEMMA', line 126, column 2 to column 39)",
                                                      " (in 'LEMMA', line 127, column 2 to column 43)",
                                                      " (in 'LEMMA', line 128, column 2 to column 43)",
                                                      " (in 'LEMMA', line 129, column 2 to column 27)",
                                                      " (in 'LEMMA', line 130, column 2 to column 46)",
                                                      " (in 'LEMMA', line 131, column 2 to column 25)",
                                                      " (in 'LEMMA', line 132, column 2 to column 31)",
                                                      " (in 'LEMMA', line 133, column 2 to column 56)",
                                                      " (in 'LEMMA', line 134, column 2 to column 35)",
                                                      " (in 'LEMMA', line 135, column 2 to column 25)",
                                                      " (in 'LEMMA', line 138, column 6 to column 32)",
                                                      " (in 'LEMMA', line 137, column 32 to line 139, column 5)",
                                                      " (in 'LEMMA', line 137, column 4 to line 139, column 5)",
                                                      " (in 'LEMMA', line 136, column 19 to line 140, column 3)",
                                                      " (in 'LEMMA', line 136, column 2 to line 140, column 3)",
                                                      " (in 'LEMMA', line 143, column 4 to column 15)",
                                                      " (in 'LEMMA', line 144, column 4 to column 15)",
                                                      " (in 'LEMMA', line 145, column 4 to column 15)",
                                                      " (in 'LEMMA', line 146, column 4 to column 15)",
                                                      " (in 'LEMMA', line 147, column 4 to column 21)",
                                                      " (in 'LEMMA', line 148, column 4 to column 22)",
                                                      " (in 'LEMMA', line 149, column 4 to column 38)",
                                                      " (in 'LEMMA', line 150, column 4 to column 39)",
                                                      " (in 'LEMMA', line 151, column 4 to column 44)",
                                                      " (in 'LEMMA', line 152, column 4 to column 21)",
                                                      " (in 'LEMMA', line 153, column 4 to column 21)",
                                                      " (in 'LEMMA', line 154, column 4 to column 36)",
                                                      " (in 'LEMMA', line 155, column 4 to column 36)",
                                                      " (in 'LEMMA', line 156, column 4 to column 36)",
                                                      " (in 'LEMMA', line 157, column 4 to column 37)",
                                                      " (in 'LEMMA', line 158, column 4 to column 24)",
                                                      " (in 'LEMMA', line 159, column 4 to column 24)",
                                                      " (in 'LEMMA', line 160, column 4 to column 12)",
                                                      " (in 'LEMMA', line 161, column 4 to column 24)",
                                                      " (in 'LEMMA', line 162, column 4 to column 25)",
                                                      " (in 'LEMMA', line 163, column 4 to column 20)",
                                                      " (in 'LEMMA', line 164, column 4 to column 20)",
                                                      " (in 'LEMMA', line 165, column 4 to column 28)",
                                                      " (in 'LEMMA', line 166, column 4 to column 29)",
                                                      " (in 'LEMMA', line 167, column 4 to column 24)",
                                                      " (in 'LEMMA', line 168, column 4 to column 23)",
                                                      " (in 'LEMMA', line 169, column 4 to column 25)",
                                                      " (in 'LEMMA', line 170, column 4 to column 39)",
                                                      " (in 'LEMMA', line 171, column 4 to column 40)",
                                                      " (in 'LEMMA', line 172, column 4 to column 45)",
                                                      " (in 'LEMMA', line 173, column 4 to column 45)",
                                                      " (in 'LEMMA', line 174, column 4 to column 24)",
                                                      " (in 'LEMMA', line 175, column 4 to column 14)",
                                                      " (in 'LEMMA', line 176, column 4 to column 20)",
                                                      " (in 'LEMMA', line 177, column 11 to column 23)",
                                                      " (in 'LEMMA', line 177, column 4 to column 30)",
                                                      " (in 'LEMMA', line 178, column 4 to column 63)",
                                                      " (in 'LEMMA', line 180, column 6 to column 37)",
                                                      " (in 'LEMMA', line 179, column 30 to line 181, column 5)",
                                                      " (in 'LEMMA', line 179, column 4 to line 181, column 5)",
                                                      " (in 'LEMMA', line 182, column 4 to column 65)",
                                                      " (in 'LEMMA', line 183, column 4 to column 65)",
                                                      " (in 'LEMMA', line 184, column 4 to column 73)",
                                                      " (in 'LEMMA', line 185, column 4 to column 98)",
                                                      " (in 'LEMMA', line 186, column 4 to column 97)",
                                                      " (in 'LEMMA', line 187, column 4 to column 44)",
                                                      " (in 'LEMMA', line 188, column 4 to column 71)",
                                                      " (in 'LEMMA', line 189, column 4 to column 83)",
                                                      " (in 'LEMMA', line 190, column 4 to column 71)",
                                                      " (in 'LEMMA', line 191, column 4 to column 95)",
                                                      " (in 'LEMMA', line 192, column 4 to column 29)",
                                                      " (in 'LEMMA', line 193, column 4 to column 54)",
                                                      " (in 'LEMMA', line 194, column 4 to column 60)",
                                                      " (in 'LEMMA', line 195, column 4 to column 99)",
                                                      " (in 'LEMMA', line 197, column 4 to column 61)",
                                                      " (in 'LEMMA', line 199, column 6 to column 27)",
                                                      " (in 'LEMMA', line 198, column 20 to line 200, column 5)",
                                                      " (in 'LEMMA', line 198, column 4 to line 200, column 5)",
                                                      " (in 'LEMMA', line 202, column 6 to column 24)",
                                                      " (in 'LEMMA', line 206, column 8 to column 146)",
                                                      " (in 'LEMMA', line 203, column 31 to line 207, column 7)",
                                                      " (in 'LEMMA', line 203, column 6 to line 207, column 7)",
                                                      " (in 'LEMMA', line 201, column 21 to line 208, column 5)",
                                                      " (in 'LEMMA', line 201, column 4 to line 208, column 5)",
                                                      " (in 'LEMMA', line 209, column 23 to line 211, column 5)",
                                                      " (in 'LEMMA', line 209, column 4 to line 211, column 5)",
                                                      " (in 'LEMMA', line 212, column 4 to column 28)",
                                                      " (in 'LEMMA', line 213, column 4 to column 24)",
                                                      " (in 'LEMMA', line 215, column 6 to column 48)",
                                                      " (in 'LEMMA', line 214, column 33 to line 216, column 5)",
                                                      " (in 'LEMMA', line 214, column 4 to line 216, column 5)",
                                                      " (in 'LEMMA', line 217, column 4 to column 28)",
                                                      " (in 'LEMMA', line 218, column 4 to column 24)",
                                                      " (in 'LEMMA', line 220, column 6 to column 66)",
                                                      " (in 'LEMMA', line 219, column 59 to line 221, column 5)",
                                                      " (in 'LEMMA', line 219, column 4 to line 221, column 5)",
                                                      " (in 'LEMMA', line 223, column 6 to column 91)",
                                                      " (in 'LEMMA', line 224, column 6 to column 32)",
                                                      " (in 'LEMMA', line 225, column 6 to column 60)",
                                                      " (in 'LEMMA', line 229, column 8 to column 100)",
                                                      " (in 'LEMMA', line 228, column 13 to line 230, column 7)",
                                                      " (in 'LEMMA', line 227, column 8 to column 68)",
                                                      " (in 'LEMMA', line 226, column 39 to line 228, column 7)",
                                                      " (in 'LEMMA', line 226, column 6 to line 230, column 7)",
                                                      " (in 'LEMMA', line 231, column 6 to column 31)",
                                                      " (in 'LEMMA', line 232, column 6 to column 60)",
                                                      " (in 'LEMMA', line 238, column 6 to column 74)",
                                                      " (in 'LEMMA', line 239, column 6 to column 76)",
                                                      " (in 'LEMMA', line 240, column 6 to column 85)",
                                                      " (in 'LEMMA', line 241, column 6 to column 110)",
                                                      " (in 'LEMMA', line 242, column 6 to column 106)",
                                                      " (in 'LEMMA', line 243, column 6 to column 87)",
                                                      " (in 'LEMMA', line 244, column 6 to column 124)",
                                                      " (in 'LEMMA', line 245, column 6 to column 94)",
                                                      " (in 'LEMMA', line 246, column 6 to column 114)",
                                                      " (in 'LEMMA', line 247, column 6 to column 183)",
                                                      " (in 'LEMMA', line 248, column 6 to column 183)",
                                                      " (in 'LEMMA', line 249, column 6 to column 71)",
                                                      " (in 'LEMMA', line 250, column 6 to column 71)",
                                                      " (in 'LEMMA', line 251, column 6 to column 54)",
                                                      " (in 'LEMMA', line 252, column 6 to column 54)",
                                                      " (in 'LEMMA', line 253, column 6 to column 77)",
                                                      " (in 'LEMMA', line 254, column 6 to column 79)",
                                                      " (in 'LEMMA', line 255, column 6 to column 37)",
                                                      " (in 'LEMMA', line 256, column 6 to column 43)",
                                                      " (in 'LEMMA', line 257, column 6 to column 125)",
                                                      " (in 'LEMMA', line 258, column 6 to column 48)",
                                                      " (in 'LEMMA', line 259, column 6 to column 48)",
                                                      " (in 'LEMMA', line 263, column 8 to column 105)",
                                                      " (in 'LEMMA', line 264, column 8 to column 105)",
                                                      " (in 'LEMMA', line 265, column 8 to column 77)",
                                                      " (in 'LEMMA', line 266, column 8 to column 77)",
                                                      " (in 'LEMMA', line 267, column 8 to column 90)",
                                                      " (in 'LEMMA', line 268, column 8 to column 90)",
                                                      " (in 'LEMMA', line 269, column 8 to column 91)",
                                                      " (in 'LEMMA', line 270, column 8 to column 184)",
                                                      " (in 'LEMMA', line 271, column 8 to column 210)",
                                                      " (in 'LEMMA', line 273, column 10 to column 232)",
                                                      " (in 'LEMMA', line 272, column 36 to line 274, column 9)",
                                                      " (in 'LEMMA', line 272, column 8 to line 274, column 9)",
                                                      " (in 'LEMMA', line 275, column 8 to column 108)",
                                                      " (in 'LEMMA', line 276, column 8 to column 108)",
                                                      " (in 'LEMMA', line 277, column 8 to column 65)",
                                                      " (in 'LEMMA', line 278, column 8 to column 65)",
                                                      " (in 'LEMMA', line 285, column 12 to column 29)",
                                                      " (in 'LEMMA', line 287, column 12 to column 97)",
                                                      " (in 'LEMMA', line 284, column 41 to line 288, column 11)",
                                                      " (in 'LEMMA', line 284, column 10 to line 288, column 11)",
                                                      " (in 'LEMMA', line 290, column 12 to column 43)",
                                                      " (in 'LEMMA', line 293, column 16 to column 36)",
                                                      " (in 'LEMMA', line 296, column 20 to column 42)",
                                                      " (in 'LEMMA', line 295, column 67 to line 297, column 19)",
                                                      " (in 'LEMMA', line 295, column 18 to line 297, column 19)",
                                                      " (in 'LEMMA', line 294, column 45 to line 298, column 17)",
                                                      " (in 'LEMMA', line 294, column 16 to line 298, column 17)",
                                                      " (in 'LEMMA', line 300, column 18 to column 196)",
                                                      " (in 'LEMMA', line 302, column 20 to column 166)",
                                                      " (in 'LEMMA', line 304, column 20 to column 35)",
                                                      " (in 'LEMMA', line 301, column 31 to line 305, column 19)",
                                                      " (in 'LEMMA', line 301, column 18 to line 305, column 19)",
                                                      " (in 'LEMMA', line 299, column 42 to line 307, column 17)",
                                                      " (in 'LEMMA', line 299, column 16 to line 307, column 17)",
                                                      " (in 'LEMMA', line 308, column 16 to column 88)",
                                                      " (in 'LEMMA', line 309, column 16 to column 34)",
                                                      " (in 'LEMMA', line 292, column 37 to line 310, column 15)",
                                                      " (in 'LEMMA', line 292, column 14 to line 310, column 15)",
                                                      " (in 'LEMMA', line 291, column 40 to line 311, column 13)",
                                                      " (in 'LEMMA', line 291, column 12 to line 311, column 13)",
                                                      " (in 'LEMMA', line 289, column 33 to line 312, column 11)",
                                                      " (in 'LEMMA', line 289, column 10 to line 312, column 11)",
                                                      " (in 'LEMMA', line 324, column 16 to column 126)",
                                                      " (in 'LEMMA', line 322, column 55 to line 325, column 15)",
                                                      " (in 'LEMMA', line 322, column 14 to line 325, column 15)",
                                                      " (in 'LEMMA', line 222, column 22 to line 326, column 5)",
                                                      " (in 'LEMMA', line 222, column 4 to line 326, column 5)",
                                                      " (in 'LEMMA', line 328, column 6 to column 38)",
                                                      " (in 'LEMMA', line 329, column 6 to column 110)",
                                                      " (in 'LEMMA', line 330, column 6 to column 24)",
                                                      " (in 'LEMMA', line 331, column 6 to column 23)",
                                                      " (in 'LEMMA', line 327, column 44 to line 332, column 5)",
                                                      " (in 'LEMMA', line 327, column 4 to line 332, column 5)",
                                                      " (in 'LEMMA', line 338, column 4 to column 78)",
                                                      " (in 'LEMMA', line 339, column 4 to column 50)",
                                                      " (in 'LEMMA', line 340, column 4 to column 85)",
                                                      " (in 'LEMMA', line 342, column 4 to column 102)",
                                                      " (in 'LEMMA', line 343, column 4 to column 50)",
                                                      " (in 'LEMMA', line 141, column 2 to line 344, column 3)",
                                                      " (in 'LEMMA', line 400, column 2 to column 44)",
                                                      " (in 'LEMMA', line 401, column 2 to column 26)",
                                                      " (in 'LEMMA', line 402, column 2 to column 26)",
                                                      " (in 'LEMMA', line 415, column 6 to column 51)",
                                                      " (in 'LEMMA', line 414, column 32 to line 416, column 5)",
                                                      " (in 'LEMMA', line 414, column 4 to line 416, column 5)",
                                                      " (in 'LEMMA', line 413, column 9 to line 417, column 3)",
                                                      " (in 'LEMMA', line 410, column 8 to column 53)",
                                                      " (in 'LEMMA', line 409, column 13 to line 411, column 7)",
                                                      " (in 'LEMMA', line 407, column 10 to column 104)",
                                                      " (in 'LEMMA', line 406, column 25 to line 408, column 9)",
                                                      " (in 'LEMMA', line 406, column 8 to line 408, column 9)",
                                                      " (in 'LEMMA', line 405, column 27 to line 409, column 7)",
                                                      " (in 'LEMMA', line 405, column 6 to line 411, column 7)",
                                                      " (in 'LEMMA', line 404, column 32 to line 412, column 5)",
                                                      " (in 'LEMMA', line 404, column 4 to line 412, column 5)",
                                                      " (in 'LEMMA', line 403, column 19 to line 413, column 3)",
                                                      " (in 'LEMMA', line 403, column 2 to line 417, column 3)",
                                                      " (in 'LEMMA', line 419, column 4 to column 12)",
                                                      " (in 'LEMMA', line 421, column 6 to column 32)",
                                                      " (in 'LEMMA', line 422, column 6 to column 63)",
                                                      " (in 'LEMMA', line 423, column 6 to column 76)",
                                                      " (in 'LEMMA', line 420, column 21 to line 424, column 5)",
                                                      " (in 'LEMMA', line 420, column 4 to line 424, column 5)",
                                                      " (in 'LEMMA', line 418, column 2 to line 425, column 3)",
                                                      " (in 'LEMMA', line 350, column 2 to column 73)",
                                                      " (in 'LEMMA', line 351, column 2 to column 73)",
                                                      " (in 'LEMMA', line 352, column 2 to column 76)",
                                                      " (in 'LEMMA', line 353, column 2 to column 76)",
                                                      " (in 'LEMMA', line 354, column 2 to column 79)",
                                                      " (in 'LEMMA', line 355, column 2 to column 79)",
                                                      " (in 'LEMMA', line 356, column 2 to column 112)",
                                                      " (in 'LEMMA', line 357, column 2 to column 49)",
                                                      " (in 'LEMMA', line 358, column 2 to column 58)",
                                                      " (in 'LEMMA', line 359, column 2 to column 73)",
                                                      " (in 'LEMMA', line 360, column 2 to column 85)",
                                                      " (in 'LEMMA', line 361, column 2 to column 73)",
                                                      " (in 'LEMMA', line 362, column 2 to column 55)",
                                                      " (in 'LEMMA', line 363, column 2 to column 64)",
                                                      " (in 'LEMMA', line 364, column 2 to column 67)",
                                                      " (in 'LEMMA', line 366, column 2 to column 88)",
                                                      " (in 'LEMMA', line 370, column 4 to column 86)",
                                                      " (in 'LEMMA', line 369, column 27 to line 371, column 3)",
                                                      " (in 'LEMMA', line 369, column 2 to line 371, column 3)",
                                                      " (in 'LEMMA', line 374, column 2 to column 45)",
                                                      " (in 'LEMMA', line 396, column 4 to column 30)",
                                                      " (in 'LEMMA', line 395, column 9 to line 397, column 3)",
                                                      " (in 'LEMMA', line 390, column 8 to column 111)",
                                                      " (in 'LEMMA', line 389, column 27 to line 391, column 7)",
                                                      " (in 'LEMMA', line 389, column 6 to line 391, column 7)",
                                                      " (in 'LEMMA', line 392, column 6 to column 43)",
                                                      " (in 'LEMMA', line 393, column 6 to column 49)",
                                                      " (in 'LEMMA', line 388, column 32 to line 394, column 5)",
                                                      " (in 'LEMMA', line 388, column 4 to line 394, column 5)",
                                                      " (in 'LEMMA', line 387, column 31 to line 395, column 3)",
                                                      " (in 'LEMMA', line 387, column 9 to line 397, column 3)",
                                                      " (in 'LEMMA', line 385, column 4 to column 41)",
                                                      " (in 'LEMMA', line 386, column 4 to column 47)",
                                                      " (in 'LEMMA', line 384, column 31 to line 387, column 3)",
                                                      " (in 'LEMMA', line 384, column 9 to line 397, column 3)",
                                                      " (in 'LEMMA', line 379, column 8 to column 111)",
                                                      " (in 'LEMMA', line 378, column 27 to line 380, column 7)",
                                                      " (in 'LEMMA', line 378, column 6 to line 380, column 7)",
                                                      " (in 'LEMMA', line 377, column 32 to line 381, column 5)",
                                                      " (in 'LEMMA', line 377, column 4 to line 381, column 5)",
                                                      " (in 'LEMMA', line 382, column 4 to column 83)",
                                                      " (in 'LEMMA', line 383, column 4 to column 97)",
                                                      " (in 'LEMMA', line 375, column 24 to line 384, column 3)",
                                                      " (in 'LEMMA', line 375, column 2 to line 397, column 3)",
                                                      " (in 'LEMMA', line 7, column 2 to column 26)",
                                                      " (in 'LEMMA', line 8, column 20 to column 30)",
                                                      " (in 'LEMMA', line 8, column 2 to column 32)",
                                                      " (in 'LEMMA', line 9, column 2 to column 25)",
                                                      " (in 'LEMMA', line 10, column 21 to column 31)",
                                                      " (in 'LEMMA', line 10, column 33 to column 41)",
                                                      " (in 'LEMMA', line 10, column 2 to column 43)",
                                                      " (in 'LEMMA', line 11, column 21 to column 31)",
                                                      " (in 'LEMMA', line 11, column 33 to column 41)",
                                                      " (in 'LEMMA', line 11, column 2 to column 52)",
                                                      " (in 'LEMMA', line 12, column 2 to column 18)",
                                                      " (in 'LEMMA', line 13, column 2 to column 23)",
                                                      " (in 'LEMMA', line 16, column 2 to column 38)",
                                                      " (in 'LEMMA', line 17, column 2 to column 41)",
                                                      " (in 'LEMMA', line 18, column 2 to column 38)",
                                                      " (in 'LEMMA', line 19, column 2 to column 41)",
                                                      " (in 'LEMMA', line 20, column 2 to column 39)",
                                                      " (in 'LEMMA', line 21, column 2 to column 42)",
                                                      " (in 'LEMMA', line 22, column 2 to column 39)",
                                                      " (in 'LEMMA', line 23, column 2 to column 42)",
                                                      " (in 'LEMMA', line 24, column 2 to column 40)",
                                                      " (in 'LEMMA', line 25, column 2 to column 43)",
                                                      " (in 'LEMMA', line 26, column 2 to column 40)",
                                                      " (in 'LEMMA', line 27, column 2 to column 43)",
                                                      " (in 'LEMMA', line 28, column 2 to column 33)",
                                                      " (in 'LEMMA', line 29, column 2 to column 36)",
                                                      " (in 'LEMMA', line 30, column 2 to column 32)",
                                                      " (in 'LEMMA', line 31, column 2 to column 35)",
                                                      " (in 'LEMMA', line 32, column 2 to column 30)",
                                                      " (in 'LEMMA', line 33, column 2 to column 33)",
                                                      " (in 'LEMMA', line 34, column 2 to column 38)",
                                                      " (in 'LEMMA', line 35, column 2 to column 41)",
                                                      " (in 'LEMMA', line 36, column 2 to column 38)",
                                                      " (in 'LEMMA', line 37, column 2 to column 41)",
                                                      " (in 'LEMMA', line 38, column 2 to column 42)",
                                                      " (in 'LEMMA', line 39, column 2 to column 45)",
                                                      " (in 'LEMMA', line 40, column 2 to column 51)",
                                                      " (in 'LEMMA', line 41, column 2 to column 54)",
                                                      " (in 'LEMMA', line 42, column 2 to column 35)",
                                                      " (in 'LEMMA', line 43, column 2 to column 38)",
                                                      " (in 'LEMMA', line 44, column 2 to column 36)",
                                                      " (in 'LEMMA', line 45, column 2 to column 39)",
                                                      " (in 'LEMMA', line 48, column 2 to column 44)",
                                                      " (in 'LEMMA', line 49, column 2 to column 47)",
                                                      " (in 'LEMMA', line 54, column 36 to column 46)",
                                                      " (in 'LEMMA', line 54, column 2 to column 48)",
                                                      " (in 'LEMMA', line 55, column 2 to column 40)",
                                                      " (in 'LEMMA', line 56, column 2 to column 46)",
                                                      " (in 'LEMMA', line 57, column 2 to column 46)",
                                                      " (in 'LEMMA', line 58, column 2 to column 48)",
                                                      " (in 'LEMMA', line 59, column 2 to column 29)",
                                                      " (in 'LEMMA', line 60, column 31 to column 33)",
                                                      " (in 'LEMMA', line 60, column 2 to column 35)",
                                                      " (in 'LEMMA', line 61, column 2 to column 40)",
                                                      " (in 'LEMMA', line 62, column 2 to column 40)",
                                                      " (in 'LEMMA', line 63, column 2 to column 53)",
                                                      " (in 'LEMMA', line 64, column 2 to column 53)",
                                                      " (in 'LEMMA', line 65, column 2 to column 35)",
                                                      " (in 'LEMMA', line 66, column 2 to column 35)",
                                                      " (in 'LEMMA', line 67, column 2 to column 50)",
                                                      " (in 'LEMMA', line 68, column 2 to column 50)",
                                                      " (in 'LEMMA', line 69, column 2 to column 37)",
                                                      " (in 'LEMMA', line 70, column 2 to column 22)",
                                                      " (in 'LEMMA', line 71, column 26 to column 32)",
                                                      " (in 'LEMMA', line 71, column 2 to column 34)",
                                                      " (in 'LEMMA', line 72, column 28 to column 34)",
                                                      " (in 'LEMMA', line 72, column 2 to column 36)",
                                                      " (in 'LEMMA', line 73, column 32 to column 38)",
                                                      " (in 'LEMMA', line 73, column 2 to column 40)",
                                                      " (in 'LEMMA', line 74, column 35 to column 41)",
                                                      " (in 'LEMMA', line 74, column 2 to column 43)",
                                                      " (in 'LEMMA', line 75, column 2 to column 18)",
                                                      " (in 'LEMMA', line 76, column 2 to column 30)",
                                                      " (in 'LEMMA', line 77, column 2 to column 28)",
                                                      " (in 'LEMMA', line 82, column 2 to column 12)",
                                                      " (in 'LEMMA', line 83, column 2 to column 13)",
                                                      " (in 'LEMMA', line 84, column 2 to column 13)",
                                                      " (in 'LEMMA', line 85, column 2 to column 17)",
                                                      " (in 'LEMMA', line 86, column 2 to column 17)",
                                                      " (in 'LEMMA', line 87, column 2 to column 17)",
                                                      " (in 'LEMMA', line 88, column 2 to column 17)",
                                                      " (in 'LEMMA', line 89, column 2 to column 17)",
                                                      " (in 'LEMMA', line 90, column 2 to column 17)",
                                                      " (in 'LEMMA', line 91, column 2 to column 14)",
                                                      " (in 'LEMMA', line 92, column 2 to column 15)",
                                                      " (in 'LEMMA', line 94, column 2 to column 25)",
                                                      " (in 'LEMMA', line 95, column 2 to column 26)",
                                                      " (in 'LEMMA', line 96, column 2 to column 20)",
                                                      " (in 'LEMMA', line 97, column 2 to column 55)",
                                                      " (in 'LEMMA', line 114, column 30 to column 40)",
                                                      " (in 'LEMMA', line 120, column 34 to column 40)",
                                                      " (in 'LEMMA', line 123, column 20 to column 33)",
                                                      " (in 'LEMMA', line 123, column 34 to column 36)",
                                                      " (in 'LEMMA', line 124, column 20 to column 30)",
                                                      " (in 'LEMMA', line 124, column 31 to column 33)",
                                                      " (in 'LEMMA', line 125, column 24 to column 26)",
                                                      " (in 'LEMMA', line 126, column 24 to column 26)",
                                                      " (in 'LEMMA', line 127, column 24 to column 26)",
                                                      " (in 'LEMMA', line 128, column 24 to column 26)",
                                                      " (in 'LEMMA', line 129, column 23 to column 25)",
                                                      " (in 'LEMMA', line 133, column 31 to column 43)",
                                                      " (in 'LEMMA', line 400, column 9 to column 19)",
                                                      " (in 'LEMMA', line 400, column 20 to column 22)",
                                                      " (in 'LEMMA', line 401, column 22 to column 24)",
                                                      " (in 'LEMMA', line 402, column 22 to column 24)"};
#include <stan_meta_header.hpp>
class model_LEMMA final : public model_base_crtp<model_LEMMA> {
private:
  int nobs_types;
  std::vector<int> nobs;
  int nobs_max;
  std::vector<std::vector<int>> tobs;
  Eigen::Matrix<double, -1, -1> obs_data;
  int nt;
  double npop;
  double mu_duration_latent1;
  double sigma_duration_latent1;
  double mu_duration_latent2;
  double sigma_duration_latent2;
  double mu_duration_rec_mild;
  double sigma_duration_rec_mild;
  double mu_duration_pre_hosp;
  double sigma_duration_pre_hosp;
  double mu_duration_hosp_mod1;
  double sigma_duration_hosp_mod1;
  double mu_duration_hosp_mod2;
  double sigma_duration_hosp_mod2;
  double mu_frac_tested;
  double sigma_frac_tested;
  double mu_test_delay;
  double sigma_test_delay;
  double mu_Rt1_init;
  double sigma_Rt1_init;
  double mu_frac_hosp1_naive;
  double sigma_frac_hosp1_naive;
  double mu_trans_multiplier;
  double sigma_trans_multiplier;
  double mu_frac_hosp_multiplier;
  double sigma_frac_hosp_multiplier;
  double mu_duration_protection_infection;
  double sigma_duration_protection_infection;
  double mu_VE_infection1;
  double sigma_VE_infection1;
  double mu_immune_evasion;
  double sigma_immune_evasion;
  double mu_initial_exposed2_frac;
  double sigma_initial_exposed2_frac;
  std::vector<double> sigma_obs_est_inv;
  double frac_case2_growth_obs;
  double sigma_frac_case2_growth_obs;
  double variant2_crossover_days_obs;
  double sigma_variant2_crossover_days;
  double init_hosp1;
  std::vector<double> num_boosters;
  double booster_VE_infection1;
  double booster_VE_infection2;
  double booster_VE_severe_given_infection1;
  double booster_VE_severe_given_infection2;
  double frac_incidental1;
  double frac_incidental2;
  double VE_severe_given_infection1_init;
  double VE_severe_given_infection2_init;
  int variant2_introduction;
  int ninter;
  std::vector<double> t_inter;
  std::vector<double> len_inter;
  std::vector<double> mu_beta_inter;
  std::vector<double> sigma_beta_inter;
  int fit_to_data;
  int start_fit_frac;
  int end_fit_frac;
  int S;
  int E1;
  int E2;
  int Imild1;
  int Imild2;
  int Ipreh1;
  int Ipreh2;
  int Hmod1;
  int Hmod2;
  int P1;
  int P12;
  int ncompartments;
  int obs_hosp_census;
  int obs_cases;
  int nfrac_growth;
 
public:
  ~model_LEMMA() { }
  
  inline std::string model_name() const final { return "model_LEMMA"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-1-g67504470", "stancflags = "};
  }
  
  
  model_LEMMA(stan::io::var_context& context__,
              unsigned int random_seed__ = 0,
              std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_LEMMA_namespace::model_LEMMA";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 273;
      context__.validate_dims("data initialization","nobs_types","int",
          context__.to_vec());
      nobs_types = std::numeric_limits<int>::min();
      
      current_statement__ = 273;
      nobs_types = context__.vals_i("nobs_types")[(1 - 1)];
      current_statement__ = 273;
      current_statement__ = 273;
      check_greater_or_equal(function__, "nobs_types", nobs_types, 0);
      current_statement__ = 274;
      validate_non_negative_index("nobs", "nobs_types", nobs_types);
      current_statement__ = 275;
      context__.validate_dims("data initialization","nobs","int",
          context__.to_vec(nobs_types));
      nobs = std::vector<int>(nobs_types, std::numeric_limits<int>::min());
      
      current_statement__ = 275;
      assign(nobs, nil_index_list(), context__.vals_i("nobs"),
        "assigning variable nobs");
      current_statement__ = 275;
      for (int sym1__ = 1; sym1__ <= nobs_types; ++sym1__) {
        current_statement__ = 275;
        current_statement__ = 275;
        check_greater_or_equal(function__, "nobs[sym1__]",
                               nobs[(sym1__ - 1)], 0);}
      current_statement__ = 276;
      context__.validate_dims("data initialization","nobs_max","int",
          context__.to_vec());
      nobs_max = std::numeric_limits<int>::min();
      
      current_statement__ = 276;
      nobs_max = context__.vals_i("nobs_max")[(1 - 1)];
      current_statement__ = 276;
      current_statement__ = 276;
      check_greater_or_equal(function__, "nobs_max", nobs_max, 0);
      current_statement__ = 277;
      validate_non_negative_index("tobs", "nobs_types", nobs_types);
      current_statement__ = 278;
      validate_non_negative_index("tobs", "nobs_max", nobs_max);
      current_statement__ = 279;
      context__.validate_dims("data initialization","tobs","int",
          context__.to_vec(nobs_types, nobs_max));
      tobs = std::vector<std::vector<int>>(nobs_types, std::vector<int>(nobs_max, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> tobs_flat__;
        current_statement__ = 279;
        assign(tobs_flat__, nil_index_list(), context__.vals_i("tobs"),
          "assigning variable tobs_flat__");
        current_statement__ = 279;
        pos__ = 1;
        current_statement__ = 279;
        for (int sym1__ = 1; sym1__ <= nobs_max; ++sym1__) {
          current_statement__ = 279;
          for (int sym2__ = 1; sym2__ <= nobs_types; ++sym2__) {
            current_statement__ = 279;
            assign(tobs,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              tobs_flat__[(pos__ - 1)], "assigning variable tobs");
            current_statement__ = 279;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 279;
      for (int sym1__ = 1; sym1__ <= nobs_types; ++sym1__) {
        current_statement__ = 279;
        for (int sym2__ = 1; sym2__ <= nobs_max; ++sym2__) {
          current_statement__ = 279;
          current_statement__ = 279;
          check_greater_or_equal(function__, "tobs[sym1__, sym2__]",
                                 tobs[(sym1__ - 1)][(sym2__ - 1)], -1);}}
      current_statement__ = 280;
      validate_non_negative_index("obs_data", "nobs_types", nobs_types);
      current_statement__ = 281;
      validate_non_negative_index("obs_data", "nobs_max", nobs_max);
      current_statement__ = 282;
      context__.validate_dims("data initialization","obs_data","double",
          context__.to_vec(nobs_types, nobs_max));
      obs_data = Eigen::Matrix<double, -1, -1>(nobs_types, nobs_max);
      stan::math::fill(obs_data, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> obs_data_flat__;
        current_statement__ = 282;
        assign(obs_data_flat__, nil_index_list(),
          context__.vals_r("obs_data"), "assigning variable obs_data_flat__");
        current_statement__ = 282;
        pos__ = 1;
        current_statement__ = 282;
        for (int sym1__ = 1; sym1__ <= nobs_max; ++sym1__) {
          current_statement__ = 282;
          for (int sym2__ = 1; sym2__ <= nobs_types; ++sym2__) {
            current_statement__ = 282;
            assign(obs_data,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              obs_data_flat__[(pos__ - 1)], "assigning variable obs_data");
            current_statement__ = 282;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 282;
      for (int sym1__ = 1; sym1__ <= nobs_types; ++sym1__) {
        current_statement__ = 282;
        for (int sym2__ = 1; sym2__ <= nobs_max; ++sym2__) {
          current_statement__ = 282;
          current_statement__ = 282;
          check_greater_or_equal(function__, "obs_data[sym1__, sym2__]",
                                 rvalue(obs_data,
                                   cons_list(index_uni(sym1__),
                                     cons_list(index_uni(sym2__),
                                       nil_index_list())), "obs_data"), 
                                 -1.0);}}
      current_statement__ = 283;
      context__.validate_dims("data initialization","nt","int",
          context__.to_vec());
      nt = std::numeric_limits<int>::min();
      
      current_statement__ = 283;
      nt = context__.vals_i("nt")[(1 - 1)];
      current_statement__ = 283;
      current_statement__ = 283;
      check_greater_or_equal(function__, "nt", nt, 0);
      current_statement__ = 284;
      context__.validate_dims("data initialization","npop","double",
          context__.to_vec());
      npop = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 284;
      npop = context__.vals_r("npop")[(1 - 1)];
      current_statement__ = 284;
      current_statement__ = 284;
      check_greater_or_equal(function__, "npop", npop, 0.0);
      current_statement__ = 285;
      context__.validate_dims("data initialization","mu_duration_latent1",
          "double",context__.to_vec());
      mu_duration_latent1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 285;
      mu_duration_latent1 = context__.vals_r("mu_duration_latent1")[(1 - 1)];
      current_statement__ = 285;
      current_statement__ = 285;
      check_greater_or_equal(function__, "mu_duration_latent1",
                             mu_duration_latent1, 1.0);
      current_statement__ = 286;
      context__.validate_dims("data initialization","sigma_duration_latent1",
          "double",context__.to_vec());
      sigma_duration_latent1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 286;
      sigma_duration_latent1 = context__.vals_r("sigma_duration_latent1")[
          (1 - 1)];
      current_statement__ = 286;
      current_statement__ = 286;
      check_greater_or_equal(function__, "sigma_duration_latent1",
                             sigma_duration_latent1, 0.0);
      current_statement__ = 287;
      context__.validate_dims("data initialization","mu_duration_latent2",
          "double",context__.to_vec());
      mu_duration_latent2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 287;
      mu_duration_latent2 = context__.vals_r("mu_duration_latent2")[(1 - 1)];
      current_statement__ = 287;
      current_statement__ = 287;
      check_greater_or_equal(function__, "mu_duration_latent2",
                             mu_duration_latent2, 1.0);
      current_statement__ = 288;
      context__.validate_dims("data initialization","sigma_duration_latent2",
          "double",context__.to_vec());
      sigma_duration_latent2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 288;
      sigma_duration_latent2 = context__.vals_r("sigma_duration_latent2")[
          (1 - 1)];
      current_statement__ = 288;
      current_statement__ = 288;
      check_greater_or_equal(function__, "sigma_duration_latent2",
                             sigma_duration_latent2, 0.0);
      current_statement__ = 289;
      context__.validate_dims("data initialization","mu_duration_rec_mild",
          "double",context__.to_vec());
      mu_duration_rec_mild = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 289;
      mu_duration_rec_mild = context__.vals_r("mu_duration_rec_mild")[
          (1 - 1)];
      current_statement__ = 289;
      current_statement__ = 289;
      check_greater_or_equal(function__, "mu_duration_rec_mild",
                             mu_duration_rec_mild, 1.0);
      current_statement__ = 290;
      context__.validate_dims("data initialization",
          "sigma_duration_rec_mild","double",context__.to_vec());
      sigma_duration_rec_mild = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 290;
      sigma_duration_rec_mild = context__.vals_r("sigma_duration_rec_mild")[
          (1 - 1)];
      current_statement__ = 290;
      current_statement__ = 290;
      check_greater_or_equal(function__, "sigma_duration_rec_mild",
                             sigma_duration_rec_mild, 0.0);
      current_statement__ = 291;
      context__.validate_dims("data initialization","mu_duration_pre_hosp",
          "double",context__.to_vec());
      mu_duration_pre_hosp = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 291;
      mu_duration_pre_hosp = context__.vals_r("mu_duration_pre_hosp")[
          (1 - 1)];
      current_statement__ = 291;
      current_statement__ = 291;
      check_greater_or_equal(function__, "mu_duration_pre_hosp",
                             mu_duration_pre_hosp, 1.0);
      current_statement__ = 292;
      context__.validate_dims("data initialization",
          "sigma_duration_pre_hosp","double",context__.to_vec());
      sigma_duration_pre_hosp = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 292;
      sigma_duration_pre_hosp = context__.vals_r("sigma_duration_pre_hosp")[
          (1 - 1)];
      current_statement__ = 292;
      current_statement__ = 292;
      check_greater_or_equal(function__, "sigma_duration_pre_hosp",
                             sigma_duration_pre_hosp, 0.0);
      current_statement__ = 293;
      context__.validate_dims("data initialization","mu_duration_hosp_mod1",
          "double",context__.to_vec());
      mu_duration_hosp_mod1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 293;
      mu_duration_hosp_mod1 = context__.vals_r("mu_duration_hosp_mod1")[
          (1 - 1)];
      current_statement__ = 293;
      current_statement__ = 293;
      check_greater_or_equal(function__, "mu_duration_hosp_mod1",
                             mu_duration_hosp_mod1, 1.0);
      current_statement__ = 294;
      context__.validate_dims("data initialization",
          "sigma_duration_hosp_mod1","double",context__.to_vec());
      sigma_duration_hosp_mod1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 294;
      sigma_duration_hosp_mod1 = context__.vals_r("sigma_duration_hosp_mod1")[
          (1 - 1)];
      current_statement__ = 294;
      current_statement__ = 294;
      check_greater_or_equal(function__, "sigma_duration_hosp_mod1",
                             sigma_duration_hosp_mod1, 0.0);
      current_statement__ = 295;
      context__.validate_dims("data initialization","mu_duration_hosp_mod2",
          "double",context__.to_vec());
      mu_duration_hosp_mod2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 295;
      mu_duration_hosp_mod2 = context__.vals_r("mu_duration_hosp_mod2")[
          (1 - 1)];
      current_statement__ = 295;
      current_statement__ = 295;
      check_greater_or_equal(function__, "mu_duration_hosp_mod2",
                             mu_duration_hosp_mod2, 1.0);
      current_statement__ = 296;
      context__.validate_dims("data initialization",
          "sigma_duration_hosp_mod2","double",context__.to_vec());
      sigma_duration_hosp_mod2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 296;
      sigma_duration_hosp_mod2 = context__.vals_r("sigma_duration_hosp_mod2")[
          (1 - 1)];
      current_statement__ = 296;
      current_statement__ = 296;
      check_greater_or_equal(function__, "sigma_duration_hosp_mod2",
                             sigma_duration_hosp_mod2, 0.0);
      current_statement__ = 297;
      context__.validate_dims("data initialization","mu_frac_tested",
          "double",context__.to_vec());
      mu_frac_tested = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 297;
      mu_frac_tested = context__.vals_r("mu_frac_tested")[(1 - 1)];
      current_statement__ = 297;
      current_statement__ = 297;
      check_greater_or_equal(function__, "mu_frac_tested", mu_frac_tested,
                             0.0);
      current_statement__ = 298;
      context__.validate_dims("data initialization","sigma_frac_tested",
          "double",context__.to_vec());
      sigma_frac_tested = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 298;
      sigma_frac_tested = context__.vals_r("sigma_frac_tested")[(1 - 1)];
      current_statement__ = 298;
      current_statement__ = 298;
      check_greater_or_equal(function__, "sigma_frac_tested",
                             sigma_frac_tested, 0.0);
      current_statement__ = 299;
      context__.validate_dims("data initialization","mu_test_delay","double",
          context__.to_vec());
      mu_test_delay = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 299;
      mu_test_delay = context__.vals_r("mu_test_delay")[(1 - 1)];
      current_statement__ = 299;
      current_statement__ = 299;
      check_greater_or_equal(function__, "mu_test_delay", mu_test_delay, 0.0);
      current_statement__ = 300;
      context__.validate_dims("data initialization","sigma_test_delay",
          "double",context__.to_vec());
      sigma_test_delay = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 300;
      sigma_test_delay = context__.vals_r("sigma_test_delay")[(1 - 1)];
      current_statement__ = 300;
      current_statement__ = 300;
      check_greater_or_equal(function__, "sigma_test_delay",
                             sigma_test_delay, 0.0);
      current_statement__ = 301;
      context__.validate_dims("data initialization","mu_Rt1_init","double",
          context__.to_vec());
      mu_Rt1_init = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 301;
      mu_Rt1_init = context__.vals_r("mu_Rt1_init")[(1 - 1)];
      current_statement__ = 301;
      current_statement__ = 301;
      check_greater_or_equal(function__, "mu_Rt1_init", mu_Rt1_init, 0.0);
      current_statement__ = 302;
      context__.validate_dims("data initialization","sigma_Rt1_init",
          "double",context__.to_vec());
      sigma_Rt1_init = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 302;
      sigma_Rt1_init = context__.vals_r("sigma_Rt1_init")[(1 - 1)];
      current_statement__ = 302;
      current_statement__ = 302;
      check_greater_or_equal(function__, "sigma_Rt1_init", sigma_Rt1_init,
                             0.0);
      current_statement__ = 303;
      context__.validate_dims("data initialization","mu_frac_hosp1_naive",
          "double",context__.to_vec());
      mu_frac_hosp1_naive = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 303;
      mu_frac_hosp1_naive = context__.vals_r("mu_frac_hosp1_naive")[(1 - 1)];
      current_statement__ = 303;
      current_statement__ = 303;
      check_greater_or_equal(function__, "mu_frac_hosp1_naive",
                             mu_frac_hosp1_naive, 0.0);
      current_statement__ = 304;
      context__.validate_dims("data initialization","sigma_frac_hosp1_naive",
          "double",context__.to_vec());
      sigma_frac_hosp1_naive = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 304;
      sigma_frac_hosp1_naive = context__.vals_r("sigma_frac_hosp1_naive")[
          (1 - 1)];
      current_statement__ = 304;
      current_statement__ = 304;
      check_greater_or_equal(function__, "sigma_frac_hosp1_naive",
                             sigma_frac_hosp1_naive, 0.0);
      current_statement__ = 305;
      context__.validate_dims("data initialization","mu_trans_multiplier",
          "double",context__.to_vec());
      mu_trans_multiplier = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 305;
      mu_trans_multiplier = context__.vals_r("mu_trans_multiplier")[(1 - 1)];
      current_statement__ = 305;
      current_statement__ = 305;
      check_greater_or_equal(function__, "mu_trans_multiplier",
                             mu_trans_multiplier, 0.0);
      current_statement__ = 306;
      context__.validate_dims("data initialization","sigma_trans_multiplier",
          "double",context__.to_vec());
      sigma_trans_multiplier = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 306;
      sigma_trans_multiplier = context__.vals_r("sigma_trans_multiplier")[
          (1 - 1)];
      current_statement__ = 306;
      current_statement__ = 306;
      check_greater_or_equal(function__, "sigma_trans_multiplier",
                             sigma_trans_multiplier, 0.0);
      current_statement__ = 307;
      context__.validate_dims("data initialization",
          "mu_frac_hosp_multiplier","double",context__.to_vec());
      mu_frac_hosp_multiplier = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 307;
      mu_frac_hosp_multiplier = context__.vals_r("mu_frac_hosp_multiplier")[
          (1 - 1)];
      current_statement__ = 307;
      current_statement__ = 307;
      check_greater_or_equal(function__, "mu_frac_hosp_multiplier",
                             mu_frac_hosp_multiplier, 0.0);
      current_statement__ = 308;
      context__.validate_dims("data initialization",
          "sigma_frac_hosp_multiplier","double",context__.to_vec());
      sigma_frac_hosp_multiplier = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 308;
      sigma_frac_hosp_multiplier = context__.vals_r("sigma_frac_hosp_multiplier")[
          (1 - 1)];
      current_statement__ = 308;
      current_statement__ = 308;
      check_greater_or_equal(function__, "sigma_frac_hosp_multiplier",
                             sigma_frac_hosp_multiplier, 0.0);
      current_statement__ = 309;
      context__.validate_dims("data initialization",
          "mu_duration_protection_infection","double",context__.to_vec());
      mu_duration_protection_infection = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 309;
      mu_duration_protection_infection = context__.vals_r("mu_duration_protection_infection")[
          (1 - 1)];
      current_statement__ = 309;
      current_statement__ = 309;
      check_greater_or_equal(function__, "mu_duration_protection_infection",
                             mu_duration_protection_infection, 0.0);
      current_statement__ = 310;
      context__.validate_dims("data initialization",
          "sigma_duration_protection_infection","double",context__.to_vec());
      sigma_duration_protection_infection = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 310;
      sigma_duration_protection_infection = context__.vals_r("sigma_duration_protection_infection")[
          (1 - 1)];
      current_statement__ = 310;
      current_statement__ = 310;
      check_greater_or_equal(function__,
                             "sigma_duration_protection_infection",
                             sigma_duration_protection_infection, 0.0);
      current_statement__ = 311;
      context__.validate_dims("data initialization","mu_VE_infection1",
          "double",context__.to_vec());
      mu_VE_infection1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 311;
      mu_VE_infection1 = context__.vals_r("mu_VE_infection1")[(1 - 1)];
      current_statement__ = 311;
      current_statement__ = 311;
      check_greater_or_equal(function__, "mu_VE_infection1",
                             mu_VE_infection1, 0.0);
      current_statement__ = 312;
      context__.validate_dims("data initialization","sigma_VE_infection1",
          "double",context__.to_vec());
      sigma_VE_infection1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 312;
      sigma_VE_infection1 = context__.vals_r("sigma_VE_infection1")[(1 - 1)];
      current_statement__ = 312;
      current_statement__ = 312;
      check_greater_or_equal(function__, "sigma_VE_infection1",
                             sigma_VE_infection1, 0.0);
      current_statement__ = 313;
      context__.validate_dims("data initialization","mu_immune_evasion",
          "double",context__.to_vec());
      mu_immune_evasion = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 313;
      mu_immune_evasion = context__.vals_r("mu_immune_evasion")[(1 - 1)];
      current_statement__ = 313;
      current_statement__ = 313;
      check_greater_or_equal(function__, "mu_immune_evasion",
                             mu_immune_evasion, 0.0);
      current_statement__ = 314;
      context__.validate_dims("data initialization","sigma_immune_evasion",
          "double",context__.to_vec());
      sigma_immune_evasion = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 314;
      sigma_immune_evasion = context__.vals_r("sigma_immune_evasion")[
          (1 - 1)];
      current_statement__ = 314;
      current_statement__ = 314;
      check_greater_or_equal(function__, "sigma_immune_evasion",
                             sigma_immune_evasion, 0.0);
      current_statement__ = 315;
      context__.validate_dims("data initialization",
          "mu_initial_exposed2_frac","double",context__.to_vec());
      mu_initial_exposed2_frac = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 315;
      mu_initial_exposed2_frac = context__.vals_r("mu_initial_exposed2_frac")[
          (1 - 1)];
      current_statement__ = 315;
      current_statement__ = 315;
      check_greater_or_equal(function__, "mu_initial_exposed2_frac",
                             mu_initial_exposed2_frac, 0.0);
      current_statement__ = 316;
      context__.validate_dims("data initialization",
          "sigma_initial_exposed2_frac","double",context__.to_vec());
      sigma_initial_exposed2_frac = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 316;
      sigma_initial_exposed2_frac = context__.vals_r("sigma_initial_exposed2_frac")[
          (1 - 1)];
      current_statement__ = 316;
      current_statement__ = 316;
      check_greater_or_equal(function__, "sigma_initial_exposed2_frac",
                             sigma_initial_exposed2_frac, 0.0);
      current_statement__ = 317;
      validate_non_negative_index("sigma_obs_est_inv", "nobs_types",
                                  nobs_types);
      current_statement__ = 318;
      context__.validate_dims("data initialization","sigma_obs_est_inv",
          "double",context__.to_vec(nobs_types));
      sigma_obs_est_inv = std::vector<double>(nobs_types, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 318;
      assign(sigma_obs_est_inv, nil_index_list(),
        context__.vals_r("sigma_obs_est_inv"),
        "assigning variable sigma_obs_est_inv");
      current_statement__ = 318;
      for (int sym1__ = 1; sym1__ <= nobs_types; ++sym1__) {
        current_statement__ = 318;
        current_statement__ = 318;
        check_greater_or_equal(function__, "sigma_obs_est_inv[sym1__]",
                               sigma_obs_est_inv[(sym1__ - 1)], 0.0);}
      current_statement__ = 319;
      context__.validate_dims("data initialization","frac_case2_growth_obs",
          "double",context__.to_vec());
      frac_case2_growth_obs = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 319;
      frac_case2_growth_obs = context__.vals_r("frac_case2_growth_obs")[
          (1 - 1)];
      current_statement__ = 319;
      current_statement__ = 319;
      check_greater_or_equal(function__, "frac_case2_growth_obs",
                             frac_case2_growth_obs, 0.0);
      current_statement__ = 320;
      context__.validate_dims("data initialization",
          "sigma_frac_case2_growth_obs","double",context__.to_vec());
      sigma_frac_case2_growth_obs = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 320;
      sigma_frac_case2_growth_obs = context__.vals_r("sigma_frac_case2_growth_obs")[
          (1 - 1)];
      current_statement__ = 320;
      current_statement__ = 320;
      check_greater_or_equal(function__, "sigma_frac_case2_growth_obs",
                             sigma_frac_case2_growth_obs, 0.0);
      current_statement__ = 321;
      context__.validate_dims("data initialization",
          "variant2_crossover_days_obs","double",context__.to_vec());
      variant2_crossover_days_obs = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 321;
      variant2_crossover_days_obs = context__.vals_r("variant2_crossover_days_obs")[
          (1 - 1)];
      current_statement__ = 321;
      current_statement__ = 321;
      check_greater_or_equal(function__, "variant2_crossover_days_obs",
                             variant2_crossover_days_obs, 0.0);
      current_statement__ = 322;
      context__.validate_dims("data initialization",
          "sigma_variant2_crossover_days","double",context__.to_vec());
      sigma_variant2_crossover_days = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 322;
      sigma_variant2_crossover_days = context__.vals_r("sigma_variant2_crossover_days")[
          (1 - 1)];
      current_statement__ = 322;
      current_statement__ = 322;
      check_greater_or_equal(function__, "sigma_variant2_crossover_days",
                             sigma_variant2_crossover_days, 0.0);
      current_statement__ = 323;
      context__.validate_dims("data initialization","init_hosp1","double",
          context__.to_vec());
      init_hosp1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 323;
      init_hosp1 = context__.vals_r("init_hosp1")[(1 - 1)];
      current_statement__ = 323;
      current_statement__ = 323;
      check_greater_or_equal(function__, "init_hosp1", init_hosp1, 0.0);
      current_statement__ = 324;
      validate_non_negative_index("num_boosters", "nt", nt);
      current_statement__ = 325;
      context__.validate_dims("data initialization","num_boosters","double",
          context__.to_vec(nt));
      num_boosters = std::vector<double>(nt, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 325;
      assign(num_boosters, nil_index_list(),
        context__.vals_r("num_boosters"), "assigning variable num_boosters");
      current_statement__ = 325;
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        current_statement__ = 325;
        current_statement__ = 325;
        check_greater_or_equal(function__, "num_boosters[sym1__]",
                               num_boosters[(sym1__ - 1)], 0.0);}
      current_statement__ = 326;
      context__.validate_dims("data initialization","booster_VE_infection1",
          "double",context__.to_vec());
      booster_VE_infection1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 326;
      booster_VE_infection1 = context__.vals_r("booster_VE_infection1")[
          (1 - 1)];
      current_statement__ = 326;
      current_statement__ = 326;
      check_greater_or_equal(function__, "booster_VE_infection1",
                             booster_VE_infection1, 0.0);
      current_statement__ = 327;
      context__.validate_dims("data initialization","booster_VE_infection2",
          "double",context__.to_vec());
      booster_VE_infection2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 327;
      booster_VE_infection2 = context__.vals_r("booster_VE_infection2")[
          (1 - 1)];
      current_statement__ = 327;
      current_statement__ = 327;
      check_greater_or_equal(function__, "booster_VE_infection2",
                             booster_VE_infection2, 0.0);
      current_statement__ = 328;
      context__.validate_dims("data initialization",
          "booster_VE_severe_given_infection1","double",context__.to_vec());
      booster_VE_severe_given_infection1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 328;
      booster_VE_severe_given_infection1 = context__.vals_r("booster_VE_severe_given_infection1")[
          (1 - 1)];
      current_statement__ = 328;
      current_statement__ = 328;
      check_greater_or_equal(function__,
                             "booster_VE_severe_given_infection1",
                             booster_VE_severe_given_infection1, 0.0);
      current_statement__ = 329;
      context__.validate_dims("data initialization",
          "booster_VE_severe_given_infection2","double",context__.to_vec());
      booster_VE_severe_given_infection2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 329;
      booster_VE_severe_given_infection2 = context__.vals_r("booster_VE_severe_given_infection2")[
          (1 - 1)];
      current_statement__ = 329;
      current_statement__ = 329;
      check_greater_or_equal(function__,
                             "booster_VE_severe_given_infection2",
                             booster_VE_severe_given_infection2, 0.0);
      current_statement__ = 330;
      context__.validate_dims("data initialization","frac_incidental1",
          "double",context__.to_vec());
      frac_incidental1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 330;
      frac_incidental1 = context__.vals_r("frac_incidental1")[(1 - 1)];
      current_statement__ = 330;
      current_statement__ = 330;
      check_greater_or_equal(function__, "frac_incidental1",
                             frac_incidental1, 0.0);
      current_statement__ = 331;
      context__.validate_dims("data initialization","frac_incidental2",
          "double",context__.to_vec());
      frac_incidental2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 331;
      frac_incidental2 = context__.vals_r("frac_incidental2")[(1 - 1)];
      current_statement__ = 331;
      current_statement__ = 331;
      check_greater_or_equal(function__, "frac_incidental2",
                             frac_incidental2, 0.0);
      current_statement__ = 332;
      context__.validate_dims("data initialization",
          "VE_severe_given_infection1_init","double",context__.to_vec());
      VE_severe_given_infection1_init = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 332;
      VE_severe_given_infection1_init = context__.vals_r("VE_severe_given_infection1_init")[
          (1 - 1)];
      current_statement__ = 332;
      current_statement__ = 332;
      check_greater_or_equal(function__, "VE_severe_given_infection1_init",
                             VE_severe_given_infection1_init, 0.0);
      current_statement__ = 333;
      context__.validate_dims("data initialization",
          "VE_severe_given_infection2_init","double",context__.to_vec());
      VE_severe_given_infection2_init = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 333;
      VE_severe_given_infection2_init = context__.vals_r("VE_severe_given_infection2_init")[
          (1 - 1)];
      current_statement__ = 333;
      current_statement__ = 333;
      check_greater_or_equal(function__, "VE_severe_given_infection2_init",
                             VE_severe_given_infection2_init, 0.0);
      current_statement__ = 334;
      context__.validate_dims("data initialization","variant2_introduction",
          "int",context__.to_vec());
      variant2_introduction = std::numeric_limits<int>::min();
      
      current_statement__ = 334;
      variant2_introduction = context__.vals_i("variant2_introduction")[
          (1 - 1)];
      current_statement__ = 334;
      current_statement__ = 334;
      check_greater_or_equal(function__, "variant2_introduction",
                             variant2_introduction, 0);
      current_statement__ = 335;
      context__.validate_dims("data initialization","ninter","int",
          context__.to_vec());
      ninter = std::numeric_limits<int>::min();
      
      current_statement__ = 335;
      ninter = context__.vals_i("ninter")[(1 - 1)];
      current_statement__ = 335;
      current_statement__ = 335;
      check_greater_or_equal(function__, "ninter", ninter, 0);
      current_statement__ = 336;
      validate_non_negative_index("t_inter", "ninter", ninter);
      current_statement__ = 337;
      context__.validate_dims("data initialization","t_inter","double",
          context__.to_vec(ninter));
      t_inter = std::vector<double>(ninter, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 337;
      assign(t_inter, nil_index_list(), context__.vals_r("t_inter"),
        "assigning variable t_inter");
      current_statement__ = 337;
      for (int sym1__ = 1; sym1__ <= ninter; ++sym1__) {
        current_statement__ = 337;
        current_statement__ = 337;
        check_greater_or_equal(function__, "t_inter[sym1__]",
                               t_inter[(sym1__ - 1)], 1.0);}
      current_statement__ = 338;
      validate_non_negative_index("len_inter", "ninter", ninter);
      current_statement__ = 339;
      context__.validate_dims("data initialization","len_inter","double",
          context__.to_vec(ninter));
      len_inter = std::vector<double>(ninter, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 339;
      assign(len_inter, nil_index_list(), context__.vals_r("len_inter"),
        "assigning variable len_inter");
      current_statement__ = 339;
      for (int sym1__ = 1; sym1__ <= ninter; ++sym1__) {
        current_statement__ = 339;
        current_statement__ = 339;
        check_greater_or_equal(function__, "len_inter[sym1__]",
                               len_inter[(sym1__ - 1)], 1.0);}
      current_statement__ = 340;
      validate_non_negative_index("mu_beta_inter", "ninter", ninter);
      current_statement__ = 341;
      context__.validate_dims("data initialization","mu_beta_inter","double",
          context__.to_vec(ninter));
      mu_beta_inter = std::vector<double>(ninter, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 341;
      assign(mu_beta_inter, nil_index_list(),
        context__.vals_r("mu_beta_inter"), "assigning variable mu_beta_inter");
      current_statement__ = 341;
      for (int sym1__ = 1; sym1__ <= ninter; ++sym1__) {
        current_statement__ = 341;
        current_statement__ = 341;
        check_greater_or_equal(function__, "mu_beta_inter[sym1__]",
                               mu_beta_inter[(sym1__ - 1)], 0.0);}
      current_statement__ = 342;
      validate_non_negative_index("sigma_beta_inter", "ninter", ninter);
      current_statement__ = 343;
      context__.validate_dims("data initialization","sigma_beta_inter",
          "double",context__.to_vec(ninter));
      sigma_beta_inter = std::vector<double>(ninter, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 343;
      assign(sigma_beta_inter, nil_index_list(),
        context__.vals_r("sigma_beta_inter"),
        "assigning variable sigma_beta_inter");
      current_statement__ = 343;
      for (int sym1__ = 1; sym1__ <= ninter; ++sym1__) {
        current_statement__ = 343;
        current_statement__ = 343;
        check_greater_or_equal(function__, "sigma_beta_inter[sym1__]",
                               sigma_beta_inter[(sym1__ - 1)], 0.0);}
      current_statement__ = 344;
      context__.validate_dims("data initialization","fit_to_data","int",
          context__.to_vec());
      fit_to_data = std::numeric_limits<int>::min();
      
      current_statement__ = 344;
      fit_to_data = context__.vals_i("fit_to_data")[(1 - 1)];
      current_statement__ = 345;
      context__.validate_dims("data initialization","start_fit_frac","int",
          context__.to_vec());
      start_fit_frac = std::numeric_limits<int>::min();
      
      current_statement__ = 345;
      start_fit_frac = context__.vals_i("start_fit_frac")[(1 - 1)];
      current_statement__ = 345;
      current_statement__ = 345;
      check_greater_or_equal(function__, "start_fit_frac", start_fit_frac, 0);
      current_statement__ = 346;
      context__.validate_dims("data initialization","end_fit_frac","int",
          context__.to_vec());
      end_fit_frac = std::numeric_limits<int>::min();
      
      current_statement__ = 346;
      end_fit_frac = context__.vals_i("end_fit_frac")[(1 - 1)];
      current_statement__ = 346;
      current_statement__ = 346;
      check_greater_or_equal(function__, "end_fit_frac", end_fit_frac, 0);
      current_statement__ = 347;
      S = std::numeric_limits<int>::min();
      
      current_statement__ = 347;
      S = 1;
      current_statement__ = 348;
      E1 = std::numeric_limits<int>::min();
      
      current_statement__ = 348;
      E1 = 2;
      current_statement__ = 349;
      E2 = std::numeric_limits<int>::min();
      
      current_statement__ = 349;
      E2 = 3;
      current_statement__ = 350;
      Imild1 = std::numeric_limits<int>::min();
      
      current_statement__ = 350;
      Imild1 = 4;
      current_statement__ = 351;
      Imild2 = std::numeric_limits<int>::min();
      
      current_statement__ = 351;
      Imild2 = 5;
      current_statement__ = 352;
      Ipreh1 = std::numeric_limits<int>::min();
      
      current_statement__ = 352;
      Ipreh1 = 6;
      current_statement__ = 353;
      Ipreh2 = std::numeric_limits<int>::min();
      
      current_statement__ = 353;
      Ipreh2 = 7;
      current_statement__ = 354;
      Hmod1 = std::numeric_limits<int>::min();
      
      current_statement__ = 354;
      Hmod1 = 8;
      current_statement__ = 355;
      Hmod2 = std::numeric_limits<int>::min();
      
      current_statement__ = 355;
      Hmod2 = 9;
      current_statement__ = 356;
      P1 = std::numeric_limits<int>::min();
      
      current_statement__ = 356;
      P1 = 10;
      current_statement__ = 357;
      P12 = std::numeric_limits<int>::min();
      
      current_statement__ = 357;
      P12 = 11;
      current_statement__ = 358;
      ncompartments = std::numeric_limits<int>::min();
      
      current_statement__ = 358;
      ncompartments = 11;
      current_statement__ = 359;
      obs_hosp_census = std::numeric_limits<int>::min();
      
      current_statement__ = 359;
      obs_hosp_census = 1;
      current_statement__ = 360;
      obs_cases = std::numeric_limits<int>::min();
      
      current_statement__ = 360;
      obs_cases = 2;
      current_statement__ = 361;
      nfrac_growth = std::numeric_limits<int>::min();
      
      current_statement__ = 361;
      nfrac_growth = ((end_fit_frac - start_fit_frac) + 1);
      current_statement__ = 362;
      validate_non_negative_index("sigma_obs", "nobs_types", nobs_types);
      current_statement__ = 363;
      validate_non_negative_index("beta_multiplier", "ninter", ninter);
      current_statement__ = 364;
      validate_non_negative_index("x", "ncompartments", ncompartments);
      current_statement__ = 365;
      validate_non_negative_index("x", "nt", nt);
      current_statement__ = 366;
      validate_non_negative_index("sim_data", "nobs_types", nobs_types);
      current_statement__ = 367;
      validate_non_negative_index("sim_data", "nt", nt);
      current_statement__ = 368;
      validate_non_negative_index("new_cases1", "nt", nt);
      current_statement__ = 369;
      validate_non_negative_index("new_cases2", "nt", nt);
      current_statement__ = 370;
      validate_non_negative_index("soon_positive1", "nt", nt);
      current_statement__ = 371;
      validate_non_negative_index("soon_positive2", "nt", nt);
      current_statement__ = 372;
      validate_non_negative_index("beta", "nt", nt);
      current_statement__ = 373;
      validate_non_negative_index("frac_case2", "nfrac_growth", nfrac_growth);
      current_statement__ = 374;
      validate_non_negative_index("sim_data_with_error", "nobs_types",
                                  nobs_types);
      current_statement__ = 375;
      validate_non_negative_index("sim_data_with_error", "nt", nt);
      current_statement__ = 376;
      validate_non_negative_index("Rt1", "nt", nt);
      current_statement__ = 377;
      validate_non_negative_index("Rt2", "nt", nt);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += nobs_types;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += ninter;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_LEMMA_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      local_scalar_t__ duration_latent1;
      duration_latent1 = DUMMY_VAR__;
      
      current_statement__ = 1;
      duration_latent1 = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        duration_latent1 = stan::math::lb_constrain(duration_latent1, 1.0,
                             lp__);
      } else {
        current_statement__ = 1;
        duration_latent1 = stan::math::lb_constrain(duration_latent1, 1.0);
      }
      local_scalar_t__ duration_latent2;
      duration_latent2 = DUMMY_VAR__;
      
      current_statement__ = 2;
      duration_latent2 = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        duration_latent2 = stan::math::lb_constrain(duration_latent2, 1.0,
                             lp__);
      } else {
        current_statement__ = 2;
        duration_latent2 = stan::math::lb_constrain(duration_latent2, 1.0);
      }
      local_scalar_t__ duration_rec_mild;
      duration_rec_mild = DUMMY_VAR__;
      
      current_statement__ = 3;
      duration_rec_mild = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        duration_rec_mild = stan::math::lub_constrain(duration_rec_mild, 1.0,
                              999.0, lp__);
      } else {
        current_statement__ = 3;
        duration_rec_mild = stan::math::lub_constrain(duration_rec_mild, 1.0,
                              999.0);
      }
      local_scalar_t__ duration_pre_hosp;
      duration_pre_hosp = DUMMY_VAR__;
      
      current_statement__ = 4;
      duration_pre_hosp = in__.scalar();
      current_statement__ = 4;
      if (jacobian__) {
        current_statement__ = 4;
        duration_pre_hosp = stan::math::lb_constrain(duration_pre_hosp, 1.0,
                              lp__);
      } else {
        current_statement__ = 4;
        duration_pre_hosp = stan::math::lb_constrain(duration_pre_hosp, 1.0);
      }
      local_scalar_t__ duration_hosp_mod1;
      duration_hosp_mod1 = DUMMY_VAR__;
      
      current_statement__ = 5;
      duration_hosp_mod1 = in__.scalar();
      current_statement__ = 5;
      if (jacobian__) {
        current_statement__ = 5;
        duration_hosp_mod1 = stan::math::lb_constrain(duration_hosp_mod1,
                               1.0, lp__);
      } else {
        current_statement__ = 5;
        duration_hosp_mod1 = stan::math::lb_constrain(duration_hosp_mod1, 1.0);
      }
      local_scalar_t__ duration_hosp_mod2;
      duration_hosp_mod2 = DUMMY_VAR__;
      
      current_statement__ = 6;
      duration_hosp_mod2 = in__.scalar();
      current_statement__ = 6;
      if (jacobian__) {
        current_statement__ = 6;
        duration_hosp_mod2 = stan::math::lb_constrain(duration_hosp_mod2,
                               1.0, lp__);
      } else {
        current_statement__ = 6;
        duration_hosp_mod2 = stan::math::lb_constrain(duration_hosp_mod2, 1.0);
      }
      local_scalar_t__ duration_protection_infection;
      duration_protection_infection = DUMMY_VAR__;
      
      current_statement__ = 7;
      duration_protection_infection = in__.scalar();
      current_statement__ = 7;
      if (jacobian__) {
        current_statement__ = 7;
        duration_protection_infection = stan::math::lb_constrain(
                                          duration_protection_infection, 1.0,
                                          lp__);
      } else {
        current_statement__ = 7;
        duration_protection_infection = stan::math::lb_constrain(
                                          duration_protection_infection, 1.0);
      }
      local_scalar_t__ frac_hosp1_naive;
      frac_hosp1_naive = DUMMY_VAR__;
      
      current_statement__ = 8;
      frac_hosp1_naive = in__.scalar();
      current_statement__ = 8;
      if (jacobian__) {
        current_statement__ = 8;
        frac_hosp1_naive = stan::math::lub_constrain(frac_hosp1_naive, 0.001,
                             1.0, lp__);
      } else {
        current_statement__ = 8;
        frac_hosp1_naive = stan::math::lub_constrain(frac_hosp1_naive, 0.001,
                             1.0);
      }
      local_scalar_t__ frac_hosp_multiplier;
      frac_hosp_multiplier = DUMMY_VAR__;
      
      current_statement__ = 9;
      frac_hosp_multiplier = in__.scalar();
      current_statement__ = 9;
      if (jacobian__) {
        current_statement__ = 9;
        frac_hosp_multiplier = stan::math::lb_constrain(frac_hosp_multiplier,
                                 0.001, lp__);
      } else {
        current_statement__ = 9;
        frac_hosp_multiplier = stan::math::lb_constrain(frac_hosp_multiplier,
                                 0.001);
      }
      local_scalar_t__ frac_tested;
      frac_tested = DUMMY_VAR__;
      
      current_statement__ = 10;
      frac_tested = in__.scalar();
      current_statement__ = 10;
      if (jacobian__) {
        current_statement__ = 10;
        frac_tested = stan::math::lub_constrain(frac_tested, 0.001, 1.0, lp__);
      } else {
        current_statement__ = 10;
        frac_tested = stan::math::lub_constrain(frac_tested, 0.001, 1.0);
      }
      local_scalar_t__ initial_exposed2_frac;
      initial_exposed2_frac = DUMMY_VAR__;
      
      current_statement__ = 11;
      initial_exposed2_frac = in__.scalar();
      current_statement__ = 11;
      if (jacobian__) {
        current_statement__ = 11;
        initial_exposed2_frac = stan::math::lub_constrain(
                                  initial_exposed2_frac, 1e-6, 1, lp__);
      } else {
        current_statement__ = 11;
        initial_exposed2_frac = stan::math::lub_constrain(
                                  initial_exposed2_frac, 1e-6, 1);
      }
      std::vector<local_scalar_t__> sigma_obs;
      sigma_obs = std::vector<local_scalar_t__>(nobs_types, DUMMY_VAR__);
      
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= nobs_types; ++sym1__) {
        current_statement__ = 12;
        assign(sigma_obs, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable sigma_obs");}
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= nobs_types; ++sym1__) {
        current_statement__ = 12;
        if (jacobian__) {
          current_statement__ = 12;
          assign(sigma_obs, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma_obs[(sym1__ - 1)], 0.001, lp__),
            "assigning variable sigma_obs");
        } else {
          current_statement__ = 12;
          assign(sigma_obs, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma_obs[(sym1__ - 1)], 0.001),
            "assigning variable sigma_obs");
        }}
      local_scalar_t__ test_delay;
      test_delay = DUMMY_VAR__;
      
      current_statement__ = 13;
      test_delay = in__.scalar();
      current_statement__ = 13;
      if (jacobian__) {
        current_statement__ = 13;
        test_delay = stan::math::lb_constrain(test_delay, 1.0, lp__);
      } else {
        current_statement__ = 13;
        test_delay = stan::math::lb_constrain(test_delay, 1.0);
      }
      local_scalar_t__ Rt1_init;
      Rt1_init = DUMMY_VAR__;
      
      current_statement__ = 14;
      Rt1_init = in__.scalar();
      current_statement__ = 14;
      if (jacobian__) {
        current_statement__ = 14;
        Rt1_init = stan::math::lub_constrain(Rt1_init, 0.001, 9.9, lp__);
      } else {
        current_statement__ = 14;
        Rt1_init = stan::math::lub_constrain(Rt1_init, 0.001, 9.9);
      }
      local_scalar_t__ trans_multiplier;
      trans_multiplier = DUMMY_VAR__;
      
      current_statement__ = 15;
      trans_multiplier = in__.scalar();
      current_statement__ = 15;
      if (jacobian__) {
        current_statement__ = 15;
        trans_multiplier = stan::math::lub_constrain(trans_multiplier, 0.001,
                             3.0, lp__);
      } else {
        current_statement__ = 15;
        trans_multiplier = stan::math::lub_constrain(trans_multiplier, 0.001,
                             3.0);
      }
      local_scalar_t__ VE_infection1;
      VE_infection1 = DUMMY_VAR__;
      
      current_statement__ = 16;
      VE_infection1 = in__.scalar();
      current_statement__ = 16;
      if (jacobian__) {
        current_statement__ = 16;
        VE_infection1 = stan::math::lub_constrain(VE_infection1, 0.001, 1.0,
                          lp__);
      } else {
        current_statement__ = 16;
        VE_infection1 = stan::math::lub_constrain(VE_infection1, 0.001, 1.0);
      }
      local_scalar_t__ immune_evasion;
      immune_evasion = DUMMY_VAR__;
      
      current_statement__ = 17;
      immune_evasion = in__.scalar();
      current_statement__ = 17;
      if (jacobian__) {
        current_statement__ = 17;
        immune_evasion = stan::math::lub_constrain(immune_evasion, 0.001,
                           1.0, lp__);
      } else {
        current_statement__ = 17;
        immune_evasion = stan::math::lub_constrain(immune_evasion, 0.001, 1.0);
      }
      std::vector<local_scalar_t__> beta_multiplier;
      beta_multiplier = std::vector<local_scalar_t__>(ninter, DUMMY_VAR__);
      
      current_statement__ = 18;
      for (int sym1__ = 1; sym1__ <= ninter; ++sym1__) {
        current_statement__ = 18;
        assign(beta_multiplier,
          cons_list(index_uni(sym1__), nil_index_list()), in__.scalar(),
          "assigning variable beta_multiplier");}
      current_statement__ = 18;
      for (int sym1__ = 1; sym1__ <= ninter; ++sym1__) {
        current_statement__ = 18;
        if (jacobian__) {
          current_statement__ = 18;
          assign(beta_multiplier,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(beta_multiplier[(sym1__ - 1)], 0.0, lp__),
            "assigning variable beta_multiplier");
        } else {
          current_statement__ = 18;
          assign(beta_multiplier,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(beta_multiplier[(sym1__ - 1)], 0.0),
            "assigning variable beta_multiplier");
        }}
      Eigen::Matrix<local_scalar_t__, -1, -1> x;
      x = Eigen::Matrix<local_scalar_t__, -1, -1>(ncompartments, nt);
      stan::math::fill(x, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> sim_data;
      sim_data = Eigen::Matrix<local_scalar_t__, -1, -1>(nobs_types, nt);
      stan::math::fill(sim_data, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, 1, -1> new_cases1;
      new_cases1 = Eigen::Matrix<local_scalar_t__, 1, -1>(nt);
      stan::math::fill(new_cases1, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, 1, -1> new_cases2;
      new_cases2 = Eigen::Matrix<local_scalar_t__, 1, -1>(nt);
      stan::math::fill(new_cases2, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, 1, -1> soon_positive1;
      soon_positive1 = Eigen::Matrix<local_scalar_t__, 1, -1>(nt);
      stan::math::fill(soon_positive1, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, 1, -1> soon_positive2;
      soon_positive2 = Eigen::Matrix<local_scalar_t__, 1, -1>(nt);
      stan::math::fill(soon_positive2, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> beta;
      beta = std::vector<local_scalar_t__>(nt, DUMMY_VAR__);
      
      local_scalar_t__ frac_hosp2_naive;
      frac_hosp2_naive = DUMMY_VAR__;
      
      local_scalar_t__ frac_case2_growth;
      frac_case2_growth = DUMMY_VAR__;
      
      local_scalar_t__ variant2_crossover_days;
      variant2_crossover_days = DUMMY_VAR__;
      
      Eigen::Matrix<local_scalar_t__, -1, 1> frac_case2;
      frac_case2 = Eigen::Matrix<local_scalar_t__, -1, 1>(nfrac_growth);
      stan::math::fill(frac_case2, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> frac_case2_growth_coef;
      frac_case2_growth_coef = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
      stan::math::fill(frac_case2_growth_coef, DUMMY_VAR__);
      
      local_scalar_t__ beta_0;
      beta_0 = DUMMY_VAR__;
      
      current_statement__ = 36;
      for (int it = 1; it <= nt; ++it) {
        current_statement__ = 34;
        for (int itype = 1; itype <= nobs_types; ++itype) {
          current_statement__ = 32;
          assign(sim_data,
            cons_list(index_uni(itype),
              cons_list(index_uni(it), nil_index_list())), 0.0,
            "assigning variable sim_data");}}
      {
        local_scalar_t__ newE1;
        newE1 = DUMMY_VAR__;
        
        local_scalar_t__ newE2;
        newE2 = DUMMY_VAR__;
        
        local_scalar_t__ newI1;
        newI1 = DUMMY_VAR__;
        
        local_scalar_t__ newI2;
        newI2 = DUMMY_VAR__;
        
        local_scalar_t__ frac_init_E;
        frac_init_E = DUMMY_VAR__;
        
        local_scalar_t__ avg_duration;
        avg_duration = DUMMY_VAR__;
        
        local_scalar_t__ frac_boosters_to_susceptible;
        frac_boosters_to_susceptible = DUMMY_VAR__;
        
        local_scalar_t__ increased_severity_protection;
        increased_severity_protection = DUMMY_VAR__;
        
        local_scalar_t__ frac_increased_severity_protection;
        frac_increased_severity_protection = DUMMY_VAR__;
        
        local_scalar_t__ new_admits1;
        new_admits1 = DUMMY_VAR__;
        
        local_scalar_t__ new_admits2;
        new_admits2 = DUMMY_VAR__;
        
        local_scalar_t__ VE_severe_given_infection1;
        VE_severe_given_infection1 = DUMMY_VAR__;
        
        local_scalar_t__ VE_severe_given_infection2;
        VE_severe_given_infection2 = DUMMY_VAR__;
        
        local_scalar_t__ lost_protection_infection1;
        lost_protection_infection1 = DUMMY_VAR__;
        
        local_scalar_t__ lost_protection_infection12;
        lost_protection_infection12 = DUMMY_VAR__;
        
        local_scalar_t__ frac_hosp_init;
        frac_hosp_init = DUMMY_VAR__;
        
        local_scalar_t__ frac_preh_init;
        frac_preh_init = DUMMY_VAR__;
        
        local_scalar_t__ S2;
        S2 = DUMMY_VAR__;
        
        local_scalar_t__ frac_E2_from_S;
        frac_E2_from_S = DUMMY_VAR__;
        
        local_scalar_t__ frac_E2_from_P1;
        frac_E2_from_P1 = DUMMY_VAR__;
        
        local_scalar_t__ frac_hosp1;
        frac_hosp1 = DUMMY_VAR__;
        
        local_scalar_t__ frac_hosp2;
        frac_hosp2 = DUMMY_VAR__;
        
        local_scalar_t__ frac_boosters_to_S;
        frac_boosters_to_S = DUMMY_VAR__;
        
        local_scalar_t__ frac_boosters_to_P1;
        frac_boosters_to_P1 = DUMMY_VAR__;
        
        local_scalar_t__ new_P12_from_S;
        new_P12_from_S = DUMMY_VAR__;
        
        local_scalar_t__ new_P1_from_S;
        new_P1_from_S = DUMMY_VAR__;
        
        local_scalar_t__ new_P12_from_P1;
        new_P12_from_P1 = DUMMY_VAR__;
        
        local_scalar_t__ S_increased_severe_protection;
        S_increased_severe_protection = DUMMY_VAR__;
        
        local_scalar_t__ P1_increased_severe_protection;
        P1_increased_severe_protection = DUMMY_VAR__;
        
        local_scalar_t__ frac_increased_severity_protection1;
        frac_increased_severity_protection1 = DUMMY_VAR__;
        
        local_scalar_t__ frac_increased_severity_protection2;
        frac_increased_severity_protection2 = DUMMY_VAR__;
        
        int max_compartment;
        max_compartment = std::numeric_limits<int>::min();
        
        int index;
        index = std::numeric_limits<int>::min();
        
        local_scalar_t__ recovered1;
        recovered1 = DUMMY_VAR__;
        
        current_statement__ = 71;
        validate_non_negative_index("X", "nfrac_growth", nfrac_growth);
        Eigen::Matrix<local_scalar_t__, -1, -1> X;
        X = Eigen::Matrix<local_scalar_t__, -1, -1>(nfrac_growth, 2);
        stan::math::fill(X, DUMMY_VAR__);
        
        current_statement__ = 73;
        frac_hosp2_naive = (frac_hosp1_naive * frac_hosp_multiplier);
        current_statement__ = 76;
        if (logical_gt(frac_hosp2_naive, 1)) {
          current_statement__ = 74;
          std::stringstream errmsg_stream__;
          errmsg_stream__ << "frac_hosp2_naive > 1";
          throw std::domain_error(errmsg_stream__.str());
        } 
        current_statement__ = 77;
        VE_severe_given_infection1 = VE_severe_given_infection1_init;
        current_statement__ = 78;
        VE_severe_given_infection2 = VE_severe_given_infection2_init;
        current_statement__ = 79;
        frac_hosp_init = (frac_hosp1_naive *
                           (1 - VE_severe_given_infection1));
        current_statement__ = 80;
        frac_preh_init = ((frac_hosp_init * duration_pre_hosp) /
                           (duration_pre_hosp + duration_rec_mild));
        current_statement__ = 81;
        avg_duration = ((frac_hosp_init * duration_pre_hosp) +
                         ((1 - frac_hosp_init) * duration_rec_mild));
        current_statement__ = 82;
        assign(x,
          cons_list(index_omni(), cons_list(index_uni(1), nil_index_list())),
          rep_vector(0.0, ncompartments), "assigning variable x");
        current_statement__ = 83;
        frac_init_E = (duration_latent1 / (duration_latent1 + avg_duration));
        current_statement__ = 84;
        assign(x,
          cons_list(index_uni(E1), cons_list(index_uni(1), nil_index_list())),
          (((duration_latent1 / duration_hosp_mod1) * init_hosp1) /
            frac_hosp_init), "assigning variable x");
        current_statement__ = 85;
        assign(x,
          cons_list(index_uni(Ipreh1),
            cons_list(index_uni(1), nil_index_list())),
          ((duration_pre_hosp / duration_hosp_mod1) * init_hosp1),
          "assigning variable x");
        current_statement__ = 86;
        assign(x,
          cons_list(index_uni(Imild1),
            cons_list(index_uni(1), nil_index_list())),
          (((duration_rec_mild / (Rt1_init * duration_latent1)) *
             rvalue(x,
               cons_list(index_uni(E1),
                 cons_list(index_uni(1), nil_index_list())), "x")) -
            rvalue(x,
              cons_list(index_uni(Ipreh1),
                cons_list(index_uni(1), nil_index_list())), "x")),
          "assigning variable x");
        current_statement__ = 87;
        assign(x,
          cons_list(index_uni(Hmod1),
            cons_list(index_uni(1), nil_index_list())), init_hosp1,
          "assigning variable x");
        current_statement__ = 88;
        assign(x,
          cons_list(index_uni(P1), cons_list(index_uni(1), nil_index_list())),
          ((npop * VE_infection1) * immune_evasion), "assigning variable x");
        current_statement__ = 89;
        assign(x,
          cons_list(index_uni(P12),
            cons_list(index_uni(1), nil_index_list())),
          ((npop * VE_infection1) * (1 - immune_evasion)),
          "assigning variable x");
        current_statement__ = 90;
        assign(x,
          cons_list(index_uni(S), cons_list(index_uni(1), nil_index_list())),
          (npop -
            (((((rvalue(x,
                   cons_list(index_uni(E1),
                     cons_list(index_uni(1), nil_index_list())), "x") +
                  rvalue(x,
                    cons_list(index_uni(Imild1),
                      cons_list(index_uni(1), nil_index_list())), "x")) +
                 rvalue(x,
                   cons_list(index_uni(Ipreh1),
                     cons_list(index_uni(1), nil_index_list())), "x")) +
                rvalue(x,
                  cons_list(index_uni(Hmod1),
                    cons_list(index_uni(1), nil_index_list())), "x")) +
               rvalue(x,
                 cons_list(index_uni(P1),
                   cons_list(index_uni(1), nil_index_list())), "x")) +
              rvalue(x,
                cons_list(index_uni(P12),
                  cons_list(index_uni(1), nil_index_list())), "x"))),
          "assigning variable x");
        current_statement__ = 91;
        beta_0 = (Rt1_init /
                   ((rvalue(x,
                       cons_list(index_uni(S),
                         cons_list(index_uni(1), nil_index_list())), "x") /
                      npop) * duration_rec_mild));
        current_statement__ = 94;
        if (logical_lt(beta_0, 0)) {
          current_statement__ = 92;
          std::stringstream errmsg_stream__;
          errmsg_stream__ << "beta_0 < 0";
          throw std::domain_error(errmsg_stream__.str());
        } 
        current_statement__ = 100;
        for (int it = 1; it <= nt; ++it) {
          current_statement__ = 95;
          assign(beta, cons_list(index_uni(it), nil_index_list()), beta_0,
            "assigning variable beta");
          current_statement__ = 98;
          for (int iinter = 1; iinter <= ninter; ++iinter) {
            current_statement__ = 96;
            assign(beta, cons_list(index_uni(it), nil_index_list()),
              (beta[(it - 1)] *
                pow(beta_multiplier[(iinter - 1)],
                  inv_logit(
                    ((9.19024 / len_inter[(iinter - 1)]) *
                      (it -
                        (t_inter[(iinter - 1)] +
                          (len_inter[(iinter - 1)] / 2))))))),
              "assigning variable beta");}}
        current_statement__ = 102;
        if (logical_lt(
              rvalue(x,
                cons_list(index_uni(S),
                  cons_list(index_uni(1), nil_index_list())), "x"), -10)) {
          
        } 
        current_statement__ = 103;
        assign(soon_positive1, cons_list(index_uni(1), nil_index_list()),
          0.0, "assigning variable soon_positive1");
        current_statement__ = 104;
        assign(new_cases1, cons_list(index_uni(1), nil_index_list()), 0.0,
          "assigning variable new_cases1");
        current_statement__ = 107;
        if (logical_eq(tobs[(obs_cases - 1)][(1 - 1)], 1)) {
          current_statement__ = 105;
          std::stringstream errmsg_stream__;
          errmsg_stream__ << "Minimum tobs[obs_cases, :] is 2";
          throw std::domain_error(errmsg_stream__.str());
        } 
        current_statement__ = 108;
        assign(soon_positive2, cons_list(index_uni(1), nil_index_list()),
          0.0, "assigning variable soon_positive2");
        current_statement__ = 109;
        assign(new_cases2, cons_list(index_uni(1), nil_index_list()), 0.0,
          "assigning variable new_cases2");
        current_statement__ = 112;
        if (logical_lt((booster_VE_infection1 - booster_VE_infection2), 0)) {
          current_statement__ = 110;
          std::stringstream errmsg_stream__;
          errmsg_stream__ << "booster_VE_infection1 - booster_VE_infection2 < 0";
          throw std::domain_error(errmsg_stream__.str());
        } 
        current_statement__ = 191;
        for (int it = 1; it <= (nt - 1); ++it) {
          current_statement__ = 113;
          newE1 = stan::math::fmin(
                    rvalue(x,
                      cons_list(index_uni(S),
                        cons_list(index_uni(it), nil_index_list())), "x"),
                    (((beta[(it - 1)] *
                        rvalue(x,
                          cons_list(index_uni(S),
                            cons_list(index_uni(it), nil_index_list())), "x"))
                       *
                       (rvalue(x,
                          cons_list(index_uni(Imild1),
                            cons_list(index_uni(it), nil_index_list())), "x")
                         +
                         rvalue(x,
                           cons_list(index_uni(Ipreh1),
                             cons_list(index_uni(it), nil_index_list())),
                           "x"))) / npop));
          current_statement__ = 114;
          S2 = (rvalue(x,
                  cons_list(index_uni(S),
                    cons_list(index_uni(it), nil_index_list())), "x") +
                 rvalue(x,
                   cons_list(index_uni(P1),
                     cons_list(index_uni(it), nil_index_list())), "x"));
          current_statement__ = 115;
          newI1 = stan::math::fmin(
                    rvalue(x,
                      cons_list(index_uni(E1),
                        cons_list(index_uni(it), nil_index_list())), "x"),
                    (rvalue(x,
                       cons_list(index_uni(E1),
                         cons_list(index_uni(it), nil_index_list())), "x") /
                      duration_latent1));
          current_statement__ = 120;
          if (logical_eq(it, variant2_introduction)) {
            current_statement__ = 118;
            newE2 = (((rvalue(x,
                         cons_list(index_uni(E1),
                           cons_list(index_uni(it), nil_index_list())), "x")
                        + newE1) - newI1) * initial_exposed2_frac);
          } else {
            current_statement__ = 116;
            newE2 = stan::math::fmin(S2,
                      ((((beta[(it - 1)] * trans_multiplier) * S2) *
                         (rvalue(x,
                            cons_list(index_uni(Imild2),
                              cons_list(index_uni(it), nil_index_list())),
                            "x") +
                           rvalue(x,
                             cons_list(index_uni(Ipreh2),
                               cons_list(index_uni(it), nil_index_list())),
                             "x"))) / npop));
          }
          current_statement__ = 121;
          newE2 = stan::math::fmax(newE2, 0.0);
          current_statement__ = 122;
          newI2 = stan::math::fmin(
                    rvalue(x,
                      cons_list(index_uni(E2),
                        cons_list(index_uni(it), nil_index_list())), "x"),
                    (rvalue(x,
                       cons_list(index_uni(E2),
                         cons_list(index_uni(it), nil_index_list())), "x") /
                      duration_latent2));
          current_statement__ = 123;
          frac_boosters_to_S = (rvalue(x,
                                  cons_list(index_uni(S),
                                    cons_list(index_uni(it),
                                      nil_index_list())), "x") /
                                 ((rvalue(x,
                                     cons_list(index_uni(S),
                                       cons_list(index_uni(it),
                                         nil_index_list())), "x") +
                                    rvalue(x,
                                      cons_list(index_uni(P1),
                                        cons_list(index_uni(it),
                                          nil_index_list())), "x")) +
                                   rvalue(x,
                                     cons_list(index_uni(P12),
                                       cons_list(index_uni(it),
                                         nil_index_list())), "x")));
          current_statement__ = 124;
          frac_boosters_to_P1 = (rvalue(x,
                                   cons_list(index_uni(P1),
                                     cons_list(index_uni(it),
                                       nil_index_list())), "x") /
                                  ((rvalue(x,
                                      cons_list(index_uni(S),
                                        cons_list(index_uni(it),
                                          nil_index_list())), "x") +
                                     rvalue(x,
                                       cons_list(index_uni(P1),
                                         cons_list(index_uni(it),
                                           nil_index_list())), "x")) +
                                    rvalue(x,
                                      cons_list(index_uni(P12),
                                        cons_list(index_uni(it),
                                          nil_index_list())), "x")));
          current_statement__ = 125;
          new_P12_from_S = ((num_boosters[(it - 1)] * frac_boosters_to_S) *
                             booster_VE_infection2);
          current_statement__ = 126;
          new_P1_from_S = ((num_boosters[(it - 1)] * frac_boosters_to_S) *
                            (booster_VE_infection1 - booster_VE_infection2));
          current_statement__ = 127;
          S_increased_severe_protection = ((num_boosters[(it - 1)] *
                                             frac_boosters_to_S) *
                                            (1 - booster_VE_infection1));
          current_statement__ = 128;
          new_P12_from_P1 = ((num_boosters[(it - 1)] * frac_boosters_to_P1) *
                              booster_VE_infection2);
          current_statement__ = 129;
          P1_increased_severe_protection = (((num_boosters[(it - 1)] *
                                               frac_boosters_to_P1) *
                                              (1 - booster_VE_infection2)) +
                                             new_P1_from_S);
          current_statement__ = 130;
          frac_increased_severity_protection1 = (S_increased_severe_protection
                                                  /
                                                  (rvalue(x,
                                                     cons_list(index_uni(S),
                                                       cons_list(
                                                         index_uni(it),
                                                         nil_index_list())),
                                                     "x") + 1e-8));
          current_statement__ = 131;
          frac_increased_severity_protection2 = ((S_increased_severe_protection
                                                   +
                                                   P1_increased_severe_protection)
                                                  / S2);
          current_statement__ = 132;
          VE_severe_given_infection1 = ((booster_VE_severe_given_infection1 *
                                          frac_increased_severity_protection1)
                                         +
                                         (VE_severe_given_infection1 *
                                           (1 -
                                             frac_increased_severity_protection1)));
          current_statement__ = 133;
          VE_severe_given_infection2 = ((booster_VE_severe_given_infection2 *
                                          frac_increased_severity_protection2)
                                         +
                                         (VE_severe_given_infection2 *
                                           (1 -
                                             frac_increased_severity_protection2)));
          current_statement__ = 134;
          frac_hosp1 = (frac_hosp1_naive * (1 - VE_severe_given_infection1));
          current_statement__ = 135;
          frac_hosp2 = (frac_hosp2_naive * (1 - VE_severe_given_infection2));
          current_statement__ = 136;
          new_admits1 = (rvalue(x,
                           cons_list(index_uni(Ipreh1),
                             cons_list(index_uni(it), nil_index_list())),
                           "x") / duration_pre_hosp);
          current_statement__ = 137;
          new_admits2 = (rvalue(x,
                           cons_list(index_uni(Ipreh2),
                             cons_list(index_uni(it), nil_index_list())),
                           "x") / duration_pre_hosp);
          current_statement__ = 138;
          lost_protection_infection1 = (rvalue(x,
                                          cons_list(index_uni(P1),
                                            cons_list(index_uni(it),
                                              nil_index_list())), "x") /
                                         duration_protection_infection);
          current_statement__ = 139;
          lost_protection_infection12 = (rvalue(x,
                                           cons_list(index_uni(P12),
                                             cons_list(index_uni(it),
                                               nil_index_list())), "x") /
                                          duration_protection_infection);
          current_statement__ = 140;
          frac_E2_from_S = (rvalue(x,
                              cons_list(index_uni(S),
                                cons_list(index_uni(it), nil_index_list())),
                              "x") / S2);
          current_statement__ = 141;
          frac_E2_from_P1 = (1 - frac_E2_from_S);
          current_statement__ = 142;
          assign(x,
            cons_list(index_uni(S),
              cons_list(index_uni((it + 1)), nil_index_list())),
            (((((rvalue(x,
                   cons_list(index_uni(S),
                     cons_list(index_uni(it), nil_index_list())), "x") -
                  newE1) + lost_protection_infection1) -
                (newE2 * frac_E2_from_S)) - new_P12_from_S) - new_P1_from_S),
            "assigning variable x");
          current_statement__ = 143;
          assign(x,
            cons_list(index_uni(E1),
              cons_list(index_uni((it + 1)), nil_index_list())),
            ((rvalue(x,
                cons_list(index_uni(E1),
                  cons_list(index_uni(it), nil_index_list())), "x") + newE1)
              - newI1), "assigning variable x");
          current_statement__ = 144;
          assign(x,
            cons_list(index_uni(E2),
              cons_list(index_uni((it + 1)), nil_index_list())),
            ((rvalue(x,
                cons_list(index_uni(E2),
                  cons_list(index_uni(it), nil_index_list())), "x") + newE2)
              - newI2), "assigning variable x");
          current_statement__ = 145;
          assign(x,
            cons_list(index_uni(Imild1),
              cons_list(index_uni((it + 1)), nil_index_list())),
            ((rvalue(x,
                cons_list(index_uni(Imild1),
                  cons_list(index_uni(it), nil_index_list())), "x") +
               (newI1 * (1 - frac_hosp1))) -
              (rvalue(x,
                 cons_list(index_uni(Imild1),
                   cons_list(index_uni(it), nil_index_list())), "x") /
                duration_rec_mild)), "assigning variable x");
          current_statement__ = 146;
          assign(x,
            cons_list(index_uni(Imild2),
              cons_list(index_uni((it + 1)), nil_index_list())),
            ((rvalue(x,
                cons_list(index_uni(Imild2),
                  cons_list(index_uni(it), nil_index_list())), "x") +
               (newI2 * (1 - frac_hosp2))) -
              (rvalue(x,
                 cons_list(index_uni(Imild2),
                   cons_list(index_uni(it), nil_index_list())), "x") /
                duration_rec_mild)), "assigning variable x");
          current_statement__ = 147;
          assign(x,
            cons_list(index_uni(Ipreh1),
              cons_list(index_uni((it + 1)), nil_index_list())),
            ((rvalue(x,
                cons_list(index_uni(Ipreh1),
                  cons_list(index_uni(it), nil_index_list())), "x") +
               (newI1 * frac_hosp1)) - new_admits1), "assigning variable x");
          current_statement__ = 148;
          assign(x,
            cons_list(index_uni(Ipreh2),
              cons_list(index_uni((it + 1)), nil_index_list())),
            ((rvalue(x,
                cons_list(index_uni(Ipreh2),
                  cons_list(index_uni(it), nil_index_list())), "x") +
               (newI2 * frac_hosp2)) - new_admits2), "assigning variable x");
          current_statement__ = 149;
          assign(x,
            cons_list(index_uni(Hmod1),
              cons_list(index_uni((it + 1)), nil_index_list())),
            ((rvalue(x,
                cons_list(index_uni(Hmod1),
                  cons_list(index_uni(it), nil_index_list())), "x") +
               new_admits1) -
              (rvalue(x,
                 cons_list(index_uni(Hmod1),
                   cons_list(index_uni(it), nil_index_list())), "x") /
                duration_hosp_mod1)), "assigning variable x");
          current_statement__ = 150;
          assign(x,
            cons_list(index_uni(Hmod2),
              cons_list(index_uni((it + 1)), nil_index_list())),
            ((rvalue(x,
                cons_list(index_uni(Hmod2),
                  cons_list(index_uni(it), nil_index_list())), "x") +
               new_admits2) -
              (rvalue(x,
                 cons_list(index_uni(Hmod2),
                   cons_list(index_uni(it), nil_index_list())), "x") /
                duration_hosp_mod2)), "assigning variable x");
          current_statement__ = 151;
          recovered1 = ((rvalue(x,
                           cons_list(index_uni(Hmod1),
                             cons_list(index_uni(it), nil_index_list())),
                           "x") / duration_hosp_mod1) +
                         (rvalue(x,
                            cons_list(index_uni(Imild1),
                              cons_list(index_uni(it), nil_index_list())),
                            "x") / duration_rec_mild));
          current_statement__ = 152;
          assign(x,
            cons_list(index_uni(P1),
              cons_list(index_uni((it + 1)), nil_index_list())),
            ((((((rvalue(x,
                    cons_list(index_uni(P1),
                      cons_list(index_uni(it), nil_index_list())), "x") -
                   lost_protection_infection1) + lost_protection_infection12)
                 - (newE2 * frac_E2_from_P1)) + new_P1_from_S) -
               new_P12_from_P1) + (recovered1 * immune_evasion)),
            "assigning variable x");
          current_statement__ = 153;
          assign(x,
            cons_list(index_uni(P12),
              cons_list(index_uni((it + 1)), nil_index_list())),
            ((((((rvalue(x,
                    cons_list(index_uni(P12),
                      cons_list(index_uni(it), nil_index_list())), "x") -
                   lost_protection_infection12) + new_P12_from_S) +
                 new_P12_from_P1) +
                (rvalue(x,
                   cons_list(index_uni(Hmod2),
                     cons_list(index_uni(it), nil_index_list())), "x") /
                  duration_hosp_mod2)) +
               (rvalue(x,
                  cons_list(index_uni(Imild2),
                    cons_list(index_uni(it), nil_index_list())), "x") /
                 duration_rec_mild)) + (recovered1 * (1 - immune_evasion))),
            "assigning variable x");
          current_statement__ = 156;
          if (is_nan(
                rvalue(x,
                  cons_list(index_uni(P12),
                    cons_list(index_uni((it + 1)), nil_index_list())), "x"))) {
            current_statement__ = 154;
            if (pstream__) {
              stan_print(pstream__, rvalue(x,
                                      cons_list(index_uni(P12),
                                        cons_list(index_uni(it),
                                          nil_index_list())), "x"));
              stan_print(pstream__, " ");
              stan_print(pstream__, lost_protection_infection12);
              stan_print(pstream__, " ");
              stan_print(pstream__, new_P12_from_S);
              stan_print(pstream__, " ");
              stan_print(pstream__, new_P12_from_P1);
              stan_print(pstream__, " ");
              stan_print(pstream__, rvalue(x,
                                      cons_list(index_uni(Hmod2),
                                        cons_list(index_uni(it),
                                          nil_index_list())), "x"));
              stan_print(pstream__, " ");
              stan_print(pstream__, duration_hosp_mod2);
              stan_print(pstream__, " ");
              stan_print(pstream__, rvalue(x,
                                      cons_list(index_uni(Imild2),
                                        cons_list(index_uni(it),
                                          nil_index_list())), "x"));
              stan_print(pstream__, " ");
              stan_print(pstream__, duration_rec_mild);
              stan_print(pstream__, " ");
              stan_print(pstream__, recovered1);
              stan_print(pstream__, " ");
              stan_print(pstream__, immune_evasion);
              stan_print(pstream__, "\n");
            }
          } 
          current_statement__ = 157;
          assign(soon_positive1,
            cons_list(index_uni((it + 1)), nil_index_list()),
            ((soon_positive1[(it - 1)] + (newE1 * frac_tested)) -
              (soon_positive1[(it - 1)] / test_delay)),
            "assigning variable soon_positive1");
          current_statement__ = 158;
          assign(soon_positive2,
            cons_list(index_uni((it + 1)), nil_index_list()),
            ((soon_positive2[(it - 1)] + (newE2 * frac_tested)) -
              (soon_positive2[(it - 1)] / test_delay)),
            "assigning variable soon_positive2");
          current_statement__ = 159;
          assign(new_cases1,
            cons_list(index_uni((it + 1)), nil_index_list()),
            (soon_positive1[((it + 1) - 1)] / test_delay),
            "assigning variable new_cases1");
          current_statement__ = 160;
          assign(new_cases2,
            cons_list(index_uni((it + 1)), nil_index_list()),
            (soon_positive2[((it + 1) - 1)] / test_delay),
            "assigning variable new_cases2");
          current_statement__ = 164;
          if (is_nan(
                sum(
                  rvalue(x,
                    cons_list(index_omni(),
                      cons_list(index_uni((it + 1)), nil_index_list())), "x")))) {
            current_statement__ = 161;
            if (pstream__) {
              stan_print(pstream__, "is nan:");
              stan_print(pstream__, "\n");
            }
            current_statement__ = 162;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "x is nan: it = ";
            errmsg_stream__ << it;
            errmsg_stream__ << "x[, it] = ";
            errmsg_stream__ << rvalue(x,
                                 cons_list(index_omni(),
                                   cons_list(index_uni(it), nil_index_list())),
                                 "x");
            errmsg_stream__ << " x[, it+1] = ";
            errmsg_stream__ << rvalue(x,
                                 cons_list(index_omni(),
                                   cons_list(index_uni((it + 1)),
                                     nil_index_list())), "x");
            throw std::domain_error(errmsg_stream__.str());
          } 
          current_statement__ = 186;
          if (logical_lt(
                min(
                  rvalue(x,
                    cons_list(index_omni(),
                      cons_list(index_uni(it), nil_index_list())), "x")), 0)) {
            current_statement__ = 165;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "negative compartment";
            throw std::domain_error(errmsg_stream__.str());
            current_statement__ = 184;
            for (int ii = 1; ii <= ncompartments; ++ii) {
              current_statement__ = 182;
              if (logical_lt(
                    rvalue(x,
                      cons_list(index_uni(ii),
                        cons_list(index_uni((it + 1)), nil_index_list())),
                      "x"), 0)) {
                current_statement__ = 166;
                max_compartment = 1;
                current_statement__ = 171;
                for (int ii2 = 1; ii2 <= ncompartments; ++ii2) {
                  current_statement__ = 169;
                  if (logical_gt(
                        rvalue(x,
                          cons_list(index_uni(ii2),
                            cons_list(index_uni((it + 1)), nil_index_list())),
                          "x"),
                        rvalue(x,
                          cons_list(index_uni(max_compartment),
                            cons_list(index_uni((it + 1)), nil_index_list())),
                          "x"))) {
                    current_statement__ = 167;
                    max_compartment = ii2;
                  } }
                current_statement__ = 178;
                if (logical_lt(
                      rvalue(x,
                        cons_list(index_uni(ii),
                          cons_list(index_uni((it + 1)), nil_index_list())),
                        "x"), -100)) {
                  current_statement__ = 172;
                  if (pstream__) {
                    stan_print(pstream__, "negative compartment: x[");
                    stan_print(pstream__, ii);
                    stan_print(pstream__, ", ");
                    stan_print(pstream__, (it + 1));
                    stan_print(pstream__, "] = ");
                    stan_print(pstream__, rvalue(x,
                                            cons_list(index_uni(ii),
                                              cons_list(index_uni((it + 1)),
                                                nil_index_list())), "x"));
                    stan_print(pstream__, " moving to compartment ");
                    stan_print(pstream__, max_compartment);
                    stan_print(pstream__, "x[max_compartment, it + 1] = ");
                    stan_print(pstream__, rvalue(x,
                                            cons_list(
                                              index_uni(max_compartment),
                                              cons_list(index_uni((it + 1)),
                                                nil_index_list())), "x"));
                    stan_print(pstream__, "\n");
                  }
                  current_statement__ = 176;
                  if (logical_eq(ii, 2)) {
                    current_statement__ = 173;
                    if (pstream__) {
                      stan_print(pstream__, "duration_latent1 = ");
                      stan_print(pstream__, duration_latent1);
                      stan_print(pstream__, " x[E1, it+1] = ");
                      stan_print(pstream__, rvalue(x,
                                              cons_list(index_uni(E1),
                                                cons_list(
                                                  index_uni((it + 1)),
                                                  nil_index_list())), "x"));
                      stan_print(pstream__, "x[E1, it] = ");
                      stan_print(pstream__, rvalue(x,
                                              cons_list(index_uni(E1),
                                                cons_list(index_uni(it),
                                                  nil_index_list())), "x"));
                      stan_print(pstream__, " newE1 = ");
                      stan_print(pstream__, newE1);
                      stan_print(pstream__, " newI1 = ");
                      stan_print(pstream__, newI1);
                      stan_print(pstream__, "\n");
                    }
                    current_statement__ = 174;
                    if (pstream__) {
                      stan_print(pstream__, rvalue(x,
                                              cons_list(index_omni(),
                                                cons_list(index_uni(it),
                                                  nil_index_list())), "x"));
                      stan_print(pstream__, "\n");
                    }
                  } 
                } 
                current_statement__ = 179;
                assign(x,
                  cons_list(index_uni(max_compartment),
                    cons_list(index_uni((it + 1)), nil_index_list())),
                  (rvalue(x,
                     cons_list(index_uni(max_compartment),
                       cons_list(index_uni((it + 1)), nil_index_list())),
                     "x") +
                    rvalue(x,
                      cons_list(index_uni(ii),
                        cons_list(index_uni((it + 1)), nil_index_list())),
                      "x")), "assigning variable x");
                current_statement__ = 180;
                assign(x,
                  cons_list(index_uni(ii),
                    cons_list(index_uni((it + 1)), nil_index_list())), 0,
                  "assigning variable x");
              } }
          } 
          current_statement__ = 189;
          if (logical_gt(
                stan::math::fabs(
                  (sum(
                     rvalue(x,
                       cons_list(index_omni(),
                         cons_list(index_uni((it + 1)), nil_index_list())),
                       "x")) - npop)), 0.01)) {
            current_statement__ = 187;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Model is leaking, net gain: ";
            errmsg_stream__ << (sum(
                                  rvalue(x,
                                    cons_list(index_omni(),
                                      cons_list(index_uni((it + 1)),
                                        nil_index_list())), "x")) - npop);
            errmsg_stream__ << "it= ";
            errmsg_stream__ << it;
            errmsg_stream__ << " ";
            errmsg_stream__ << rvalue(x,
                                 cons_list(index_omni(),
                                   cons_list(index_uni(it), nil_index_list())),
                                 "x");
            errmsg_stream__ << " ====  ";
            errmsg_stream__ << rvalue(x,
                                 cons_list(index_omni(),
                                   cons_list(index_uni((it + 1)),
                                     nil_index_list())), "x");
            throw std::domain_error(errmsg_stream__.str());
          } }
        current_statement__ = 197;
        for (int it = start_fit_frac; it <= end_fit_frac; ++it) {
          current_statement__ = 192;
          index = ((it - start_fit_frac) + 1);
          current_statement__ = 193;
          assign(frac_case2, cons_list(index_uni(index), nil_index_list()),
            stan::math::fmin((1 - 1e-6),
              stan::math::fmax(1e-6,
                (new_cases2[(it - 1)] /
                  ((new_cases1[(it - 1)] + new_cases2[(it - 1)]) + 1e-8)))),
            "assigning variable frac_case2");
          current_statement__ = 194;
          assign(X,
            cons_list(index_uni(index),
              cons_list(index_uni(1), nil_index_list())), 1.0,
            "assigning variable X");
          current_statement__ = 195;
          assign(X,
            cons_list(index_uni(index),
              cons_list(index_uni(2), nil_index_list())), it,
            "assigning variable X");}
        current_statement__ = 198;
        assign(frac_case2_growth_coef, nil_index_list(),
          mdivide_left_spd(multiply(transpose(X), X),
            multiply(transpose(X), logit(frac_case2))),
          "assigning variable frac_case2_growth_coef");
        current_statement__ = 199;
        frac_case2_growth = frac_case2_growth_coef[(2 - 1)];
        current_statement__ = 200;
        variant2_crossover_days = (-frac_case2_growth_coef[(1 - 1)] /
                                    frac_case2_growth_coef[(2 - 1)]);
        current_statement__ = 201;
        assign(sim_data,
          cons_list(index_uni(obs_hosp_census), nil_index_list()),
          add(
            multiply(
              rvalue(x, cons_list(index_uni(Hmod1), nil_index_list()), "x"),
              (1 + frac_incidental1)),
            multiply(
              rvalue(x, cons_list(index_uni(Hmod2), nil_index_list()), "x"),
              (1 + frac_incidental2))), "assigning variable sim_data");
        current_statement__ = 202;
        assign(sim_data, cons_list(index_uni(obs_cases), nil_index_list()),
          add(new_cases1, new_cases2), "assigning variable sim_data");
      }
      current_statement__ = 19;
      for (int sym1__ = 1; sym1__ <= ncompartments; ++sym1__) {
        current_statement__ = 19;
        for (int sym2__ = 1; sym2__ <= nt; ++sym2__) {
          current_statement__ = 19;
          current_statement__ = 19;
          check_greater_or_equal(function__, "x[sym1__, sym2__]",
                                 rvalue(x,
                                   cons_list(index_uni(sym1__),
                                     cons_list(index_uni(sym2__),
                                       nil_index_list())), "x"), 0.0);}}
      current_statement__ = 20;
      for (int sym1__ = 1; sym1__ <= nobs_types; ++sym1__) {
        current_statement__ = 20;
        for (int sym2__ = 1; sym2__ <= nt; ++sym2__) {
          current_statement__ = 20;
          current_statement__ = 20;
          check_greater_or_equal(function__, "sim_data[sym1__, sym2__]",
                                 rvalue(sim_data,
                                   cons_list(index_uni(sym1__),
                                     cons_list(index_uni(sym2__),
                                       nil_index_list())), "sim_data"), 0.0);
        }}
      current_statement__ = 21;
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        current_statement__ = 21;
        current_statement__ = 21;
        check_greater_or_equal(function__, "new_cases1[sym1__]",
                               new_cases1[(sym1__ - 1)], 0.0);}
      current_statement__ = 22;
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        current_statement__ = 22;
        current_statement__ = 22;
        check_greater_or_equal(function__, "new_cases2[sym1__]",
                               new_cases2[(sym1__ - 1)], 0.0);}
      current_statement__ = 23;
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        current_statement__ = 23;
        current_statement__ = 23;
        check_greater_or_equal(function__, "soon_positive1[sym1__]",
                               soon_positive1[(sym1__ - 1)], 0.0);}
      current_statement__ = 24;
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        current_statement__ = 24;
        current_statement__ = 24;
        check_greater_or_equal(function__, "soon_positive2[sym1__]",
                               soon_positive2[(sym1__ - 1)], 0.0);}
      current_statement__ = 25;
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        current_statement__ = 25;
        current_statement__ = 25;
        check_greater_or_equal(function__, "beta[sym1__]",
                               beta[(sym1__ - 1)], 0.0);}
      current_statement__ = 26;
      current_statement__ = 26;
      check_greater_or_equal(function__, "frac_hosp2_naive",
                             frac_hosp2_naive, 0.0);
      current_statement__ = 26;
      current_statement__ = 26;
      check_less_or_equal(function__, "frac_hosp2_naive", frac_hosp2_naive,
                          1.0);
      current_statement__ = 29;
      for (int sym1__ = 1; sym1__ <= nfrac_growth; ++sym1__) {
        current_statement__ = 29;
        current_statement__ = 29;
        check_greater_or_equal(function__, "frac_case2[sym1__]",
                               frac_case2[(sym1__ - 1)], 0.0);}
      current_statement__ = 29;
      for (int sym1__ = 1; sym1__ <= nfrac_growth; ++sym1__) {
        current_statement__ = 29;
        current_statement__ = 29;
        check_less_or_equal(function__, "frac_case2[sym1__]",
                            frac_case2[(sym1__ - 1)], 1.0);}
      current_statement__ = 31;
      current_statement__ = 31;
      check_greater_or_equal(function__, "beta_0", beta_0, 0.0);
      {
        current_statement__ = 229;
        lp_accum__.add(
          normal_lpdf<propto__>(duration_latent1, mu_duration_latent1,
            sigma_duration_latent1));
        current_statement__ = 230;
        lp_accum__.add(
          normal_lpdf<propto__>(duration_latent2, mu_duration_latent2,
            sigma_duration_latent2));
        current_statement__ = 231;
        lp_accum__.add(
          normal_lpdf<propto__>(duration_rec_mild, mu_duration_rec_mild,
            sigma_duration_rec_mild));
        current_statement__ = 232;
        lp_accum__.add(
          normal_lpdf<propto__>(duration_pre_hosp, mu_duration_pre_hosp,
            sigma_duration_pre_hosp));
        current_statement__ = 233;
        lp_accum__.add(
          normal_lpdf<propto__>(duration_hosp_mod1, mu_duration_hosp_mod1,
            sigma_duration_hosp_mod1));
        current_statement__ = 234;
        lp_accum__.add(
          normal_lpdf<propto__>(duration_hosp_mod2, mu_duration_hosp_mod2,
            sigma_duration_hosp_mod2));
        current_statement__ = 235;
        lp_accum__.add(
          normal_lpdf<propto__>(duration_protection_infection,
            mu_duration_protection_infection,
            sigma_duration_protection_infection));
        current_statement__ = 236;
        lp_accum__.add(
          normal_lpdf<propto__>(Rt1_init, mu_Rt1_init, sigma_Rt1_init));
        current_statement__ = 237;
        lp_accum__.add(
          normal_lpdf<propto__>(frac_tested, mu_frac_tested,
            sigma_frac_tested));
        current_statement__ = 238;
        lp_accum__.add(
          normal_lpdf<propto__>(frac_hosp1_naive, mu_frac_hosp1_naive,
            sigma_frac_hosp1_naive));
        current_statement__ = 239;
        lp_accum__.add(
          normal_lpdf<propto__>(frac_hosp_multiplier,
            mu_frac_hosp_multiplier, sigma_frac_hosp_multiplier));
        current_statement__ = 240;
        lp_accum__.add(
          normal_lpdf<propto__>(trans_multiplier, mu_trans_multiplier,
            sigma_trans_multiplier));
        current_statement__ = 241;
        lp_accum__.add(
          normal_lpdf<propto__>(test_delay, mu_test_delay, sigma_test_delay));
        current_statement__ = 242;
        lp_accum__.add(
          normal_lpdf<propto__>(VE_infection1, mu_VE_infection1,
            sigma_VE_infection1));
        current_statement__ = 243;
        lp_accum__.add(
          normal_lpdf<propto__>(immune_evasion, mu_immune_evasion,
            sigma_immune_evasion));
        current_statement__ = 244;
        lp_accum__.add(
          normal_lpdf<propto__>(initial_exposed2_frac,
            mu_initial_exposed2_frac, sigma_initial_exposed2_frac));
        current_statement__ = 247;
        for (int iinter = 1; iinter <= ninter; ++iinter) {
          current_statement__ = 245;
          lp_accum__.add(
            normal_lpdf<propto__>(beta_multiplier[(iinter - 1)],
              mu_beta_inter[(iinter - 1)], sigma_beta_inter[(iinter - 1)]));}
        current_statement__ = 248;
        lp_accum__.add(
          exponential_lpdf<propto__>(sigma_obs, sigma_obs_est_inv));
        current_statement__ = 272;
        if (logical_eq(fit_to_data, 1)) {
          current_statement__ = 268;
          for (int itype = 1; itype <= nobs_types; ++itype) {
            current_statement__ = 266;
            if (logical_gt(nobs[(itype - 1)], 0)) {
              current_statement__ = 264;
              lp_accum__.add(
                normal_lpdf<propto__>(
                  rvalue(obs_data,
                    cons_list(index_uni(itype),
                      cons_list(index_min_max(1, nobs[(itype - 1)]),
                        nil_index_list())), "obs_data"),
                  rvalue(sim_data,
                    cons_list(index_uni(itype),
                      cons_list(
                        index_multi(rvalue(tobs,
                                      cons_list(index_uni(itype),
                                        cons_list(
                                          index_min_max(1, nobs[(itype - 1)]),
                                          nil_index_list())), "tobs")),
                        nil_index_list())), "sim_data"),
                  sigma_obs[(itype - 1)]));
            } }
          current_statement__ = 269;
          lp_accum__.add(
            normal_lpdf<propto__>(frac_case2_growth_obs, frac_case2_growth,
              sigma_frac_case2_growth_obs));
          current_statement__ = 270;
          lp_accum__.add(
            normal_lpdf<propto__>(variant2_crossover_days_obs,
              variant2_crossover_days, sigma_variant2_crossover_days));
        } else {
          current_statement__ = 263;
          if (logical_eq(fit_to_data, 0)) {
            current_statement__ = 260;
            lp_accum__.add(normal_lpdf<propto__>(frac_case2_growth_obs, 0, 1));
            current_statement__ = 261;
            lp_accum__.add(
              normal_lpdf<propto__>(variant2_crossover_days_obs, 0, 1));
          } else {
            current_statement__ = 259;
            if (logical_eq(fit_to_data, 2)) {
              current_statement__ = 257;
              for (int itype = 1; itype <= nobs_types; ++itype) {
                current_statement__ = 253;
                if (logical_gt(nobs[(itype - 1)], 0)) {
                  current_statement__ = 251;
                  lp_accum__.add(
                    normal_lpdf<propto__>(
                      rvalue(obs_data,
                        cons_list(index_uni(itype),
                          cons_list(index_min_max(1, nobs[(itype - 1)]),
                            nil_index_list())), "obs_data"),
                      rvalue(sim_data,
                        cons_list(index_uni(itype),
                          cons_list(
                            index_multi(rvalue(tobs,
                                          cons_list(index_uni(itype),
                                            cons_list(
                                              index_min_max(1, nobs[(itype -
                                                                    1)]),
                                              nil_index_list())), "tobs")),
                            nil_index_list())), "sim_data"),
                      sigma_obs[(itype - 1)]));
                } 
                current_statement__ = 254;
                lp_accum__.add(
                  normal_lpdf<propto__>(frac_case2_growth_obs, 0, 1));
                current_statement__ = 255;
                lp_accum__.add(
                  normal_lpdf<propto__>(variant2_crossover_days_obs, 0, 1));}
            } else {
              current_statement__ = 249;
              std::stringstream errmsg_stream__;
              errmsg_stream__ << "bad fit_to_data";
              throw std::domain_error(errmsg_stream__.str());
            }
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_LEMMA_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      double duration_latent1;
      duration_latent1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      duration_latent1 = in__.scalar();
      current_statement__ = 1;
      duration_latent1 = stan::math::lb_constrain(duration_latent1, 1.0);
      double duration_latent2;
      duration_latent2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      duration_latent2 = in__.scalar();
      current_statement__ = 2;
      duration_latent2 = stan::math::lb_constrain(duration_latent2, 1.0);
      double duration_rec_mild;
      duration_rec_mild = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      duration_rec_mild = in__.scalar();
      current_statement__ = 3;
      duration_rec_mild = stan::math::lub_constrain(duration_rec_mild, 1.0,
                            999.0);
      double duration_pre_hosp;
      duration_pre_hosp = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      duration_pre_hosp = in__.scalar();
      current_statement__ = 4;
      duration_pre_hosp = stan::math::lb_constrain(duration_pre_hosp, 1.0);
      double duration_hosp_mod1;
      duration_hosp_mod1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      duration_hosp_mod1 = in__.scalar();
      current_statement__ = 5;
      duration_hosp_mod1 = stan::math::lb_constrain(duration_hosp_mod1, 1.0);
      double duration_hosp_mod2;
      duration_hosp_mod2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      duration_hosp_mod2 = in__.scalar();
      current_statement__ = 6;
      duration_hosp_mod2 = stan::math::lb_constrain(duration_hosp_mod2, 1.0);
      double duration_protection_infection;
      duration_protection_infection = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      duration_protection_infection = in__.scalar();
      current_statement__ = 7;
      duration_protection_infection = stan::math::lb_constrain(
                                        duration_protection_infection, 1.0);
      double frac_hosp1_naive;
      frac_hosp1_naive = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      frac_hosp1_naive = in__.scalar();
      current_statement__ = 8;
      frac_hosp1_naive = stan::math::lub_constrain(frac_hosp1_naive, 0.001,
                           1.0);
      double frac_hosp_multiplier;
      frac_hosp_multiplier = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      frac_hosp_multiplier = in__.scalar();
      current_statement__ = 9;
      frac_hosp_multiplier = stan::math::lb_constrain(frac_hosp_multiplier,
                               0.001);
      double frac_tested;
      frac_tested = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      frac_tested = in__.scalar();
      current_statement__ = 10;
      frac_tested = stan::math::lub_constrain(frac_tested, 0.001, 1.0);
      double initial_exposed2_frac;
      initial_exposed2_frac = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 11;
      initial_exposed2_frac = in__.scalar();
      current_statement__ = 11;
      initial_exposed2_frac = stan::math::lub_constrain(
                                initial_exposed2_frac, 1e-6, 1);
      std::vector<double> sigma_obs;
      sigma_obs = std::vector<double>(nobs_types, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= nobs_types; ++sym1__) {
        current_statement__ = 12;
        assign(sigma_obs, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable sigma_obs");}
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= nobs_types; ++sym1__) {
        current_statement__ = 12;
        assign(sigma_obs, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(sigma_obs[(sym1__ - 1)], 0.001),
          "assigning variable sigma_obs");}
      double test_delay;
      test_delay = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 13;
      test_delay = in__.scalar();
      current_statement__ = 13;
      test_delay = stan::math::lb_constrain(test_delay, 1.0);
      double Rt1_init;
      Rt1_init = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 14;
      Rt1_init = in__.scalar();
      current_statement__ = 14;
      Rt1_init = stan::math::lub_constrain(Rt1_init, 0.001, 9.9);
      double trans_multiplier;
      trans_multiplier = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 15;
      trans_multiplier = in__.scalar();
      current_statement__ = 15;
      trans_multiplier = stan::math::lub_constrain(trans_multiplier, 0.001,
                           3.0);
      double VE_infection1;
      VE_infection1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 16;
      VE_infection1 = in__.scalar();
      current_statement__ = 16;
      VE_infection1 = stan::math::lub_constrain(VE_infection1, 0.001, 1.0);
      double immune_evasion;
      immune_evasion = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 17;
      immune_evasion = in__.scalar();
      current_statement__ = 17;
      immune_evasion = stan::math::lub_constrain(immune_evasion, 0.001, 1.0);
      std::vector<double> beta_multiplier;
      beta_multiplier = std::vector<double>(ninter, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 18;
      for (int sym1__ = 1; sym1__ <= ninter; ++sym1__) {
        current_statement__ = 18;
        assign(beta_multiplier,
          cons_list(index_uni(sym1__), nil_index_list()), in__.scalar(),
          "assigning variable beta_multiplier");}
      current_statement__ = 18;
      for (int sym1__ = 1; sym1__ <= ninter; ++sym1__) {
        current_statement__ = 18;
        assign(beta_multiplier,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(beta_multiplier[(sym1__ - 1)], 0.0),
          "assigning variable beta_multiplier");}
      Eigen::Matrix<double, -1, -1> x;
      x = Eigen::Matrix<double, -1, -1>(ncompartments, nt);
      stan::math::fill(x, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> sim_data;
      sim_data = Eigen::Matrix<double, -1, -1>(nobs_types, nt);
      stan::math::fill(sim_data, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, 1, -1> new_cases1;
      new_cases1 = Eigen::Matrix<double, 1, -1>(nt);
      stan::math::fill(new_cases1, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, 1, -1> new_cases2;
      new_cases2 = Eigen::Matrix<double, 1, -1>(nt);
      stan::math::fill(new_cases2, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, 1, -1> soon_positive1;
      soon_positive1 = Eigen::Matrix<double, 1, -1>(nt);
      stan::math::fill(soon_positive1, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, 1, -1> soon_positive2;
      soon_positive2 = Eigen::Matrix<double, 1, -1>(nt);
      stan::math::fill(soon_positive2, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> beta;
      beta = std::vector<double>(nt, std::numeric_limits<double>::quiet_NaN());
      
      double frac_hosp2_naive;
      frac_hosp2_naive = std::numeric_limits<double>::quiet_NaN();
      
      double frac_case2_growth;
      frac_case2_growth = std::numeric_limits<double>::quiet_NaN();
      
      double variant2_crossover_days;
      variant2_crossover_days = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> frac_case2;
      frac_case2 = Eigen::Matrix<double, -1, 1>(nfrac_growth);
      stan::math::fill(frac_case2, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> frac_case2_growth_coef;
      frac_case2_growth_coef = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(frac_case2_growth_coef, std::numeric_limits<double>::quiet_NaN());
      
      double beta_0;
      beta_0 = std::numeric_limits<double>::quiet_NaN();
      
      vars__.emplace_back(duration_latent1);
      vars__.emplace_back(duration_latent2);
      vars__.emplace_back(duration_rec_mild);
      vars__.emplace_back(duration_pre_hosp);
      vars__.emplace_back(duration_hosp_mod1);
      vars__.emplace_back(duration_hosp_mod2);
      vars__.emplace_back(duration_protection_infection);
      vars__.emplace_back(frac_hosp1_naive);
      vars__.emplace_back(frac_hosp_multiplier);
      vars__.emplace_back(frac_tested);
      vars__.emplace_back(initial_exposed2_frac);
      for (int sym1__ = 1; sym1__ <= nobs_types; ++sym1__) {
        vars__.emplace_back(sigma_obs[(sym1__ - 1)]);}
      vars__.emplace_back(test_delay);
      vars__.emplace_back(Rt1_init);
      vars__.emplace_back(trans_multiplier);
      vars__.emplace_back(VE_infection1);
      vars__.emplace_back(immune_evasion);
      for (int sym1__ = 1; sym1__ <= ninter; ++sym1__) {
        vars__.emplace_back(beta_multiplier[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 36;
      for (int it = 1; it <= nt; ++it) {
        current_statement__ = 34;
        for (int itype = 1; itype <= nobs_types; ++itype) {
          current_statement__ = 32;
          assign(sim_data,
            cons_list(index_uni(itype),
              cons_list(index_uni(it), nil_index_list())), 0.0,
            "assigning variable sim_data");}}
      {
        double newE1;
        newE1 = std::numeric_limits<double>::quiet_NaN();
        
        double newE2;
        newE2 = std::numeric_limits<double>::quiet_NaN();
        
        double newI1;
        newI1 = std::numeric_limits<double>::quiet_NaN();
        
        double newI2;
        newI2 = std::numeric_limits<double>::quiet_NaN();
        
        double frac_init_E;
        frac_init_E = std::numeric_limits<double>::quiet_NaN();
        
        double avg_duration;
        avg_duration = std::numeric_limits<double>::quiet_NaN();
        
        double frac_boosters_to_susceptible;
        frac_boosters_to_susceptible = std::numeric_limits<double>::quiet_NaN();
        
        double increased_severity_protection;
        increased_severity_protection = std::numeric_limits<double>::quiet_NaN();
        
        double frac_increased_severity_protection;
        frac_increased_severity_protection = std::numeric_limits<double>::quiet_NaN();
        
        double new_admits1;
        new_admits1 = std::numeric_limits<double>::quiet_NaN();
        
        double new_admits2;
        new_admits2 = std::numeric_limits<double>::quiet_NaN();
        
        double VE_severe_given_infection1;
        VE_severe_given_infection1 = std::numeric_limits<double>::quiet_NaN();
        
        double VE_severe_given_infection2;
        VE_severe_given_infection2 = std::numeric_limits<double>::quiet_NaN();
        
        double lost_protection_infection1;
        lost_protection_infection1 = std::numeric_limits<double>::quiet_NaN();
        
        double lost_protection_infection12;
        lost_protection_infection12 = std::numeric_limits<double>::quiet_NaN();
        
        double frac_hosp_init;
        frac_hosp_init = std::numeric_limits<double>::quiet_NaN();
        
        double frac_preh_init;
        frac_preh_init = std::numeric_limits<double>::quiet_NaN();
        
        double S2;
        S2 = std::numeric_limits<double>::quiet_NaN();
        
        double frac_E2_from_S;
        frac_E2_from_S = std::numeric_limits<double>::quiet_NaN();
        
        double frac_E2_from_P1;
        frac_E2_from_P1 = std::numeric_limits<double>::quiet_NaN();
        
        double frac_hosp1;
        frac_hosp1 = std::numeric_limits<double>::quiet_NaN();
        
        double frac_hosp2;
        frac_hosp2 = std::numeric_limits<double>::quiet_NaN();
        
        double frac_boosters_to_S;
        frac_boosters_to_S = std::numeric_limits<double>::quiet_NaN();
        
        double frac_boosters_to_P1;
        frac_boosters_to_P1 = std::numeric_limits<double>::quiet_NaN();
        
        double new_P12_from_S;
        new_P12_from_S = std::numeric_limits<double>::quiet_NaN();
        
        double new_P1_from_S;
        new_P1_from_S = std::numeric_limits<double>::quiet_NaN();
        
        double new_P12_from_P1;
        new_P12_from_P1 = std::numeric_limits<double>::quiet_NaN();
        
        double S_increased_severe_protection;
        S_increased_severe_protection = std::numeric_limits<double>::quiet_NaN();
        
        double P1_increased_severe_protection;
        P1_increased_severe_protection = std::numeric_limits<double>::quiet_NaN();
        
        double frac_increased_severity_protection1;
        frac_increased_severity_protection1 = std::numeric_limits<double>::quiet_NaN();
        
        double frac_increased_severity_protection2;
        frac_increased_severity_protection2 = std::numeric_limits<double>::quiet_NaN();
        
        int max_compartment;
        max_compartment = std::numeric_limits<int>::min();
        
        int index;
        index = std::numeric_limits<int>::min();
        
        double recovered1;
        recovered1 = std::numeric_limits<double>::quiet_NaN();
        
        current_statement__ = 71;
        validate_non_negative_index("X", "nfrac_growth", nfrac_growth);
        Eigen::Matrix<double, -1, -1> X;
        X = Eigen::Matrix<double, -1, -1>(nfrac_growth, 2);
        stan::math::fill(X, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 73;
        frac_hosp2_naive = (frac_hosp1_naive * frac_hosp_multiplier);
        current_statement__ = 76;
        if (logical_gt(frac_hosp2_naive, 1)) {
          current_statement__ = 74;
          std::stringstream errmsg_stream__;
          errmsg_stream__ << "frac_hosp2_naive > 1";
          throw std::domain_error(errmsg_stream__.str());
        } 
        current_statement__ = 77;
        VE_severe_given_infection1 = VE_severe_given_infection1_init;
        current_statement__ = 78;
        VE_severe_given_infection2 = VE_severe_given_infection2_init;
        current_statement__ = 79;
        frac_hosp_init = (frac_hosp1_naive *
                           (1 - VE_severe_given_infection1));
        current_statement__ = 80;
        frac_preh_init = ((frac_hosp_init * duration_pre_hosp) /
                           (duration_pre_hosp + duration_rec_mild));
        current_statement__ = 81;
        avg_duration = ((frac_hosp_init * duration_pre_hosp) +
                         ((1 - frac_hosp_init) * duration_rec_mild));
        current_statement__ = 82;
        assign(x,
          cons_list(index_omni(), cons_list(index_uni(1), nil_index_list())),
          rep_vector(0.0, ncompartments), "assigning variable x");
        current_statement__ = 83;
        frac_init_E = (duration_latent1 / (duration_latent1 + avg_duration));
        current_statement__ = 84;
        assign(x,
          cons_list(index_uni(E1), cons_list(index_uni(1), nil_index_list())),
          (((duration_latent1 / duration_hosp_mod1) * init_hosp1) /
            frac_hosp_init), "assigning variable x");
        current_statement__ = 85;
        assign(x,
          cons_list(index_uni(Ipreh1),
            cons_list(index_uni(1), nil_index_list())),
          ((duration_pre_hosp / duration_hosp_mod1) * init_hosp1),
          "assigning variable x");
        current_statement__ = 86;
        assign(x,
          cons_list(index_uni(Imild1),
            cons_list(index_uni(1), nil_index_list())),
          (((duration_rec_mild / (Rt1_init * duration_latent1)) *
             rvalue(x,
               cons_list(index_uni(E1),
                 cons_list(index_uni(1), nil_index_list())), "x")) -
            rvalue(x,
              cons_list(index_uni(Ipreh1),
                cons_list(index_uni(1), nil_index_list())), "x")),
          "assigning variable x");
        current_statement__ = 87;
        assign(x,
          cons_list(index_uni(Hmod1),
            cons_list(index_uni(1), nil_index_list())), init_hosp1,
          "assigning variable x");
        current_statement__ = 88;
        assign(x,
          cons_list(index_uni(P1), cons_list(index_uni(1), nil_index_list())),
          ((npop * VE_infection1) * immune_evasion), "assigning variable x");
        current_statement__ = 89;
        assign(x,
          cons_list(index_uni(P12),
            cons_list(index_uni(1), nil_index_list())),
          ((npop * VE_infection1) * (1 - immune_evasion)),
          "assigning variable x");
        current_statement__ = 90;
        assign(x,
          cons_list(index_uni(S), cons_list(index_uni(1), nil_index_list())),
          (npop -
            (((((rvalue(x,
                   cons_list(index_uni(E1),
                     cons_list(index_uni(1), nil_index_list())), "x") +
                  rvalue(x,
                    cons_list(index_uni(Imild1),
                      cons_list(index_uni(1), nil_index_list())), "x")) +
                 rvalue(x,
                   cons_list(index_uni(Ipreh1),
                     cons_list(index_uni(1), nil_index_list())), "x")) +
                rvalue(x,
                  cons_list(index_uni(Hmod1),
                    cons_list(index_uni(1), nil_index_list())), "x")) +
               rvalue(x,
                 cons_list(index_uni(P1),
                   cons_list(index_uni(1), nil_index_list())), "x")) +
              rvalue(x,
                cons_list(index_uni(P12),
                  cons_list(index_uni(1), nil_index_list())), "x"))),
          "assigning variable x");
        current_statement__ = 91;
        beta_0 = (Rt1_init /
                   ((rvalue(x,
                       cons_list(index_uni(S),
                         cons_list(index_uni(1), nil_index_list())), "x") /
                      npop) * duration_rec_mild));
        current_statement__ = 94;
        if (logical_lt(beta_0, 0)) {
          current_statement__ = 92;
          std::stringstream errmsg_stream__;
          errmsg_stream__ << "beta_0 < 0";
          throw std::domain_error(errmsg_stream__.str());
        } 
        current_statement__ = 100;
        for (int it = 1; it <= nt; ++it) {
          current_statement__ = 95;
          assign(beta, cons_list(index_uni(it), nil_index_list()), beta_0,
            "assigning variable beta");
          current_statement__ = 98;
          for (int iinter = 1; iinter <= ninter; ++iinter) {
            current_statement__ = 96;
            assign(beta, cons_list(index_uni(it), nil_index_list()),
              (beta[(it - 1)] *
                pow(beta_multiplier[(iinter - 1)],
                  inv_logit(
                    ((9.19024 / len_inter[(iinter - 1)]) *
                      (it -
                        (t_inter[(iinter - 1)] +
                          (len_inter[(iinter - 1)] / 2))))))),
              "assigning variable beta");}}
        current_statement__ = 102;
        if (logical_lt(
              rvalue(x,
                cons_list(index_uni(S),
                  cons_list(index_uni(1), nil_index_list())), "x"), -10)) {
          
        } 
        current_statement__ = 103;
        assign(soon_positive1, cons_list(index_uni(1), nil_index_list()),
          0.0, "assigning variable soon_positive1");
        current_statement__ = 104;
        assign(new_cases1, cons_list(index_uni(1), nil_index_list()), 0.0,
          "assigning variable new_cases1");
        current_statement__ = 107;
        if (logical_eq(tobs[(obs_cases - 1)][(1 - 1)], 1)) {
          current_statement__ = 105;
          std::stringstream errmsg_stream__;
          errmsg_stream__ << "Minimum tobs[obs_cases, :] is 2";
          throw std::domain_error(errmsg_stream__.str());
        } 
        current_statement__ = 108;
        assign(soon_positive2, cons_list(index_uni(1), nil_index_list()),
          0.0, "assigning variable soon_positive2");
        current_statement__ = 109;
        assign(new_cases2, cons_list(index_uni(1), nil_index_list()), 0.0,
          "assigning variable new_cases2");
        current_statement__ = 112;
        if (logical_lt((booster_VE_infection1 - booster_VE_infection2), 0)) {
          current_statement__ = 110;
          std::stringstream errmsg_stream__;
          errmsg_stream__ << "booster_VE_infection1 - booster_VE_infection2 < 0";
          throw std::domain_error(errmsg_stream__.str());
        } 
        current_statement__ = 191;
        for (int it = 1; it <= (nt - 1); ++it) {
          current_statement__ = 113;
          newE1 = stan::math::fmin(
                    rvalue(x,
                      cons_list(index_uni(S),
                        cons_list(index_uni(it), nil_index_list())), "x"),
                    (((beta[(it - 1)] *
                        rvalue(x,
                          cons_list(index_uni(S),
                            cons_list(index_uni(it), nil_index_list())), "x"))
                       *
                       (rvalue(x,
                          cons_list(index_uni(Imild1),
                            cons_list(index_uni(it), nil_index_list())), "x")
                         +
                         rvalue(x,
                           cons_list(index_uni(Ipreh1),
                             cons_list(index_uni(it), nil_index_list())),
                           "x"))) / npop));
          current_statement__ = 114;
          S2 = (rvalue(x,
                  cons_list(index_uni(S),
                    cons_list(index_uni(it), nil_index_list())), "x") +
                 rvalue(x,
                   cons_list(index_uni(P1),
                     cons_list(index_uni(it), nil_index_list())), "x"));
          current_statement__ = 115;
          newI1 = stan::math::fmin(
                    rvalue(x,
                      cons_list(index_uni(E1),
                        cons_list(index_uni(it), nil_index_list())), "x"),
                    (rvalue(x,
                       cons_list(index_uni(E1),
                         cons_list(index_uni(it), nil_index_list())), "x") /
                      duration_latent1));
          current_statement__ = 120;
          if (logical_eq(it, variant2_introduction)) {
            current_statement__ = 118;
            newE2 = (((rvalue(x,
                         cons_list(index_uni(E1),
                           cons_list(index_uni(it), nil_index_list())), "x")
                        + newE1) - newI1) * initial_exposed2_frac);
          } else {
            current_statement__ = 116;
            newE2 = stan::math::fmin(S2,
                      ((((beta[(it - 1)] * trans_multiplier) * S2) *
                         (rvalue(x,
                            cons_list(index_uni(Imild2),
                              cons_list(index_uni(it), nil_index_list())),
                            "x") +
                           rvalue(x,
                             cons_list(index_uni(Ipreh2),
                               cons_list(index_uni(it), nil_index_list())),
                             "x"))) / npop));
          }
          current_statement__ = 121;
          newE2 = stan::math::fmax(newE2, 0.0);
          current_statement__ = 122;
          newI2 = stan::math::fmin(
                    rvalue(x,
                      cons_list(index_uni(E2),
                        cons_list(index_uni(it), nil_index_list())), "x"),
                    (rvalue(x,
                       cons_list(index_uni(E2),
                         cons_list(index_uni(it), nil_index_list())), "x") /
                      duration_latent2));
          current_statement__ = 123;
          frac_boosters_to_S = (rvalue(x,
                                  cons_list(index_uni(S),
                                    cons_list(index_uni(it),
                                      nil_index_list())), "x") /
                                 ((rvalue(x,
                                     cons_list(index_uni(S),
                                       cons_list(index_uni(it),
                                         nil_index_list())), "x") +
                                    rvalue(x,
                                      cons_list(index_uni(P1),
                                        cons_list(index_uni(it),
                                          nil_index_list())), "x")) +
                                   rvalue(x,
                                     cons_list(index_uni(P12),
                                       cons_list(index_uni(it),
                                         nil_index_list())), "x")));
          current_statement__ = 124;
          frac_boosters_to_P1 = (rvalue(x,
                                   cons_list(index_uni(P1),
                                     cons_list(index_uni(it),
                                       nil_index_list())), "x") /
                                  ((rvalue(x,
                                      cons_list(index_uni(S),
                                        cons_list(index_uni(it),
                                          nil_index_list())), "x") +
                                     rvalue(x,
                                       cons_list(index_uni(P1),
                                         cons_list(index_uni(it),
                                           nil_index_list())), "x")) +
                                    rvalue(x,
                                      cons_list(index_uni(P12),
                                        cons_list(index_uni(it),
                                          nil_index_list())), "x")));
          current_statement__ = 125;
          new_P12_from_S = ((num_boosters[(it - 1)] * frac_boosters_to_S) *
                             booster_VE_infection2);
          current_statement__ = 126;
          new_P1_from_S = ((num_boosters[(it - 1)] * frac_boosters_to_S) *
                            (booster_VE_infection1 - booster_VE_infection2));
          current_statement__ = 127;
          S_increased_severe_protection = ((num_boosters[(it - 1)] *
                                             frac_boosters_to_S) *
                                            (1 - booster_VE_infection1));
          current_statement__ = 128;
          new_P12_from_P1 = ((num_boosters[(it - 1)] * frac_boosters_to_P1) *
                              booster_VE_infection2);
          current_statement__ = 129;
          P1_increased_severe_protection = (((num_boosters[(it - 1)] *
                                               frac_boosters_to_P1) *
                                              (1 - booster_VE_infection2)) +
                                             new_P1_from_S);
          current_statement__ = 130;
          frac_increased_severity_protection1 = (S_increased_severe_protection
                                                  /
                                                  (rvalue(x,
                                                     cons_list(index_uni(S),
                                                       cons_list(
                                                         index_uni(it),
                                                         nil_index_list())),
                                                     "x") + 1e-8));
          current_statement__ = 131;
          frac_increased_severity_protection2 = ((S_increased_severe_protection
                                                   +
                                                   P1_increased_severe_protection)
                                                  / S2);
          current_statement__ = 132;
          VE_severe_given_infection1 = ((booster_VE_severe_given_infection1 *
                                          frac_increased_severity_protection1)
                                         +
                                         (VE_severe_given_infection1 *
                                           (1 -
                                             frac_increased_severity_protection1)));
          current_statement__ = 133;
          VE_severe_given_infection2 = ((booster_VE_severe_given_infection2 *
                                          frac_increased_severity_protection2)
                                         +
                                         (VE_severe_given_infection2 *
                                           (1 -
                                             frac_increased_severity_protection2)));
          current_statement__ = 134;
          frac_hosp1 = (frac_hosp1_naive * (1 - VE_severe_given_infection1));
          current_statement__ = 135;
          frac_hosp2 = (frac_hosp2_naive * (1 - VE_severe_given_infection2));
          current_statement__ = 136;
          new_admits1 = (rvalue(x,
                           cons_list(index_uni(Ipreh1),
                             cons_list(index_uni(it), nil_index_list())),
                           "x") / duration_pre_hosp);
          current_statement__ = 137;
          new_admits2 = (rvalue(x,
                           cons_list(index_uni(Ipreh2),
                             cons_list(index_uni(it), nil_index_list())),
                           "x") / duration_pre_hosp);
          current_statement__ = 138;
          lost_protection_infection1 = (rvalue(x,
                                          cons_list(index_uni(P1),
                                            cons_list(index_uni(it),
                                              nil_index_list())), "x") /
                                         duration_protection_infection);
          current_statement__ = 139;
          lost_protection_infection12 = (rvalue(x,
                                           cons_list(index_uni(P12),
                                             cons_list(index_uni(it),
                                               nil_index_list())), "x") /
                                          duration_protection_infection);
          current_statement__ = 140;
          frac_E2_from_S = (rvalue(x,
                              cons_list(index_uni(S),
                                cons_list(index_uni(it), nil_index_list())),
                              "x") / S2);
          current_statement__ = 141;
          frac_E2_from_P1 = (1 - frac_E2_from_S);
          current_statement__ = 142;
          assign(x,
            cons_list(index_uni(S),
              cons_list(index_uni((it + 1)), nil_index_list())),
            (((((rvalue(x,
                   cons_list(index_uni(S),
                     cons_list(index_uni(it), nil_index_list())), "x") -
                  newE1) + lost_protection_infection1) -
                (newE2 * frac_E2_from_S)) - new_P12_from_S) - new_P1_from_S),
            "assigning variable x");
          current_statement__ = 143;
          assign(x,
            cons_list(index_uni(E1),
              cons_list(index_uni((it + 1)), nil_index_list())),
            ((rvalue(x,
                cons_list(index_uni(E1),
                  cons_list(index_uni(it), nil_index_list())), "x") + newE1)
              - newI1), "assigning variable x");
          current_statement__ = 144;
          assign(x,
            cons_list(index_uni(E2),
              cons_list(index_uni((it + 1)), nil_index_list())),
            ((rvalue(x,
                cons_list(index_uni(E2),
                  cons_list(index_uni(it), nil_index_list())), "x") + newE2)
              - newI2), "assigning variable x");
          current_statement__ = 145;
          assign(x,
            cons_list(index_uni(Imild1),
              cons_list(index_uni((it + 1)), nil_index_list())),
            ((rvalue(x,
                cons_list(index_uni(Imild1),
                  cons_list(index_uni(it), nil_index_list())), "x") +
               (newI1 * (1 - frac_hosp1))) -
              (rvalue(x,
                 cons_list(index_uni(Imild1),
                   cons_list(index_uni(it), nil_index_list())), "x") /
                duration_rec_mild)), "assigning variable x");
          current_statement__ = 146;
          assign(x,
            cons_list(index_uni(Imild2),
              cons_list(index_uni((it + 1)), nil_index_list())),
            ((rvalue(x,
                cons_list(index_uni(Imild2),
                  cons_list(index_uni(it), nil_index_list())), "x") +
               (newI2 * (1 - frac_hosp2))) -
              (rvalue(x,
                 cons_list(index_uni(Imild2),
                   cons_list(index_uni(it), nil_index_list())), "x") /
                duration_rec_mild)), "assigning variable x");
          current_statement__ = 147;
          assign(x,
            cons_list(index_uni(Ipreh1),
              cons_list(index_uni((it + 1)), nil_index_list())),
            ((rvalue(x,
                cons_list(index_uni(Ipreh1),
                  cons_list(index_uni(it), nil_index_list())), "x") +
               (newI1 * frac_hosp1)) - new_admits1), "assigning variable x");
          current_statement__ = 148;
          assign(x,
            cons_list(index_uni(Ipreh2),
              cons_list(index_uni((it + 1)), nil_index_list())),
            ((rvalue(x,
                cons_list(index_uni(Ipreh2),
                  cons_list(index_uni(it), nil_index_list())), "x") +
               (newI2 * frac_hosp2)) - new_admits2), "assigning variable x");
          current_statement__ = 149;
          assign(x,
            cons_list(index_uni(Hmod1),
              cons_list(index_uni((it + 1)), nil_index_list())),
            ((rvalue(x,
                cons_list(index_uni(Hmod1),
                  cons_list(index_uni(it), nil_index_list())), "x") +
               new_admits1) -
              (rvalue(x,
                 cons_list(index_uni(Hmod1),
                   cons_list(index_uni(it), nil_index_list())), "x") /
                duration_hosp_mod1)), "assigning variable x");
          current_statement__ = 150;
          assign(x,
            cons_list(index_uni(Hmod2),
              cons_list(index_uni((it + 1)), nil_index_list())),
            ((rvalue(x,
                cons_list(index_uni(Hmod2),
                  cons_list(index_uni(it), nil_index_list())), "x") +
               new_admits2) -
              (rvalue(x,
                 cons_list(index_uni(Hmod2),
                   cons_list(index_uni(it), nil_index_list())), "x") /
                duration_hosp_mod2)), "assigning variable x");
          current_statement__ = 151;
          recovered1 = ((rvalue(x,
                           cons_list(index_uni(Hmod1),
                             cons_list(index_uni(it), nil_index_list())),
                           "x") / duration_hosp_mod1) +
                         (rvalue(x,
                            cons_list(index_uni(Imild1),
                              cons_list(index_uni(it), nil_index_list())),
                            "x") / duration_rec_mild));
          current_statement__ = 152;
          assign(x,
            cons_list(index_uni(P1),
              cons_list(index_uni((it + 1)), nil_index_list())),
            ((((((rvalue(x,
                    cons_list(index_uni(P1),
                      cons_list(index_uni(it), nil_index_list())), "x") -
                   lost_protection_infection1) + lost_protection_infection12)
                 - (newE2 * frac_E2_from_P1)) + new_P1_from_S) -
               new_P12_from_P1) + (recovered1 * immune_evasion)),
            "assigning variable x");
          current_statement__ = 153;
          assign(x,
            cons_list(index_uni(P12),
              cons_list(index_uni((it + 1)), nil_index_list())),
            ((((((rvalue(x,
                    cons_list(index_uni(P12),
                      cons_list(index_uni(it), nil_index_list())), "x") -
                   lost_protection_infection12) + new_P12_from_S) +
                 new_P12_from_P1) +
                (rvalue(x,
                   cons_list(index_uni(Hmod2),
                     cons_list(index_uni(it), nil_index_list())), "x") /
                  duration_hosp_mod2)) +
               (rvalue(x,
                  cons_list(index_uni(Imild2),
                    cons_list(index_uni(it), nil_index_list())), "x") /
                 duration_rec_mild)) + (recovered1 * (1 - immune_evasion))),
            "assigning variable x");
          current_statement__ = 156;
          if (is_nan(
                rvalue(x,
                  cons_list(index_uni(P12),
                    cons_list(index_uni((it + 1)), nil_index_list())), "x"))) {
            current_statement__ = 154;
            if (pstream__) {
              stan_print(pstream__, rvalue(x,
                                      cons_list(index_uni(P12),
                                        cons_list(index_uni(it),
                                          nil_index_list())), "x"));
              stan_print(pstream__, " ");
              stan_print(pstream__, lost_protection_infection12);
              stan_print(pstream__, " ");
              stan_print(pstream__, new_P12_from_S);
              stan_print(pstream__, " ");
              stan_print(pstream__, new_P12_from_P1);
              stan_print(pstream__, " ");
              stan_print(pstream__, rvalue(x,
                                      cons_list(index_uni(Hmod2),
                                        cons_list(index_uni(it),
                                          nil_index_list())), "x"));
              stan_print(pstream__, " ");
              stan_print(pstream__, duration_hosp_mod2);
              stan_print(pstream__, " ");
              stan_print(pstream__, rvalue(x,
                                      cons_list(index_uni(Imild2),
                                        cons_list(index_uni(it),
                                          nil_index_list())), "x"));
              stan_print(pstream__, " ");
              stan_print(pstream__, duration_rec_mild);
              stan_print(pstream__, " ");
              stan_print(pstream__, recovered1);
              stan_print(pstream__, " ");
              stan_print(pstream__, immune_evasion);
              stan_print(pstream__, "\n");
            }
          } 
          current_statement__ = 157;
          assign(soon_positive1,
            cons_list(index_uni((it + 1)), nil_index_list()),
            ((soon_positive1[(it - 1)] + (newE1 * frac_tested)) -
              (soon_positive1[(it - 1)] / test_delay)),
            "assigning variable soon_positive1");
          current_statement__ = 158;
          assign(soon_positive2,
            cons_list(index_uni((it + 1)), nil_index_list()),
            ((soon_positive2[(it - 1)] + (newE2 * frac_tested)) -
              (soon_positive2[(it - 1)] / test_delay)),
            "assigning variable soon_positive2");
          current_statement__ = 159;
          assign(new_cases1,
            cons_list(index_uni((it + 1)), nil_index_list()),
            (soon_positive1[((it + 1) - 1)] / test_delay),
            "assigning variable new_cases1");
          current_statement__ = 160;
          assign(new_cases2,
            cons_list(index_uni((it + 1)), nil_index_list()),
            (soon_positive2[((it + 1) - 1)] / test_delay),
            "assigning variable new_cases2");
          current_statement__ = 164;
          if (is_nan(
                sum(
                  rvalue(x,
                    cons_list(index_omni(),
                      cons_list(index_uni((it + 1)), nil_index_list())), "x")))) {
            current_statement__ = 161;
            if (pstream__) {
              stan_print(pstream__, "is nan:");
              stan_print(pstream__, "\n");
            }
            current_statement__ = 162;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "x is nan: it = ";
            errmsg_stream__ << it;
            errmsg_stream__ << "x[, it] = ";
            errmsg_stream__ << rvalue(x,
                                 cons_list(index_omni(),
                                   cons_list(index_uni(it), nil_index_list())),
                                 "x");
            errmsg_stream__ << " x[, it+1] = ";
            errmsg_stream__ << rvalue(x,
                                 cons_list(index_omni(),
                                   cons_list(index_uni((it + 1)),
                                     nil_index_list())), "x");
            throw std::domain_error(errmsg_stream__.str());
          } 
          current_statement__ = 186;
          if (logical_lt(
                min(
                  rvalue(x,
                    cons_list(index_omni(),
                      cons_list(index_uni(it), nil_index_list())), "x")), 0)) {
            current_statement__ = 165;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "negative compartment";
            throw std::domain_error(errmsg_stream__.str());
            current_statement__ = 184;
            for (int ii = 1; ii <= ncompartments; ++ii) {
              current_statement__ = 182;
              if (logical_lt(
                    rvalue(x,
                      cons_list(index_uni(ii),
                        cons_list(index_uni((it + 1)), nil_index_list())),
                      "x"), 0)) {
                current_statement__ = 166;
                max_compartment = 1;
                current_statement__ = 171;
                for (int ii2 = 1; ii2 <= ncompartments; ++ii2) {
                  current_statement__ = 169;
                  if (logical_gt(
                        rvalue(x,
                          cons_list(index_uni(ii2),
                            cons_list(index_uni((it + 1)), nil_index_list())),
                          "x"),
                        rvalue(x,
                          cons_list(index_uni(max_compartment),
                            cons_list(index_uni((it + 1)), nil_index_list())),
                          "x"))) {
                    current_statement__ = 167;
                    max_compartment = ii2;
                  } }
                current_statement__ = 178;
                if (logical_lt(
                      rvalue(x,
                        cons_list(index_uni(ii),
                          cons_list(index_uni((it + 1)), nil_index_list())),
                        "x"), -100)) {
                  current_statement__ = 172;
                  if (pstream__) {
                    stan_print(pstream__, "negative compartment: x[");
                    stan_print(pstream__, ii);
                    stan_print(pstream__, ", ");
                    stan_print(pstream__, (it + 1));
                    stan_print(pstream__, "] = ");
                    stan_print(pstream__, rvalue(x,
                                            cons_list(index_uni(ii),
                                              cons_list(index_uni((it + 1)),
                                                nil_index_list())), "x"));
                    stan_print(pstream__, " moving to compartment ");
                    stan_print(pstream__, max_compartment);
                    stan_print(pstream__, "x[max_compartment, it + 1] = ");
                    stan_print(pstream__, rvalue(x,
                                            cons_list(
                                              index_uni(max_compartment),
                                              cons_list(index_uni((it + 1)),
                                                nil_index_list())), "x"));
                    stan_print(pstream__, "\n");
                  }
                  current_statement__ = 176;
                  if (logical_eq(ii, 2)) {
                    current_statement__ = 173;
                    if (pstream__) {
                      stan_print(pstream__, "duration_latent1 = ");
                      stan_print(pstream__, duration_latent1);
                      stan_print(pstream__, " x[E1, it+1] = ");
                      stan_print(pstream__, rvalue(x,
                                              cons_list(index_uni(E1),
                                                cons_list(
                                                  index_uni((it + 1)),
                                                  nil_index_list())), "x"));
                      stan_print(pstream__, "x[E1, it] = ");
                      stan_print(pstream__, rvalue(x,
                                              cons_list(index_uni(E1),
                                                cons_list(index_uni(it),
                                                  nil_index_list())), "x"));
                      stan_print(pstream__, " newE1 = ");
                      stan_print(pstream__, newE1);
                      stan_print(pstream__, " newI1 = ");
                      stan_print(pstream__, newI1);
                      stan_print(pstream__, "\n");
                    }
                    current_statement__ = 174;
                    if (pstream__) {
                      stan_print(pstream__, rvalue(x,
                                              cons_list(index_omni(),
                                                cons_list(index_uni(it),
                                                  nil_index_list())), "x"));
                      stan_print(pstream__, "\n");
                    }
                  } 
                } 
                current_statement__ = 179;
                assign(x,
                  cons_list(index_uni(max_compartment),
                    cons_list(index_uni((it + 1)), nil_index_list())),
                  (rvalue(x,
                     cons_list(index_uni(max_compartment),
                       cons_list(index_uni((it + 1)), nil_index_list())),
                     "x") +
                    rvalue(x,
                      cons_list(index_uni(ii),
                        cons_list(index_uni((it + 1)), nil_index_list())),
                      "x")), "assigning variable x");
                current_statement__ = 180;
                assign(x,
                  cons_list(index_uni(ii),
                    cons_list(index_uni((it + 1)), nil_index_list())), 0,
                  "assigning variable x");
              } }
          } 
          current_statement__ = 189;
          if (logical_gt(
                stan::math::fabs(
                  (sum(
                     rvalue(x,
                       cons_list(index_omni(),
                         cons_list(index_uni((it + 1)), nil_index_list())),
                       "x")) - npop)), 0.01)) {
            current_statement__ = 187;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Model is leaking, net gain: ";
            errmsg_stream__ << (sum(
                                  rvalue(x,
                                    cons_list(index_omni(),
                                      cons_list(index_uni((it + 1)),
                                        nil_index_list())), "x")) - npop);
            errmsg_stream__ << "it= ";
            errmsg_stream__ << it;
            errmsg_stream__ << " ";
            errmsg_stream__ << rvalue(x,
                                 cons_list(index_omni(),
                                   cons_list(index_uni(it), nil_index_list())),
                                 "x");
            errmsg_stream__ << " ====  ";
            errmsg_stream__ << rvalue(x,
                                 cons_list(index_omni(),
                                   cons_list(index_uni((it + 1)),
                                     nil_index_list())), "x");
            throw std::domain_error(errmsg_stream__.str());
          } }
        current_statement__ = 197;
        for (int it = start_fit_frac; it <= end_fit_frac; ++it) {
          current_statement__ = 192;
          index = ((it - start_fit_frac) + 1);
          current_statement__ = 193;
          assign(frac_case2, cons_list(index_uni(index), nil_index_list()),
            stan::math::fmin((1 - 1e-6),
              stan::math::fmax(1e-6,
                (new_cases2[(it - 1)] /
                  ((new_cases1[(it - 1)] + new_cases2[(it - 1)]) + 1e-8)))),
            "assigning variable frac_case2");
          current_statement__ = 194;
          assign(X,
            cons_list(index_uni(index),
              cons_list(index_uni(1), nil_index_list())), 1.0,
            "assigning variable X");
          current_statement__ = 195;
          assign(X,
            cons_list(index_uni(index),
              cons_list(index_uni(2), nil_index_list())), it,
            "assigning variable X");}
        current_statement__ = 198;
        assign(frac_case2_growth_coef, nil_index_list(),
          mdivide_left_spd(multiply(transpose(X), X),
            multiply(transpose(X), logit(frac_case2))),
          "assigning variable frac_case2_growth_coef");
        current_statement__ = 199;
        frac_case2_growth = frac_case2_growth_coef[(2 - 1)];
        current_statement__ = 200;
        variant2_crossover_days = (-frac_case2_growth_coef[(1 - 1)] /
                                    frac_case2_growth_coef[(2 - 1)]);
        current_statement__ = 201;
        assign(sim_data,
          cons_list(index_uni(obs_hosp_census), nil_index_list()),
          add(
            multiply(
              rvalue(x, cons_list(index_uni(Hmod1), nil_index_list()), "x"),
              (1 + frac_incidental1)),
            multiply(
              rvalue(x, cons_list(index_uni(Hmod2), nil_index_list()), "x"),
              (1 + frac_incidental2))), "assigning variable sim_data");
        current_statement__ = 202;
        assign(sim_data, cons_list(index_uni(obs_cases), nil_index_list()),
          add(new_cases1, new_cases2), "assigning variable sim_data");
      }
      current_statement__ = 19;
      for (int sym1__ = 1; sym1__ <= ncompartments; ++sym1__) {
        current_statement__ = 19;
        for (int sym2__ = 1; sym2__ <= nt; ++sym2__) {
          current_statement__ = 19;
          current_statement__ = 19;
          check_greater_or_equal(function__, "x[sym1__, sym2__]",
                                 rvalue(x,
                                   cons_list(index_uni(sym1__),
                                     cons_list(index_uni(sym2__),
                                       nil_index_list())), "x"), 0.0);}}
      current_statement__ = 20;
      for (int sym1__ = 1; sym1__ <= nobs_types; ++sym1__) {
        current_statement__ = 20;
        for (int sym2__ = 1; sym2__ <= nt; ++sym2__) {
          current_statement__ = 20;
          current_statement__ = 20;
          check_greater_or_equal(function__, "sim_data[sym1__, sym2__]",
                                 rvalue(sim_data,
                                   cons_list(index_uni(sym1__),
                                     cons_list(index_uni(sym2__),
                                       nil_index_list())), "sim_data"), 0.0);
        }}
      current_statement__ = 21;
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        current_statement__ = 21;
        current_statement__ = 21;
        check_greater_or_equal(function__, "new_cases1[sym1__]",
                               new_cases1[(sym1__ - 1)], 0.0);}
      current_statement__ = 22;
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        current_statement__ = 22;
        current_statement__ = 22;
        check_greater_or_equal(function__, "new_cases2[sym1__]",
                               new_cases2[(sym1__ - 1)], 0.0);}
      current_statement__ = 23;
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        current_statement__ = 23;
        current_statement__ = 23;
        check_greater_or_equal(function__, "soon_positive1[sym1__]",
                               soon_positive1[(sym1__ - 1)], 0.0);}
      current_statement__ = 24;
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        current_statement__ = 24;
        current_statement__ = 24;
        check_greater_or_equal(function__, "soon_positive2[sym1__]",
                               soon_positive2[(sym1__ - 1)], 0.0);}
      current_statement__ = 25;
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        current_statement__ = 25;
        current_statement__ = 25;
        check_greater_or_equal(function__, "beta[sym1__]",
                               beta[(sym1__ - 1)], 0.0);}
      current_statement__ = 26;
      current_statement__ = 26;
      check_greater_or_equal(function__, "frac_hosp2_naive",
                             frac_hosp2_naive, 0.0);
      current_statement__ = 26;
      current_statement__ = 26;
      check_less_or_equal(function__, "frac_hosp2_naive", frac_hosp2_naive,
                          1.0);
      current_statement__ = 29;
      for (int sym1__ = 1; sym1__ <= nfrac_growth; ++sym1__) {
        current_statement__ = 29;
        current_statement__ = 29;
        check_greater_or_equal(function__, "frac_case2[sym1__]",
                               frac_case2[(sym1__ - 1)], 0.0);}
      current_statement__ = 29;
      for (int sym1__ = 1; sym1__ <= nfrac_growth; ++sym1__) {
        current_statement__ = 29;
        current_statement__ = 29;
        check_less_or_equal(function__, "frac_case2[sym1__]",
                            frac_case2[(sym1__ - 1)], 1.0);}
      current_statement__ = 31;
      current_statement__ = 31;
      check_greater_or_equal(function__, "beta_0", beta_0, 0.0);
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= ncompartments; ++sym2__) {
            vars__.emplace_back(
              rvalue(x,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "x"));}}
        for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= nobs_types; ++sym2__) {
            vars__.emplace_back(
              rvalue(sim_data,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())),
                "sim_data"));}}
        for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
          vars__.emplace_back(new_cases1[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
          vars__.emplace_back(new_cases2[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
          vars__.emplace_back(soon_positive1[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
          vars__.emplace_back(soon_positive2[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
          vars__.emplace_back(beta[(sym1__ - 1)]);}
        vars__.emplace_back(frac_hosp2_naive);
        vars__.emplace_back(frac_case2_growth);
        vars__.emplace_back(variant2_crossover_days);
        for (int sym1__ = 1; sym1__ <= nfrac_growth; ++sym1__) {
          vars__.emplace_back(frac_case2[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          vars__.emplace_back(frac_case2_growth_coef[(sym1__ - 1)]);}
        vars__.emplace_back(beta_0);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, -1> sim_data_with_error;
      sim_data_with_error = Eigen::Matrix<double, -1, -1>(nobs_types, nt);
      stan::math::fill(sim_data_with_error, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> Rt1;
      Rt1 = std::vector<double>(nt, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> Rt2;
      Rt2 = std::vector<double>(nt, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 221;
      if (fit_to_data) {
        current_statement__ = 219;
        for (int itype = 1; itype <= nobs_types; ++itype) {
          current_statement__ = 217;
          if (logical_gt(nobs[(itype - 1)], 0)) {
            current_statement__ = 215;
            for (int it = 1; it <= nt; ++it) {
              current_statement__ = 213;
              assign(sim_data_with_error,
                cons_list(index_uni(itype),
                  cons_list(index_uni(it), nil_index_list())),
                stan::math::fmax(0.0,
                  normal_rng(
                    rvalue(sim_data,
                      cons_list(index_uni(itype),
                        cons_list(index_uni(it), nil_index_list())),
                      "sim_data"), sigma_obs[(itype - 1)], base_rng__)),
                "assigning variable sim_data_with_error");}
          } else {
            current_statement__ = 211;
            assign(sim_data_with_error,
              cons_list(index_uni(itype), nil_index_list()),
              rvalue(sim_data, cons_list(index_uni(itype), nil_index_list()),
                "sim_data"), "assigning variable sim_data_with_error");
          }}
      } else {
        current_statement__ = 209;
        for (int itype = 1; itype <= nobs_types; ++itype) {
          current_statement__ = 207;
          assign(sim_data_with_error,
            cons_list(index_uni(itype), nil_index_list()),
            rvalue(sim_data, cons_list(index_uni(itype), nil_index_list()),
              "sim_data"), "assigning variable sim_data_with_error");}
      }
      {
        double S2;
        S2 = std::numeric_limits<double>::quiet_NaN();
        
        current_statement__ = 227;
        for (int it = 1; it <= nt; ++it) {
          current_statement__ = 223;
          S2 = (rvalue(x,
                  cons_list(index_uni(S),
                    cons_list(index_uni(it), nil_index_list())), "x") +
                 rvalue(x,
                   cons_list(index_uni(P1),
                     cons_list(index_uni(it), nil_index_list())), "x"));
          current_statement__ = 224;
          assign(Rt1, cons_list(index_uni(it), nil_index_list()),
            (((beta[(it - 1)] *
                rvalue(x,
                  cons_list(index_uni(S),
                    cons_list(index_uni(it), nil_index_list())), "x")) /
               npop) * duration_rec_mild), "assigning variable Rt1");
          current_statement__ = 225;
          assign(Rt2, cons_list(index_uni(it), nil_index_list()),
            ((((beta[(it - 1)] * trans_multiplier) * S2) / npop) *
              duration_rec_mild), "assigning variable Rt2");}
      }
      current_statement__ = 205;
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        current_statement__ = 205;
        current_statement__ = 205;
        check_greater_or_equal(function__, "Rt1[sym1__]", Rt1[(sym1__ - 1)],
                               0.0);}
      current_statement__ = 206;
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        current_statement__ = 206;
        current_statement__ = 206;
        check_greater_or_equal(function__, "Rt2[sym1__]", Rt2[(sym1__ - 1)],
                               0.0);}
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nobs_types; ++sym2__) {
          vars__.emplace_back(
            rvalue(sim_data_with_error,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              "sim_data_with_error"));}}
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        vars__.emplace_back(Rt1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        vars__.emplace_back(Rt2[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double duration_latent1;
      duration_latent1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      duration_latent1 = context__.vals_r("duration_latent1")[(1 - 1)];
      double duration_latent1_free__;
      duration_latent1_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      duration_latent1_free__ = stan::math::lb_free(duration_latent1, 1.0);
      double duration_latent2;
      duration_latent2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      duration_latent2 = context__.vals_r("duration_latent2")[(1 - 1)];
      double duration_latent2_free__;
      duration_latent2_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      duration_latent2_free__ = stan::math::lb_free(duration_latent2, 1.0);
      double duration_rec_mild;
      duration_rec_mild = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      duration_rec_mild = context__.vals_r("duration_rec_mild")[(1 - 1)];
      double duration_rec_mild_free__;
      duration_rec_mild_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      duration_rec_mild_free__ = stan::math::lub_free(duration_rec_mild, 1.0,
                                   999.0);
      double duration_pre_hosp;
      duration_pre_hosp = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      duration_pre_hosp = context__.vals_r("duration_pre_hosp")[(1 - 1)];
      double duration_pre_hosp_free__;
      duration_pre_hosp_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      duration_pre_hosp_free__ = stan::math::lb_free(duration_pre_hosp, 1.0);
      double duration_hosp_mod1;
      duration_hosp_mod1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      duration_hosp_mod1 = context__.vals_r("duration_hosp_mod1")[(1 - 1)];
      double duration_hosp_mod1_free__;
      duration_hosp_mod1_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      duration_hosp_mod1_free__ = stan::math::lb_free(duration_hosp_mod1, 1.0);
      double duration_hosp_mod2;
      duration_hosp_mod2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      duration_hosp_mod2 = context__.vals_r("duration_hosp_mod2")[(1 - 1)];
      double duration_hosp_mod2_free__;
      duration_hosp_mod2_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      duration_hosp_mod2_free__ = stan::math::lb_free(duration_hosp_mod2, 1.0);
      double duration_protection_infection;
      duration_protection_infection = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      duration_protection_infection = context__.vals_r("duration_protection_infection")[
          (1 - 1)];
      double duration_protection_infection_free__;
      duration_protection_infection_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      duration_protection_infection_free__ = stan::math::lb_free(
                                               duration_protection_infection,
                                               1.0);
      double frac_hosp1_naive;
      frac_hosp1_naive = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      frac_hosp1_naive = context__.vals_r("frac_hosp1_naive")[(1 - 1)];
      double frac_hosp1_naive_free__;
      frac_hosp1_naive_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      frac_hosp1_naive_free__ = stan::math::lub_free(frac_hosp1_naive, 0.001,
                                  1.0);
      double frac_hosp_multiplier;
      frac_hosp_multiplier = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      frac_hosp_multiplier = context__.vals_r("frac_hosp_multiplier")[
          (1 - 1)];
      double frac_hosp_multiplier_free__;
      frac_hosp_multiplier_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      frac_hosp_multiplier_free__ = stan::math::lb_free(frac_hosp_multiplier,
                                      0.001);
      double frac_tested;
      frac_tested = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      frac_tested = context__.vals_r("frac_tested")[(1 - 1)];
      double frac_tested_free__;
      frac_tested_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      frac_tested_free__ = stan::math::lub_free(frac_tested, 0.001, 1.0);
      double initial_exposed2_frac;
      initial_exposed2_frac = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 11;
      initial_exposed2_frac = context__.vals_r("initial_exposed2_frac")[
          (1 - 1)];
      double initial_exposed2_frac_free__;
      initial_exposed2_frac_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 11;
      initial_exposed2_frac_free__ = stan::math::lub_free(
                                       initial_exposed2_frac, 1e-6, 1);
      std::vector<double> sigma_obs;
      sigma_obs = std::vector<double>(nobs_types, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 12;
      assign(sigma_obs, nil_index_list(), context__.vals_r("sigma_obs"),
        "assigning variable sigma_obs");
      std::vector<double> sigma_obs_free__;
      sigma_obs_free__ = std::vector<double>(nobs_types, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= nobs_types; ++sym1__) {
        current_statement__ = 12;
        assign(sigma_obs_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(sigma_obs[(sym1__ - 1)], 0.001),
          "assigning variable sigma_obs_free__");}
      double test_delay;
      test_delay = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 13;
      test_delay = context__.vals_r("test_delay")[(1 - 1)];
      double test_delay_free__;
      test_delay_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 13;
      test_delay_free__ = stan::math::lb_free(test_delay, 1.0);
      double Rt1_init;
      Rt1_init = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 14;
      Rt1_init = context__.vals_r("Rt1_init")[(1 - 1)];
      double Rt1_init_free__;
      Rt1_init_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 14;
      Rt1_init_free__ = stan::math::lub_free(Rt1_init, 0.001, 9.9);
      double trans_multiplier;
      trans_multiplier = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 15;
      trans_multiplier = context__.vals_r("trans_multiplier")[(1 - 1)];
      double trans_multiplier_free__;
      trans_multiplier_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 15;
      trans_multiplier_free__ = stan::math::lub_free(trans_multiplier, 0.001,
                                  3.0);
      double VE_infection1;
      VE_infection1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 16;
      VE_infection1 = context__.vals_r("VE_infection1")[(1 - 1)];
      double VE_infection1_free__;
      VE_infection1_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 16;
      VE_infection1_free__ = stan::math::lub_free(VE_infection1, 0.001, 1.0);
      double immune_evasion;
      immune_evasion = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 17;
      immune_evasion = context__.vals_r("immune_evasion")[(1 - 1)];
      double immune_evasion_free__;
      immune_evasion_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 17;
      immune_evasion_free__ = stan::math::lub_free(immune_evasion, 0.001, 1.0);
      std::vector<double> beta_multiplier;
      beta_multiplier = std::vector<double>(ninter, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 18;
      assign(beta_multiplier, nil_index_list(),
        context__.vals_r("beta_multiplier"),
        "assigning variable beta_multiplier");
      std::vector<double> beta_multiplier_free__;
      beta_multiplier_free__ = std::vector<double>(ninter, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 18;
      for (int sym1__ = 1; sym1__ <= ninter; ++sym1__) {
        current_statement__ = 18;
        assign(beta_multiplier_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(beta_multiplier[(sym1__ - 1)], 0.0),
          "assigning variable beta_multiplier_free__");}
      vars__.emplace_back(duration_latent1_free__);
      vars__.emplace_back(duration_latent2_free__);
      vars__.emplace_back(duration_rec_mild_free__);
      vars__.emplace_back(duration_pre_hosp_free__);
      vars__.emplace_back(duration_hosp_mod1_free__);
      vars__.emplace_back(duration_hosp_mod2_free__);
      vars__.emplace_back(duration_protection_infection_free__);
      vars__.emplace_back(frac_hosp1_naive_free__);
      vars__.emplace_back(frac_hosp_multiplier_free__);
      vars__.emplace_back(frac_tested_free__);
      vars__.emplace_back(initial_exposed2_frac_free__);
      for (int sym1__ = 1; sym1__ <= nobs_types; ++sym1__) {
        vars__.emplace_back(sigma_obs_free__[(sym1__ - 1)]);}
      vars__.emplace_back(test_delay_free__);
      vars__.emplace_back(Rt1_init_free__);
      vars__.emplace_back(trans_multiplier_free__);
      vars__.emplace_back(VE_infection1_free__);
      vars__.emplace_back(immune_evasion_free__);
      for (int sym1__ = 1; sym1__ <= ninter; ++sym1__) {
        vars__.emplace_back(beta_multiplier_free__[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("duration_latent1");
    names__.emplace_back("duration_latent2");
    names__.emplace_back("duration_rec_mild");
    names__.emplace_back("duration_pre_hosp");
    names__.emplace_back("duration_hosp_mod1");
    names__.emplace_back("duration_hosp_mod2");
    names__.emplace_back("duration_protection_infection");
    names__.emplace_back("frac_hosp1_naive");
    names__.emplace_back("frac_hosp_multiplier");
    names__.emplace_back("frac_tested");
    names__.emplace_back("initial_exposed2_frac");
    names__.emplace_back("sigma_obs");
    names__.emplace_back("test_delay");
    names__.emplace_back("Rt1_init");
    names__.emplace_back("trans_multiplier");
    names__.emplace_back("VE_infection1");
    names__.emplace_back("immune_evasion");
    names__.emplace_back("beta_multiplier");
    names__.emplace_back("x");
    names__.emplace_back("sim_data");
    names__.emplace_back("new_cases1");
    names__.emplace_back("new_cases2");
    names__.emplace_back("soon_positive1");
    names__.emplace_back("soon_positive2");
    names__.emplace_back("beta");
    names__.emplace_back("frac_hosp2_naive");
    names__.emplace_back("frac_case2_growth");
    names__.emplace_back("variant2_crossover_days");
    names__.emplace_back("frac_case2");
    names__.emplace_back("frac_case2_growth_coef");
    names__.emplace_back("beta_0");
    names__.emplace_back("sim_data_with_error");
    names__.emplace_back("Rt1");
    names__.emplace_back("Rt2");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nobs_types)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(ninter)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(ncompartments)
                                             , static_cast<size_t>(nt)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nobs_types),
                                             static_cast<size_t>(nt)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nt)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nt)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nt)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nt)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nt)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(nfrac_growth)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nobs_types),
                                             static_cast<size_t>(nt)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nt)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nt)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "duration_latent1");
    param_names__.emplace_back(std::string() + "duration_latent2");
    param_names__.emplace_back(std::string() + "duration_rec_mild");
    param_names__.emplace_back(std::string() + "duration_pre_hosp");
    param_names__.emplace_back(std::string() + "duration_hosp_mod1");
    param_names__.emplace_back(std::string() + "duration_hosp_mod2");
    param_names__.emplace_back(std::string() + "duration_protection_infection");
    param_names__.emplace_back(std::string() + "frac_hosp1_naive");
    param_names__.emplace_back(std::string() + "frac_hosp_multiplier");
    param_names__.emplace_back(std::string() + "frac_tested");
    param_names__.emplace_back(std::string() + "initial_exposed2_frac");
    for (int sym1__ = 1; sym1__ <= nobs_types; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_obs" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "test_delay");
    param_names__.emplace_back(std::string() + "Rt1_init");
    param_names__.emplace_back(std::string() + "trans_multiplier");
    param_names__.emplace_back(std::string() + "VE_infection1");
    param_names__.emplace_back(std::string() + "immune_evasion");
    for (int sym1__ = 1; sym1__ <= ninter; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_multiplier" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= ncompartments; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "x" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nobs_types; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "sim_data" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "new_cases1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "new_cases2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "soon_positive1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "soon_positive2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "frac_hosp2_naive");
      param_names__.emplace_back(std::string() + "frac_case2_growth");
      param_names__.emplace_back(std::string() + "variant2_crossover_days");
      for (int sym1__ = 1; sym1__ <= nfrac_growth; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "frac_case2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "frac_case2_growth_coef" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "beta_0");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nobs_types; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "sim_data_with_error" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Rt1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Rt2" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "duration_latent1");
    param_names__.emplace_back(std::string() + "duration_latent2");
    param_names__.emplace_back(std::string() + "duration_rec_mild");
    param_names__.emplace_back(std::string() + "duration_pre_hosp");
    param_names__.emplace_back(std::string() + "duration_hosp_mod1");
    param_names__.emplace_back(std::string() + "duration_hosp_mod2");
    param_names__.emplace_back(std::string() + "duration_protection_infection");
    param_names__.emplace_back(std::string() + "frac_hosp1_naive");
    param_names__.emplace_back(std::string() + "frac_hosp_multiplier");
    param_names__.emplace_back(std::string() + "frac_tested");
    param_names__.emplace_back(std::string() + "initial_exposed2_frac");
    for (int sym1__ = 1; sym1__ <= nobs_types; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_obs" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "test_delay");
    param_names__.emplace_back(std::string() + "Rt1_init");
    param_names__.emplace_back(std::string() + "trans_multiplier");
    param_names__.emplace_back(std::string() + "VE_infection1");
    param_names__.emplace_back(std::string() + "immune_evasion");
    for (int sym1__ = 1; sym1__ <= ninter; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_multiplier" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= ncompartments; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "x" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nobs_types; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "sim_data" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "new_cases1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "new_cases2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "soon_positive1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "soon_positive2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "frac_hosp2_naive");
      param_names__.emplace_back(std::string() + "frac_case2_growth");
      param_names__.emplace_back(std::string() + "variant2_crossover_days");
      for (int sym1__ = 1; sym1__ <= nfrac_growth; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "frac_case2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "frac_case2_growth_coef" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "beta_0");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nobs_types; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "sim_data_with_error" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Rt1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Rt2" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"duration_latent1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"duration_latent2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"duration_rec_mild\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"duration_pre_hosp\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"duration_hosp_mod1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"duration_hosp_mod2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"duration_protection_infection\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"frac_hosp1_naive\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"frac_hosp_multiplier\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"frac_tested\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"initial_exposed2_frac\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_obs\",\"type\":{\"name\":\"array\",\"length\":" << nobs_types << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"test_delay\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Rt1_init\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"trans_multiplier\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"VE_infection1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"immune_evasion\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_multiplier\",\"type\":{\"name\":\"array\",\"length\":" << ninter << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"x\",\"type\":{\"name\":\"matrix\",\"rows\":" << ncompartments << ",\"cols\":" << nt << "},\"block\":\"transformed_parameters\"},{\"name\":\"sim_data\",\"type\":{\"name\":\"matrix\",\"rows\":" << nobs_types << ",\"cols\":" << nt << "},\"block\":\"transformed_parameters\"},{\"name\":\"new_cases1\",\"type\":{\"name\":\"vector\",\"length\":" << nt << "},\"block\":\"transformed_parameters\"},{\"name\":\"new_cases2\",\"type\":{\"name\":\"vector\",\"length\":" << nt << "},\"block\":\"transformed_parameters\"},{\"name\":\"soon_positive1\",\"type\":{\"name\":\"vector\",\"length\":" << nt << "},\"block\":\"transformed_parameters\"},{\"name\":\"soon_positive2\",\"type\":{\"name\":\"vector\",\"length\":" << nt << "},\"block\":\"transformed_parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"array\",\"length\":" << nt << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"frac_hosp2_naive\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"frac_case2_growth\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"variant2_crossover_days\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"frac_case2\",\"type\":{\"name\":\"vector\",\"length\":" << nfrac_growth << "},\"block\":\"transformed_parameters\"},{\"name\":\"frac_case2_growth_coef\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_0\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"sim_data_with_error\",\"type\":{\"name\":\"matrix\",\"rows\":" << nobs_types << ",\"cols\":" << nt << "},\"block\":\"generated_quantities\"},{\"name\":\"Rt1\",\"type\":{\"name\":\"array\",\"length\":" << nt << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Rt2\",\"type\":{\"name\":\"array\",\"length\":" << nt << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"duration_latent1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"duration_latent2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"duration_rec_mild\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"duration_pre_hosp\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"duration_hosp_mod1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"duration_hosp_mod2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"duration_protection_infection\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"frac_hosp1_naive\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"frac_hosp_multiplier\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"frac_tested\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"initial_exposed2_frac\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_obs\",\"type\":{\"name\":\"array\",\"length\":" << nobs_types << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"test_delay\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Rt1_init\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"trans_multiplier\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"VE_infection1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"immune_evasion\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_multiplier\",\"type\":{\"name\":\"array\",\"length\":" << ninter << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"x\",\"type\":{\"name\":\"matrix\",\"rows\":" << ncompartments << ",\"cols\":" << nt << "},\"block\":\"transformed_parameters\"},{\"name\":\"sim_data\",\"type\":{\"name\":\"matrix\",\"rows\":" << nobs_types << ",\"cols\":" << nt << "},\"block\":\"transformed_parameters\"},{\"name\":\"new_cases1\",\"type\":{\"name\":\"vector\",\"length\":" << nt << "},\"block\":\"transformed_parameters\"},{\"name\":\"new_cases2\",\"type\":{\"name\":\"vector\",\"length\":" << nt << "},\"block\":\"transformed_parameters\"},{\"name\":\"soon_positive1\",\"type\":{\"name\":\"vector\",\"length\":" << nt << "},\"block\":\"transformed_parameters\"},{\"name\":\"soon_positive2\",\"type\":{\"name\":\"vector\",\"length\":" << nt << "},\"block\":\"transformed_parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"array\",\"length\":" << nt << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"frac_hosp2_naive\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"frac_case2_growth\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"variant2_crossover_days\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"frac_case2\",\"type\":{\"name\":\"vector\",\"length\":" << nfrac_growth << "},\"block\":\"transformed_parameters\"},{\"name\":\"frac_case2_growth_coef\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_0\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"sim_data_with_error\",\"type\":{\"name\":\"matrix\",\"rows\":" << nobs_types << ",\"cols\":" << nt << "},\"block\":\"generated_quantities\"},{\"name\":\"Rt1\",\"type\":{\"name\":\"array\",\"length\":" << nt << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Rt2\",\"type\":{\"name\":\"array\",\"length\":" << nt << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_LEMMA_namespace::model_LEMMA;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_LEMMA_namespace::profiles__;
}
#endif
#endif
