// Generated by rstantools.  Do not edit by hand.

/*
    LEMMA is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    LEMMA is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with LEMMA.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_LEMMA_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_LEMMA");
    reader.add_event(381, 379, "end", "model_LEMMA");
    return reader;
}
#include <stan_meta_header.hpp>
class model_LEMMA
  : public stan::model::model_base_crtp<model_LEMMA> {
private:
        int nobs_types;
        std::vector<int> nobs;
        int nobs_max;
        std::vector<std::vector<int> > tobs;
        matrix_d obs_data;
        int nt;
        double npop;
        int extend;
        int from_beginning;
        double mu_duration_latent;
        double sigma_duration_latent;
        double mu_duration_rec_mild;
        double sigma_duration_rec_mild;
        double mu_duration_pre_hosp;
        double sigma_duration_pre_hosp;
        double mu_duration_hosp_mod;
        double sigma_duration_hosp_mod;
        double mu_duration_hosp_icu;
        double sigma_duration_hosp_icu;
        double mu_r0;
        double sigma_r0;
        double mu_frac_hosp;
        double sigma_frac_hosp;
        double mu_frac_icu;
        double sigma_frac_icu;
        double mu_frac_mort;
        double sigma_frac_mort;
        double mu_iniE;
        double sigma_iniE;
        double mu_ini_Imild;
        double sigma_ini_Imild;
        double mu_ini_Ipreh;
        double sigma_ini_Ipreh;
        double mu_ini_Rlive;
        double sigma_ini_Rlive;
        double mu_ini_cases;
        double sigma_ini_cases;
        int ninter;
        std::vector<double> mu_t_inter;
        std::vector<double> sigma_t_inter;
        std::vector<double> len_inter;
        std::vector<double> mu_beta_inter;
        std::vector<double> sigma_beta_inter;
        std::vector<double> vaccinated_per_day;
        std::vector<double> vaccine_efficacy_for_susceptibility;
        std::vector<double> vaccine_efficacy_against_progression;
        std::vector<double> duration_vaccinated;
        std::vector<double> duration_natural;
        std::vector<double> frac_hosp_multiplier;
        std::vector<double> frac_icu_multiplier;
        std::vector<double> frac_mort_multiplier;
        std::vector<double> sigma_obs_est_inv;
        double mu_frac_tested;
        double sigma_frac_tested;
        int Su;
        int Sv;
        int Eu;
        int Ev;
        int Imildu;
        int Imildv;
        int Iprehu;
        int Iprehv;
        int Hmodu;
        int Hmodv;
        int Hicuu;
        int Hicuv;
        int Rliveu;
        int Rlivev;
        int Rmort;
        int ncompartments;
        int obs_hosp_census;
        int obs_icu_census;
        int obs_cum_deaths;
        int obs_cum_admits;
        int obs_cases;
        int obs_seroprev;
        double beta_limit;
public:
    model_LEMMA(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_LEMMA(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_LEMMA_namespace::model_LEMMA";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 14;
            context__.validate_dims("data initialization", "nobs_types", "int", context__.to_vec());
            nobs_types = int(0);
            vals_i__ = context__.vals_i("nobs_types");
            pos__ = 0;
            nobs_types = vals_i__[pos__++];
            check_greater_or_equal(function__, "nobs_types", nobs_types, 0);
            current_statement_begin__ = 15;
            validate_non_negative_index("nobs", "nobs_types", nobs_types);
            context__.validate_dims("data initialization", "nobs", "int", context__.to_vec(nobs_types));
            nobs = std::vector<int>(nobs_types, int(0));
            vals_i__ = context__.vals_i("nobs");
            pos__ = 0;
            size_t nobs_k_0_max__ = nobs_types;
            for (size_t k_0__ = 0; k_0__ < nobs_k_0_max__; ++k_0__) {
                nobs[k_0__] = vals_i__[pos__++];
            }
            size_t nobs_i_0_max__ = nobs_types;
            for (size_t i_0__ = 0; i_0__ < nobs_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "nobs[i_0__]", nobs[i_0__], 0);
            }
            current_statement_begin__ = 16;
            context__.validate_dims("data initialization", "nobs_max", "int", context__.to_vec());
            nobs_max = int(0);
            vals_i__ = context__.vals_i("nobs_max");
            pos__ = 0;
            nobs_max = vals_i__[pos__++];
            check_greater_or_equal(function__, "nobs_max", nobs_max, 0);
            current_statement_begin__ = 17;
            validate_non_negative_index("tobs", "nobs_types", nobs_types);
            validate_non_negative_index("tobs", "nobs_max", nobs_max);
            context__.validate_dims("data initialization", "tobs", "int", context__.to_vec(nobs_types,nobs_max));
            tobs = std::vector<std::vector<int> >(nobs_types, std::vector<int>(nobs_max, int(0)));
            vals_i__ = context__.vals_i("tobs");
            pos__ = 0;
            size_t tobs_k_0_max__ = nobs_types;
            size_t tobs_k_1_max__ = nobs_max;
            for (size_t k_1__ = 0; k_1__ < tobs_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < tobs_k_0_max__; ++k_0__) {
                    tobs[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t tobs_i_0_max__ = nobs_types;
            size_t tobs_i_1_max__ = nobs_max;
            for (size_t i_0__ = 0; i_0__ < tobs_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < tobs_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "tobs[i_0__][i_1__]", tobs[i_0__][i_1__], -(1));
                }
            }
            current_statement_begin__ = 18;
            validate_non_negative_index("obs_data", "nobs_types", nobs_types);
            validate_non_negative_index("obs_data", "nobs_max", nobs_max);
            context__.validate_dims("data initialization", "obs_data", "matrix_d", context__.to_vec(nobs_types,nobs_max));
            obs_data = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(nobs_types, nobs_max);
            vals_r__ = context__.vals_r("obs_data");
            pos__ = 0;
            size_t obs_data_j_2_max__ = nobs_max;
            size_t obs_data_j_1_max__ = nobs_types;
            for (size_t j_2__ = 0; j_2__ < obs_data_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < obs_data_j_1_max__; ++j_1__) {
                    obs_data(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            check_greater_or_equal(function__, "obs_data", obs_data, -(1.0));
            current_statement_begin__ = 20;
            context__.validate_dims("data initialization", "nt", "int", context__.to_vec());
            nt = int(0);
            vals_i__ = context__.vals_i("nt");
            pos__ = 0;
            nt = vals_i__[pos__++];
            check_greater_or_equal(function__, "nt", nt, 0);
            current_statement_begin__ = 21;
            context__.validate_dims("data initialization", "npop", "double", context__.to_vec());
            npop = double(0);
            vals_r__ = context__.vals_r("npop");
            pos__ = 0;
            npop = vals_r__[pos__++];
            check_greater_or_equal(function__, "npop", npop, 0.0);
            current_statement_begin__ = 22;
            context__.validate_dims("data initialization", "extend", "int", context__.to_vec());
            extend = int(0);
            vals_i__ = context__.vals_i("extend");
            pos__ = 0;
            extend = vals_i__[pos__++];
            check_greater_or_equal(function__, "extend", extend, 0);
            check_less_or_equal(function__, "extend", extend, 1);
            current_statement_begin__ = 23;
            context__.validate_dims("data initialization", "from_beginning", "int", context__.to_vec());
            from_beginning = int(0);
            vals_i__ = context__.vals_i("from_beginning");
            pos__ = 0;
            from_beginning = vals_i__[pos__++];
            check_greater_or_equal(function__, "from_beginning", from_beginning, 0);
            check_less_or_equal(function__, "from_beginning", from_beginning, 1);
            current_statement_begin__ = 27;
            context__.validate_dims("data initialization", "mu_duration_latent", "double", context__.to_vec());
            mu_duration_latent = double(0);
            vals_r__ = context__.vals_r("mu_duration_latent");
            pos__ = 0;
            mu_duration_latent = vals_r__[pos__++];
            check_greater_or_equal(function__, "mu_duration_latent", mu_duration_latent, 1.0);
            current_statement_begin__ = 28;
            context__.validate_dims("data initialization", "sigma_duration_latent", "double", context__.to_vec());
            sigma_duration_latent = double(0);
            vals_r__ = context__.vals_r("sigma_duration_latent");
            pos__ = 0;
            sigma_duration_latent = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_duration_latent", sigma_duration_latent, 0.0);
            current_statement_begin__ = 29;
            context__.validate_dims("data initialization", "mu_duration_rec_mild", "double", context__.to_vec());
            mu_duration_rec_mild = double(0);
            vals_r__ = context__.vals_r("mu_duration_rec_mild");
            pos__ = 0;
            mu_duration_rec_mild = vals_r__[pos__++];
            check_greater_or_equal(function__, "mu_duration_rec_mild", mu_duration_rec_mild, 1.0);
            current_statement_begin__ = 30;
            context__.validate_dims("data initialization", "sigma_duration_rec_mild", "double", context__.to_vec());
            sigma_duration_rec_mild = double(0);
            vals_r__ = context__.vals_r("sigma_duration_rec_mild");
            pos__ = 0;
            sigma_duration_rec_mild = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_duration_rec_mild", sigma_duration_rec_mild, 0.0);
            current_statement_begin__ = 31;
            context__.validate_dims("data initialization", "mu_duration_pre_hosp", "double", context__.to_vec());
            mu_duration_pre_hosp = double(0);
            vals_r__ = context__.vals_r("mu_duration_pre_hosp");
            pos__ = 0;
            mu_duration_pre_hosp = vals_r__[pos__++];
            check_greater_or_equal(function__, "mu_duration_pre_hosp", mu_duration_pre_hosp, 1.0);
            current_statement_begin__ = 32;
            context__.validate_dims("data initialization", "sigma_duration_pre_hosp", "double", context__.to_vec());
            sigma_duration_pre_hosp = double(0);
            vals_r__ = context__.vals_r("sigma_duration_pre_hosp");
            pos__ = 0;
            sigma_duration_pre_hosp = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_duration_pre_hosp", sigma_duration_pre_hosp, 0.0);
            current_statement_begin__ = 33;
            context__.validate_dims("data initialization", "mu_duration_hosp_mod", "double", context__.to_vec());
            mu_duration_hosp_mod = double(0);
            vals_r__ = context__.vals_r("mu_duration_hosp_mod");
            pos__ = 0;
            mu_duration_hosp_mod = vals_r__[pos__++];
            check_greater_or_equal(function__, "mu_duration_hosp_mod", mu_duration_hosp_mod, 1.0);
            current_statement_begin__ = 34;
            context__.validate_dims("data initialization", "sigma_duration_hosp_mod", "double", context__.to_vec());
            sigma_duration_hosp_mod = double(0);
            vals_r__ = context__.vals_r("sigma_duration_hosp_mod");
            pos__ = 0;
            sigma_duration_hosp_mod = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_duration_hosp_mod", sigma_duration_hosp_mod, 0.0);
            current_statement_begin__ = 35;
            context__.validate_dims("data initialization", "mu_duration_hosp_icu", "double", context__.to_vec());
            mu_duration_hosp_icu = double(0);
            vals_r__ = context__.vals_r("mu_duration_hosp_icu");
            pos__ = 0;
            mu_duration_hosp_icu = vals_r__[pos__++];
            check_greater_or_equal(function__, "mu_duration_hosp_icu", mu_duration_hosp_icu, 1.0);
            current_statement_begin__ = 36;
            context__.validate_dims("data initialization", "sigma_duration_hosp_icu", "double", context__.to_vec());
            sigma_duration_hosp_icu = double(0);
            vals_r__ = context__.vals_r("sigma_duration_hosp_icu");
            pos__ = 0;
            sigma_duration_hosp_icu = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_duration_hosp_icu", sigma_duration_hosp_icu, 0.0);
            current_statement_begin__ = 38;
            context__.validate_dims("data initialization", "mu_r0", "double", context__.to_vec());
            mu_r0 = double(0);
            vals_r__ = context__.vals_r("mu_r0");
            pos__ = 0;
            mu_r0 = vals_r__[pos__++];
            check_greater_or_equal(function__, "mu_r0", mu_r0, 0.0);
            current_statement_begin__ = 39;
            context__.validate_dims("data initialization", "sigma_r0", "double", context__.to_vec());
            sigma_r0 = double(0);
            vals_r__ = context__.vals_r("sigma_r0");
            pos__ = 0;
            sigma_r0 = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_r0", sigma_r0, 0.0);
            current_statement_begin__ = 41;
            context__.validate_dims("data initialization", "mu_frac_hosp", "double", context__.to_vec());
            mu_frac_hosp = double(0);
            vals_r__ = context__.vals_r("mu_frac_hosp");
            pos__ = 0;
            mu_frac_hosp = vals_r__[pos__++];
            check_greater_or_equal(function__, "mu_frac_hosp", mu_frac_hosp, 0.0);
            current_statement_begin__ = 42;
            context__.validate_dims("data initialization", "sigma_frac_hosp", "double", context__.to_vec());
            sigma_frac_hosp = double(0);
            vals_r__ = context__.vals_r("sigma_frac_hosp");
            pos__ = 0;
            sigma_frac_hosp = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_frac_hosp", sigma_frac_hosp, 0.0);
            current_statement_begin__ = 43;
            context__.validate_dims("data initialization", "mu_frac_icu", "double", context__.to_vec());
            mu_frac_icu = double(0);
            vals_r__ = context__.vals_r("mu_frac_icu");
            pos__ = 0;
            mu_frac_icu = vals_r__[pos__++];
            check_greater_or_equal(function__, "mu_frac_icu", mu_frac_icu, 0.0);
            current_statement_begin__ = 44;
            context__.validate_dims("data initialization", "sigma_frac_icu", "double", context__.to_vec());
            sigma_frac_icu = double(0);
            vals_r__ = context__.vals_r("sigma_frac_icu");
            pos__ = 0;
            sigma_frac_icu = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_frac_icu", sigma_frac_icu, 0.0);
            current_statement_begin__ = 45;
            context__.validate_dims("data initialization", "mu_frac_mort", "double", context__.to_vec());
            mu_frac_mort = double(0);
            vals_r__ = context__.vals_r("mu_frac_mort");
            pos__ = 0;
            mu_frac_mort = vals_r__[pos__++];
            check_greater_or_equal(function__, "mu_frac_mort", mu_frac_mort, 0.0);
            current_statement_begin__ = 46;
            context__.validate_dims("data initialization", "sigma_frac_mort", "double", context__.to_vec());
            sigma_frac_mort = double(0);
            vals_r__ = context__.vals_r("sigma_frac_mort");
            pos__ = 0;
            sigma_frac_mort = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_frac_mort", sigma_frac_mort, 0.0);
            current_statement_begin__ = 49;
            context__.validate_dims("data initialization", "mu_iniE", "double", context__.to_vec());
            mu_iniE = double(0);
            vals_r__ = context__.vals_r("mu_iniE");
            pos__ = 0;
            mu_iniE = vals_r__[pos__++];
            check_greater_or_equal(function__, "mu_iniE", mu_iniE, 0.0);
            current_statement_begin__ = 50;
            context__.validate_dims("data initialization", "sigma_iniE", "double", context__.to_vec());
            sigma_iniE = double(0);
            vals_r__ = context__.vals_r("sigma_iniE");
            pos__ = 0;
            sigma_iniE = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_iniE", sigma_iniE, 0.0);
            current_statement_begin__ = 51;
            context__.validate_dims("data initialization", "mu_ini_Imild", "double", context__.to_vec());
            mu_ini_Imild = double(0);
            vals_r__ = context__.vals_r("mu_ini_Imild");
            pos__ = 0;
            mu_ini_Imild = vals_r__[pos__++];
            check_greater_or_equal(function__, "mu_ini_Imild", mu_ini_Imild, 0.0);
            current_statement_begin__ = 52;
            context__.validate_dims("data initialization", "sigma_ini_Imild", "double", context__.to_vec());
            sigma_ini_Imild = double(0);
            vals_r__ = context__.vals_r("sigma_ini_Imild");
            pos__ = 0;
            sigma_ini_Imild = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_ini_Imild", sigma_ini_Imild, 0.0);
            current_statement_begin__ = 53;
            context__.validate_dims("data initialization", "mu_ini_Ipreh", "double", context__.to_vec());
            mu_ini_Ipreh = double(0);
            vals_r__ = context__.vals_r("mu_ini_Ipreh");
            pos__ = 0;
            mu_ini_Ipreh = vals_r__[pos__++];
            check_greater_or_equal(function__, "mu_ini_Ipreh", mu_ini_Ipreh, 0.0);
            current_statement_begin__ = 54;
            context__.validate_dims("data initialization", "sigma_ini_Ipreh", "double", context__.to_vec());
            sigma_ini_Ipreh = double(0);
            vals_r__ = context__.vals_r("sigma_ini_Ipreh");
            pos__ = 0;
            sigma_ini_Ipreh = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_ini_Ipreh", sigma_ini_Ipreh, 0.0);
            current_statement_begin__ = 55;
            context__.validate_dims("data initialization", "mu_ini_Rlive", "double", context__.to_vec());
            mu_ini_Rlive = double(0);
            vals_r__ = context__.vals_r("mu_ini_Rlive");
            pos__ = 0;
            mu_ini_Rlive = vals_r__[pos__++];
            check_greater_or_equal(function__, "mu_ini_Rlive", mu_ini_Rlive, 0.0);
            current_statement_begin__ = 56;
            context__.validate_dims("data initialization", "sigma_ini_Rlive", "double", context__.to_vec());
            sigma_ini_Rlive = double(0);
            vals_r__ = context__.vals_r("sigma_ini_Rlive");
            pos__ = 0;
            sigma_ini_Rlive = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_ini_Rlive", sigma_ini_Rlive, 0.0);
            current_statement_begin__ = 57;
            context__.validate_dims("data initialization", "mu_ini_cases", "double", context__.to_vec());
            mu_ini_cases = double(0);
            vals_r__ = context__.vals_r("mu_ini_cases");
            pos__ = 0;
            mu_ini_cases = vals_r__[pos__++];
            check_greater_or_equal(function__, "mu_ini_cases", mu_ini_cases, 0.0);
            current_statement_begin__ = 58;
            context__.validate_dims("data initialization", "sigma_ini_cases", "double", context__.to_vec());
            sigma_ini_cases = double(0);
            vals_r__ = context__.vals_r("sigma_ini_cases");
            pos__ = 0;
            sigma_ini_cases = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_ini_cases", sigma_ini_cases, 0.0);
            current_statement_begin__ = 64;
            context__.validate_dims("data initialization", "ninter", "int", context__.to_vec());
            ninter = int(0);
            vals_i__ = context__.vals_i("ninter");
            pos__ = 0;
            ninter = vals_i__[pos__++];
            check_greater_or_equal(function__, "ninter", ninter, 0);
            current_statement_begin__ = 65;
            validate_non_negative_index("mu_t_inter", "ninter", ninter);
            context__.validate_dims("data initialization", "mu_t_inter", "double", context__.to_vec(ninter));
            mu_t_inter = std::vector<double>(ninter, double(0));
            vals_r__ = context__.vals_r("mu_t_inter");
            pos__ = 0;
            size_t mu_t_inter_k_0_max__ = ninter;
            for (size_t k_0__ = 0; k_0__ < mu_t_inter_k_0_max__; ++k_0__) {
                mu_t_inter[k_0__] = vals_r__[pos__++];
            }
            size_t mu_t_inter_i_0_max__ = ninter;
            for (size_t i_0__ = 0; i_0__ < mu_t_inter_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "mu_t_inter[i_0__]", mu_t_inter[i_0__], 1.0);
            }
            current_statement_begin__ = 66;
            validate_non_negative_index("sigma_t_inter", "ninter", ninter);
            context__.validate_dims("data initialization", "sigma_t_inter", "double", context__.to_vec(ninter));
            sigma_t_inter = std::vector<double>(ninter, double(0));
            vals_r__ = context__.vals_r("sigma_t_inter");
            pos__ = 0;
            size_t sigma_t_inter_k_0_max__ = ninter;
            for (size_t k_0__ = 0; k_0__ < sigma_t_inter_k_0_max__; ++k_0__) {
                sigma_t_inter[k_0__] = vals_r__[pos__++];
            }
            size_t sigma_t_inter_i_0_max__ = ninter;
            for (size_t i_0__ = 0; i_0__ < sigma_t_inter_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "sigma_t_inter[i_0__]", sigma_t_inter[i_0__], 0.0);
            }
            current_statement_begin__ = 67;
            validate_non_negative_index("len_inter", "ninter", ninter);
            context__.validate_dims("data initialization", "len_inter", "double", context__.to_vec(ninter));
            len_inter = std::vector<double>(ninter, double(0));
            vals_r__ = context__.vals_r("len_inter");
            pos__ = 0;
            size_t len_inter_k_0_max__ = ninter;
            for (size_t k_0__ = 0; k_0__ < len_inter_k_0_max__; ++k_0__) {
                len_inter[k_0__] = vals_r__[pos__++];
            }
            size_t len_inter_i_0_max__ = ninter;
            for (size_t i_0__ = 0; i_0__ < len_inter_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "len_inter[i_0__]", len_inter[i_0__], 1.0);
            }
            current_statement_begin__ = 68;
            validate_non_negative_index("mu_beta_inter", "ninter", ninter);
            context__.validate_dims("data initialization", "mu_beta_inter", "double", context__.to_vec(ninter));
            mu_beta_inter = std::vector<double>(ninter, double(0));
            vals_r__ = context__.vals_r("mu_beta_inter");
            pos__ = 0;
            size_t mu_beta_inter_k_0_max__ = ninter;
            for (size_t k_0__ = 0; k_0__ < mu_beta_inter_k_0_max__; ++k_0__) {
                mu_beta_inter[k_0__] = vals_r__[pos__++];
            }
            size_t mu_beta_inter_i_0_max__ = ninter;
            for (size_t i_0__ = 0; i_0__ < mu_beta_inter_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "mu_beta_inter[i_0__]", mu_beta_inter[i_0__], 0.0);
            }
            current_statement_begin__ = 69;
            validate_non_negative_index("sigma_beta_inter", "ninter", ninter);
            context__.validate_dims("data initialization", "sigma_beta_inter", "double", context__.to_vec(ninter));
            sigma_beta_inter = std::vector<double>(ninter, double(0));
            vals_r__ = context__.vals_r("sigma_beta_inter");
            pos__ = 0;
            size_t sigma_beta_inter_k_0_max__ = ninter;
            for (size_t k_0__ = 0; k_0__ < sigma_beta_inter_k_0_max__; ++k_0__) {
                sigma_beta_inter[k_0__] = vals_r__[pos__++];
            }
            size_t sigma_beta_inter_i_0_max__ = ninter;
            for (size_t i_0__ = 0; i_0__ < sigma_beta_inter_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "sigma_beta_inter[i_0__]", sigma_beta_inter[i_0__], 0.0);
            }
            current_statement_begin__ = 71;
            validate_non_negative_index("vaccinated_per_day", "nt", nt);
            context__.validate_dims("data initialization", "vaccinated_per_day", "double", context__.to_vec(nt));
            vaccinated_per_day = std::vector<double>(nt, double(0));
            vals_r__ = context__.vals_r("vaccinated_per_day");
            pos__ = 0;
            size_t vaccinated_per_day_k_0_max__ = nt;
            for (size_t k_0__ = 0; k_0__ < vaccinated_per_day_k_0_max__; ++k_0__) {
                vaccinated_per_day[k_0__] = vals_r__[pos__++];
            }
            size_t vaccinated_per_day_i_0_max__ = nt;
            for (size_t i_0__ = 0; i_0__ < vaccinated_per_day_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "vaccinated_per_day[i_0__]", vaccinated_per_day[i_0__], 0.0);
            }
            current_statement_begin__ = 72;
            validate_non_negative_index("vaccine_efficacy_for_susceptibility", "nt", nt);
            context__.validate_dims("data initialization", "vaccine_efficacy_for_susceptibility", "double", context__.to_vec(nt));
            vaccine_efficacy_for_susceptibility = std::vector<double>(nt, double(0));
            vals_r__ = context__.vals_r("vaccine_efficacy_for_susceptibility");
            pos__ = 0;
            size_t vaccine_efficacy_for_susceptibility_k_0_max__ = nt;
            for (size_t k_0__ = 0; k_0__ < vaccine_efficacy_for_susceptibility_k_0_max__; ++k_0__) {
                vaccine_efficacy_for_susceptibility[k_0__] = vals_r__[pos__++];
            }
            size_t vaccine_efficacy_for_susceptibility_i_0_max__ = nt;
            for (size_t i_0__ = 0; i_0__ < vaccine_efficacy_for_susceptibility_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "vaccine_efficacy_for_susceptibility[i_0__]", vaccine_efficacy_for_susceptibility[i_0__], 0.0);
                check_less_or_equal(function__, "vaccine_efficacy_for_susceptibility[i_0__]", vaccine_efficacy_for_susceptibility[i_0__], 1.0);
            }
            current_statement_begin__ = 73;
            validate_non_negative_index("vaccine_efficacy_against_progression", "nt", nt);
            context__.validate_dims("data initialization", "vaccine_efficacy_against_progression", "double", context__.to_vec(nt));
            vaccine_efficacy_against_progression = std::vector<double>(nt, double(0));
            vals_r__ = context__.vals_r("vaccine_efficacy_against_progression");
            pos__ = 0;
            size_t vaccine_efficacy_against_progression_k_0_max__ = nt;
            for (size_t k_0__ = 0; k_0__ < vaccine_efficacy_against_progression_k_0_max__; ++k_0__) {
                vaccine_efficacy_against_progression[k_0__] = vals_r__[pos__++];
            }
            size_t vaccine_efficacy_against_progression_i_0_max__ = nt;
            for (size_t i_0__ = 0; i_0__ < vaccine_efficacy_against_progression_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "vaccine_efficacy_against_progression[i_0__]", vaccine_efficacy_against_progression[i_0__], 0.0);
                check_less_or_equal(function__, "vaccine_efficacy_against_progression[i_0__]", vaccine_efficacy_against_progression[i_0__], 1.0);
            }
            current_statement_begin__ = 75;
            validate_non_negative_index("duration_vaccinated", "nt", nt);
            context__.validate_dims("data initialization", "duration_vaccinated", "double", context__.to_vec(nt));
            duration_vaccinated = std::vector<double>(nt, double(0));
            vals_r__ = context__.vals_r("duration_vaccinated");
            pos__ = 0;
            size_t duration_vaccinated_k_0_max__ = nt;
            for (size_t k_0__ = 0; k_0__ < duration_vaccinated_k_0_max__; ++k_0__) {
                duration_vaccinated[k_0__] = vals_r__[pos__++];
            }
            size_t duration_vaccinated_i_0_max__ = nt;
            for (size_t i_0__ = 0; i_0__ < duration_vaccinated_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "duration_vaccinated[i_0__]", duration_vaccinated[i_0__], 1.0);
            }
            current_statement_begin__ = 76;
            validate_non_negative_index("duration_natural", "nt", nt);
            context__.validate_dims("data initialization", "duration_natural", "double", context__.to_vec(nt));
            duration_natural = std::vector<double>(nt, double(0));
            vals_r__ = context__.vals_r("duration_natural");
            pos__ = 0;
            size_t duration_natural_k_0_max__ = nt;
            for (size_t k_0__ = 0; k_0__ < duration_natural_k_0_max__; ++k_0__) {
                duration_natural[k_0__] = vals_r__[pos__++];
            }
            size_t duration_natural_i_0_max__ = nt;
            for (size_t i_0__ = 0; i_0__ < duration_natural_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "duration_natural[i_0__]", duration_natural[i_0__], 1.0);
            }
            current_statement_begin__ = 77;
            validate_non_negative_index("frac_hosp_multiplier", "nt", nt);
            context__.validate_dims("data initialization", "frac_hosp_multiplier", "double", context__.to_vec(nt));
            frac_hosp_multiplier = std::vector<double>(nt, double(0));
            vals_r__ = context__.vals_r("frac_hosp_multiplier");
            pos__ = 0;
            size_t frac_hosp_multiplier_k_0_max__ = nt;
            for (size_t k_0__ = 0; k_0__ < frac_hosp_multiplier_k_0_max__; ++k_0__) {
                frac_hosp_multiplier[k_0__] = vals_r__[pos__++];
            }
            size_t frac_hosp_multiplier_i_0_max__ = nt;
            for (size_t i_0__ = 0; i_0__ < frac_hosp_multiplier_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "frac_hosp_multiplier[i_0__]", frac_hosp_multiplier[i_0__], 0.0);
            }
            current_statement_begin__ = 78;
            validate_non_negative_index("frac_icu_multiplier", "nt", nt);
            context__.validate_dims("data initialization", "frac_icu_multiplier", "double", context__.to_vec(nt));
            frac_icu_multiplier = std::vector<double>(nt, double(0));
            vals_r__ = context__.vals_r("frac_icu_multiplier");
            pos__ = 0;
            size_t frac_icu_multiplier_k_0_max__ = nt;
            for (size_t k_0__ = 0; k_0__ < frac_icu_multiplier_k_0_max__; ++k_0__) {
                frac_icu_multiplier[k_0__] = vals_r__[pos__++];
            }
            size_t frac_icu_multiplier_i_0_max__ = nt;
            for (size_t i_0__ = 0; i_0__ < frac_icu_multiplier_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "frac_icu_multiplier[i_0__]", frac_icu_multiplier[i_0__], 0.0);
            }
            current_statement_begin__ = 79;
            validate_non_negative_index("frac_mort_multiplier", "nt", nt);
            context__.validate_dims("data initialization", "frac_mort_multiplier", "double", context__.to_vec(nt));
            frac_mort_multiplier = std::vector<double>(nt, double(0));
            vals_r__ = context__.vals_r("frac_mort_multiplier");
            pos__ = 0;
            size_t frac_mort_multiplier_k_0_max__ = nt;
            for (size_t k_0__ = 0; k_0__ < frac_mort_multiplier_k_0_max__; ++k_0__) {
                frac_mort_multiplier[k_0__] = vals_r__[pos__++];
            }
            size_t frac_mort_multiplier_i_0_max__ = nt;
            for (size_t i_0__ = 0; i_0__ < frac_mort_multiplier_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "frac_mort_multiplier[i_0__]", frac_mort_multiplier[i_0__], 0.0);
            }
            current_statement_begin__ = 80;
            validate_non_negative_index("sigma_obs_est_inv", "nobs_types", nobs_types);
            context__.validate_dims("data initialization", "sigma_obs_est_inv", "double", context__.to_vec(nobs_types));
            sigma_obs_est_inv = std::vector<double>(nobs_types, double(0));
            vals_r__ = context__.vals_r("sigma_obs_est_inv");
            pos__ = 0;
            size_t sigma_obs_est_inv_k_0_max__ = nobs_types;
            for (size_t k_0__ = 0; k_0__ < sigma_obs_est_inv_k_0_max__; ++k_0__) {
                sigma_obs_est_inv[k_0__] = vals_r__[pos__++];
            }
            size_t sigma_obs_est_inv_i_0_max__ = nobs_types;
            for (size_t i_0__ = 0; i_0__ < sigma_obs_est_inv_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "sigma_obs_est_inv[i_0__]", sigma_obs_est_inv[i_0__], 0.0);
            }
            current_statement_begin__ = 82;
            context__.validate_dims("data initialization", "mu_frac_tested", "double", context__.to_vec());
            mu_frac_tested = double(0);
            vals_r__ = context__.vals_r("mu_frac_tested");
            pos__ = 0;
            mu_frac_tested = vals_r__[pos__++];
            check_greater_or_equal(function__, "mu_frac_tested", mu_frac_tested, 0.0);
            current_statement_begin__ = 83;
            context__.validate_dims("data initialization", "sigma_frac_tested", "double", context__.to_vec());
            sigma_frac_tested = double(0);
            vals_r__ = context__.vals_r("sigma_frac_tested");
            pos__ = 0;
            sigma_frac_tested = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_frac_tested", sigma_frac_tested, 0.0);
            // initialize transformed data variables
            current_statement_begin__ = 89;
            Su = int(0);
            stan::math::fill(Su, std::numeric_limits<int>::min());
            stan::math::assign(Su,1);
            current_statement_begin__ = 90;
            Sv = int(0);
            stan::math::fill(Sv, std::numeric_limits<int>::min());
            stan::math::assign(Sv,2);
            current_statement_begin__ = 91;
            Eu = int(0);
            stan::math::fill(Eu, std::numeric_limits<int>::min());
            stan::math::assign(Eu,3);
            current_statement_begin__ = 92;
            Ev = int(0);
            stan::math::fill(Ev, std::numeric_limits<int>::min());
            stan::math::assign(Ev,4);
            current_statement_begin__ = 93;
            Imildu = int(0);
            stan::math::fill(Imildu, std::numeric_limits<int>::min());
            stan::math::assign(Imildu,5);
            current_statement_begin__ = 94;
            Imildv = int(0);
            stan::math::fill(Imildv, std::numeric_limits<int>::min());
            stan::math::assign(Imildv,6);
            current_statement_begin__ = 95;
            Iprehu = int(0);
            stan::math::fill(Iprehu, std::numeric_limits<int>::min());
            stan::math::assign(Iprehu,7);
            current_statement_begin__ = 96;
            Iprehv = int(0);
            stan::math::fill(Iprehv, std::numeric_limits<int>::min());
            stan::math::assign(Iprehv,8);
            current_statement_begin__ = 97;
            Hmodu = int(0);
            stan::math::fill(Hmodu, std::numeric_limits<int>::min());
            stan::math::assign(Hmodu,9);
            current_statement_begin__ = 98;
            Hmodv = int(0);
            stan::math::fill(Hmodv, std::numeric_limits<int>::min());
            stan::math::assign(Hmodv,10);
            current_statement_begin__ = 99;
            Hicuu = int(0);
            stan::math::fill(Hicuu, std::numeric_limits<int>::min());
            stan::math::assign(Hicuu,11);
            current_statement_begin__ = 100;
            Hicuv = int(0);
            stan::math::fill(Hicuv, std::numeric_limits<int>::min());
            stan::math::assign(Hicuv,12);
            current_statement_begin__ = 101;
            Rliveu = int(0);
            stan::math::fill(Rliveu, std::numeric_limits<int>::min());
            stan::math::assign(Rliveu,13);
            current_statement_begin__ = 102;
            Rlivev = int(0);
            stan::math::fill(Rlivev, std::numeric_limits<int>::min());
            stan::math::assign(Rlivev,14);
            current_statement_begin__ = 103;
            Rmort = int(0);
            stan::math::fill(Rmort, std::numeric_limits<int>::min());
            stan::math::assign(Rmort,15);
            current_statement_begin__ = 105;
            ncompartments = int(0);
            stan::math::fill(ncompartments, std::numeric_limits<int>::min());
            stan::math::assign(ncompartments,15);
            current_statement_begin__ = 107;
            obs_hosp_census = int(0);
            stan::math::fill(obs_hosp_census, std::numeric_limits<int>::min());
            stan::math::assign(obs_hosp_census,1);
            current_statement_begin__ = 108;
            obs_icu_census = int(0);
            stan::math::fill(obs_icu_census, std::numeric_limits<int>::min());
            stan::math::assign(obs_icu_census,2);
            current_statement_begin__ = 109;
            obs_cum_deaths = int(0);
            stan::math::fill(obs_cum_deaths, std::numeric_limits<int>::min());
            stan::math::assign(obs_cum_deaths,3);
            current_statement_begin__ = 110;
            obs_cum_admits = int(0);
            stan::math::fill(obs_cum_admits, std::numeric_limits<int>::min());
            stan::math::assign(obs_cum_admits,4);
            current_statement_begin__ = 111;
            obs_cases = int(0);
            stan::math::fill(obs_cases, std::numeric_limits<int>::min());
            stan::math::assign(obs_cases,5);
            current_statement_begin__ = 112;
            obs_seroprev = int(0);
            stan::math::fill(obs_seroprev, std::numeric_limits<int>::min());
            stan::math::assign(obs_seroprev,6);
            current_statement_begin__ = 114;
            beta_limit = double(0);
            stan::math::fill(beta_limit, DUMMY_VAR__);
            // execute transformed data statements
            current_statement_begin__ = 116;
            if (as_bool(logical_eq(extend, 1))) {
                current_statement_begin__ = 117;
                stan::math::assign(beta_limit, 1e10);
            } else {
                current_statement_begin__ = 119;
                stan::math::assign(beta_limit, 2.0);
            }
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 124;
            num_params_r__ += 1;
            current_statement_begin__ = 125;
            num_params_r__ += 1;
            current_statement_begin__ = 126;
            num_params_r__ += 1;
            current_statement_begin__ = 127;
            num_params_r__ += 1;
            current_statement_begin__ = 128;
            num_params_r__ += 1;
            current_statement_begin__ = 130;
            num_params_r__ += 1;
            current_statement_begin__ = 131;
            num_params_r__ += 1;
            current_statement_begin__ = 132;
            num_params_r__ += 1;
            current_statement_begin__ = 133;
            num_params_r__ += 1;
            current_statement_begin__ = 135;
            num_params_r__ += 1;
            current_statement_begin__ = 136;
            validate_non_negative_index("ini_Imild", "(1 - from_beginning)", (1 - from_beginning));
            num_params_r__ += (1 * (1 - from_beginning));
            current_statement_begin__ = 137;
            validate_non_negative_index("ini_Ipreh", "(1 - from_beginning)", (1 - from_beginning));
            num_params_r__ += (1 * (1 - from_beginning));
            current_statement_begin__ = 138;
            validate_non_negative_index("ini_Rlive", "(1 - from_beginning)", (1 - from_beginning));
            num_params_r__ += (1 * (1 - from_beginning));
            current_statement_begin__ = 139;
            validate_non_negative_index("sigma_obs", "nobs_types", nobs_types);
            num_params_r__ += (1 * nobs_types);
            current_statement_begin__ = 142;
            num_params_r__ += 1;
            current_statement_begin__ = 143;
            validate_non_negative_index("beta_multiplier", "ninter", ninter);
            num_params_r__ += (1 * ninter);
            current_statement_begin__ = 144;
            validate_non_negative_index("t_inter", "ninter", ninter);
            num_params_r__ += (1 * ninter);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_LEMMA() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 124;
        if (!(context__.contains_r("duration_latent")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable duration_latent missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("duration_latent");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "duration_latent", "double", context__.to_vec());
        double duration_latent(0);
        duration_latent = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(1.0, duration_latent);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable duration_latent: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 125;
        if (!(context__.contains_r("duration_rec_mild")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable duration_rec_mild missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("duration_rec_mild");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "duration_rec_mild", "double", context__.to_vec());
        double duration_rec_mild(0);
        duration_rec_mild = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(1.0, duration_rec_mild);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable duration_rec_mild: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 126;
        if (!(context__.contains_r("duration_pre_hosp")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable duration_pre_hosp missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("duration_pre_hosp");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "duration_pre_hosp", "double", context__.to_vec());
        double duration_pre_hosp(0);
        duration_pre_hosp = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(1.0, duration_pre_hosp);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable duration_pre_hosp: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 127;
        if (!(context__.contains_r("duration_hosp_mod")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable duration_hosp_mod missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("duration_hosp_mod");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "duration_hosp_mod", "double", context__.to_vec());
        double duration_hosp_mod(0);
        duration_hosp_mod = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(1.0, duration_hosp_mod);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable duration_hosp_mod: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 128;
        if (!(context__.contains_r("duration_hosp_icu")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable duration_hosp_icu missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("duration_hosp_icu");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "duration_hosp_icu", "double", context__.to_vec());
        double duration_hosp_icu(0);
        duration_hosp_icu = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(1.0, duration_hosp_icu);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable duration_hosp_icu: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 130;
        if (!(context__.contains_r("frac_hosp")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable frac_hosp missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("frac_hosp");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "frac_hosp", "double", context__.to_vec());
        double frac_hosp(0);
        frac_hosp = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0.005, 1.0, frac_hosp);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable frac_hosp: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 131;
        if (!(context__.contains_r("frac_icu")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable frac_icu missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("frac_icu");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "frac_icu", "double", context__.to_vec());
        double frac_icu(0);
        frac_icu = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0.0, 1.0, frac_icu);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable frac_icu: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 132;
        if (!(context__.contains_r("frac_mort")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable frac_mort missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("frac_mort");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "frac_mort", "double", context__.to_vec());
        double frac_mort(0);
        frac_mort = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0.0, 1.0, frac_mort);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable frac_mort: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 133;
        if (!(context__.contains_r("frac_tested")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable frac_tested missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("frac_tested");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "frac_tested", "double", context__.to_vec());
        double frac_tested(0);
        frac_tested = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0.0, 1.0, frac_tested);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable frac_tested: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 135;
        if (!(context__.contains_r("ini_E")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable ini_E missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("ini_E");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "ini_E", "double", context__.to_vec());
        double ini_E(0);
        ini_E = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0.0, ini_E);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable ini_E: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 136;
        if (!(context__.contains_r("ini_Imild")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable ini_Imild missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("ini_Imild");
        pos__ = 0U;
        validate_non_negative_index("ini_Imild", "(1 - from_beginning)", (1 - from_beginning));
        context__.validate_dims("parameter initialization", "ini_Imild", "double", context__.to_vec((1 - from_beginning)));
        std::vector<double> ini_Imild((1 - from_beginning), double(0));
        size_t ini_Imild_k_0_max__ = (1 - from_beginning);
        for (size_t k_0__ = 0; k_0__ < ini_Imild_k_0_max__; ++k_0__) {
            ini_Imild[k_0__] = vals_r__[pos__++];
        }
        size_t ini_Imild_i_0_max__ = (1 - from_beginning);
        for (size_t i_0__ = 0; i_0__ < ini_Imild_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0.0, ini_Imild[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable ini_Imild: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 137;
        if (!(context__.contains_r("ini_Ipreh")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable ini_Ipreh missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("ini_Ipreh");
        pos__ = 0U;
        validate_non_negative_index("ini_Ipreh", "(1 - from_beginning)", (1 - from_beginning));
        context__.validate_dims("parameter initialization", "ini_Ipreh", "double", context__.to_vec((1 - from_beginning)));
        std::vector<double> ini_Ipreh((1 - from_beginning), double(0));
        size_t ini_Ipreh_k_0_max__ = (1 - from_beginning);
        for (size_t k_0__ = 0; k_0__ < ini_Ipreh_k_0_max__; ++k_0__) {
            ini_Ipreh[k_0__] = vals_r__[pos__++];
        }
        size_t ini_Ipreh_i_0_max__ = (1 - from_beginning);
        for (size_t i_0__ = 0; i_0__ < ini_Ipreh_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0.0, ini_Ipreh[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable ini_Ipreh: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 138;
        if (!(context__.contains_r("ini_Rlive")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable ini_Rlive missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("ini_Rlive");
        pos__ = 0U;
        validate_non_negative_index("ini_Rlive", "(1 - from_beginning)", (1 - from_beginning));
        context__.validate_dims("parameter initialization", "ini_Rlive", "double", context__.to_vec((1 - from_beginning)));
        std::vector<double> ini_Rlive((1 - from_beginning), double(0));
        size_t ini_Rlive_k_0_max__ = (1 - from_beginning);
        for (size_t k_0__ = 0; k_0__ < ini_Rlive_k_0_max__; ++k_0__) {
            ini_Rlive[k_0__] = vals_r__[pos__++];
        }
        size_t ini_Rlive_i_0_max__ = (1 - from_beginning);
        for (size_t i_0__ = 0; i_0__ < ini_Rlive_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0.0, ini_Rlive[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable ini_Rlive: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 139;
        if (!(context__.contains_r("sigma_obs")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_obs missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_obs");
        pos__ = 0U;
        validate_non_negative_index("sigma_obs", "nobs_types", nobs_types);
        context__.validate_dims("parameter initialization", "sigma_obs", "double", context__.to_vec(nobs_types));
        std::vector<double> sigma_obs(nobs_types, double(0));
        size_t sigma_obs_k_0_max__ = nobs_types;
        for (size_t k_0__ = 0; k_0__ < sigma_obs_k_0_max__; ++k_0__) {
            sigma_obs[k_0__] = vals_r__[pos__++];
        }
        size_t sigma_obs_i_0_max__ = nobs_types;
        for (size_t i_0__ = 0; i_0__ < sigma_obs_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0.0, sigma_obs[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_obs: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 142;
        if (!(context__.contains_r("r0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable r0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("r0");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "r0", "double", context__.to_vec());
        double r0(0);
        r0 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0.0, r0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable r0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 143;
        if (!(context__.contains_r("beta_multiplier")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_multiplier missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_multiplier");
        pos__ = 0U;
        validate_non_negative_index("beta_multiplier", "ninter", ninter);
        context__.validate_dims("parameter initialization", "beta_multiplier", "double", context__.to_vec(ninter));
        std::vector<double> beta_multiplier(ninter, double(0));
        size_t beta_multiplier_k_0_max__ = ninter;
        for (size_t k_0__ = 0; k_0__ < beta_multiplier_k_0_max__; ++k_0__) {
            beta_multiplier[k_0__] = vals_r__[pos__++];
        }
        size_t beta_multiplier_i_0_max__ = ninter;
        for (size_t i_0__ = 0; i_0__ < beta_multiplier_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0.0, beta_multiplier[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_multiplier: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 144;
        if (!(context__.contains_r("t_inter")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable t_inter missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("t_inter");
        pos__ = 0U;
        validate_non_negative_index("t_inter", "ninter", ninter);
        context__.validate_dims("parameter initialization", "t_inter", "double", context__.to_vec(ninter));
        std::vector<double> t_inter(ninter, double(0));
        size_t t_inter_k_0_max__ = ninter;
        for (size_t k_0__ = 0; k_0__ < t_inter_k_0_max__; ++k_0__) {
            t_inter[k_0__] = vals_r__[pos__++];
        }
        size_t t_inter_i_0_max__ = ninter;
        for (size_t i_0__ = 0; i_0__ < t_inter_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(1.0, t_inter[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable t_inter: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 124;
            local_scalar_t__ duration_latent;
            (void) duration_latent;  // dummy to suppress unused var warning
            if (jacobian__)
                duration_latent = in__.scalar_lb_constrain(1.0, lp__);
            else
                duration_latent = in__.scalar_lb_constrain(1.0);
            current_statement_begin__ = 125;
            local_scalar_t__ duration_rec_mild;
            (void) duration_rec_mild;  // dummy to suppress unused var warning
            if (jacobian__)
                duration_rec_mild = in__.scalar_lb_constrain(1.0, lp__);
            else
                duration_rec_mild = in__.scalar_lb_constrain(1.0);
            current_statement_begin__ = 126;
            local_scalar_t__ duration_pre_hosp;
            (void) duration_pre_hosp;  // dummy to suppress unused var warning
            if (jacobian__)
                duration_pre_hosp = in__.scalar_lb_constrain(1.0, lp__);
            else
                duration_pre_hosp = in__.scalar_lb_constrain(1.0);
            current_statement_begin__ = 127;
            local_scalar_t__ duration_hosp_mod;
            (void) duration_hosp_mod;  // dummy to suppress unused var warning
            if (jacobian__)
                duration_hosp_mod = in__.scalar_lb_constrain(1.0, lp__);
            else
                duration_hosp_mod = in__.scalar_lb_constrain(1.0);
            current_statement_begin__ = 128;
            local_scalar_t__ duration_hosp_icu;
            (void) duration_hosp_icu;  // dummy to suppress unused var warning
            if (jacobian__)
                duration_hosp_icu = in__.scalar_lb_constrain(1.0, lp__);
            else
                duration_hosp_icu = in__.scalar_lb_constrain(1.0);
            current_statement_begin__ = 130;
            local_scalar_t__ frac_hosp;
            (void) frac_hosp;  // dummy to suppress unused var warning
            if (jacobian__)
                frac_hosp = in__.scalar_lub_constrain(0.005, 1.0, lp__);
            else
                frac_hosp = in__.scalar_lub_constrain(0.005, 1.0);
            current_statement_begin__ = 131;
            local_scalar_t__ frac_icu;
            (void) frac_icu;  // dummy to suppress unused var warning
            if (jacobian__)
                frac_icu = in__.scalar_lub_constrain(0.0, 1.0, lp__);
            else
                frac_icu = in__.scalar_lub_constrain(0.0, 1.0);
            current_statement_begin__ = 132;
            local_scalar_t__ frac_mort;
            (void) frac_mort;  // dummy to suppress unused var warning
            if (jacobian__)
                frac_mort = in__.scalar_lub_constrain(0.0, 1.0, lp__);
            else
                frac_mort = in__.scalar_lub_constrain(0.0, 1.0);
            current_statement_begin__ = 133;
            local_scalar_t__ frac_tested;
            (void) frac_tested;  // dummy to suppress unused var warning
            if (jacobian__)
                frac_tested = in__.scalar_lub_constrain(0.0, 1.0, lp__);
            else
                frac_tested = in__.scalar_lub_constrain(0.0, 1.0);
            current_statement_begin__ = 135;
            local_scalar_t__ ini_E;
            (void) ini_E;  // dummy to suppress unused var warning
            if (jacobian__)
                ini_E = in__.scalar_lb_constrain(0.0, lp__);
            else
                ini_E = in__.scalar_lb_constrain(0.0);
            current_statement_begin__ = 136;
            std::vector<local_scalar_t__> ini_Imild;
            size_t ini_Imild_d_0_max__ = (1 - from_beginning);
            ini_Imild.reserve(ini_Imild_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < ini_Imild_d_0_max__; ++d_0__) {
                if (jacobian__)
                    ini_Imild.push_back(in__.scalar_lb_constrain(0.0, lp__));
                else
                    ini_Imild.push_back(in__.scalar_lb_constrain(0.0));
            }
            current_statement_begin__ = 137;
            std::vector<local_scalar_t__> ini_Ipreh;
            size_t ini_Ipreh_d_0_max__ = (1 - from_beginning);
            ini_Ipreh.reserve(ini_Ipreh_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < ini_Ipreh_d_0_max__; ++d_0__) {
                if (jacobian__)
                    ini_Ipreh.push_back(in__.scalar_lb_constrain(0.0, lp__));
                else
                    ini_Ipreh.push_back(in__.scalar_lb_constrain(0.0));
            }
            current_statement_begin__ = 138;
            std::vector<local_scalar_t__> ini_Rlive;
            size_t ini_Rlive_d_0_max__ = (1 - from_beginning);
            ini_Rlive.reserve(ini_Rlive_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < ini_Rlive_d_0_max__; ++d_0__) {
                if (jacobian__)
                    ini_Rlive.push_back(in__.scalar_lb_constrain(0.0, lp__));
                else
                    ini_Rlive.push_back(in__.scalar_lb_constrain(0.0));
            }
            current_statement_begin__ = 139;
            std::vector<local_scalar_t__> sigma_obs;
            size_t sigma_obs_d_0_max__ = nobs_types;
            sigma_obs.reserve(sigma_obs_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < sigma_obs_d_0_max__; ++d_0__) {
                if (jacobian__)
                    sigma_obs.push_back(in__.scalar_lb_constrain(0.0, lp__));
                else
                    sigma_obs.push_back(in__.scalar_lb_constrain(0.0));
            }
            current_statement_begin__ = 142;
            local_scalar_t__ r0;
            (void) r0;  // dummy to suppress unused var warning
            if (jacobian__)
                r0 = in__.scalar_lb_constrain(0.0, lp__);
            else
                r0 = in__.scalar_lb_constrain(0.0);
            current_statement_begin__ = 143;
            std::vector<local_scalar_t__> beta_multiplier;
            size_t beta_multiplier_d_0_max__ = ninter;
            beta_multiplier.reserve(beta_multiplier_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < beta_multiplier_d_0_max__; ++d_0__) {
                if (jacobian__)
                    beta_multiplier.push_back(in__.scalar_lb_constrain(0.0, lp__));
                else
                    beta_multiplier.push_back(in__.scalar_lb_constrain(0.0));
            }
            current_statement_begin__ = 144;
            std::vector<local_scalar_t__> t_inter;
            size_t t_inter_d_0_max__ = ninter;
            t_inter.reserve(t_inter_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < t_inter_d_0_max__; ++d_0__) {
                if (jacobian__)
                    t_inter.push_back(in__.scalar_lb_constrain(1.0, lp__));
                else
                    t_inter.push_back(in__.scalar_lb_constrain(1.0));
            }
            // transformed parameters
            current_statement_begin__ = 148;
            validate_non_negative_index("x", "ncompartments", ncompartments);
            validate_non_negative_index("x", "nt", nt);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> x(ncompartments, nt);
            stan::math::initialize(x, DUMMY_VAR__);
            stan::math::fill(x, DUMMY_VAR__);
            current_statement_begin__ = 149;
            validate_non_negative_index("sim_data", "nobs_types", nobs_types);
            validate_non_negative_index("sim_data", "nt", nt);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> sim_data(nobs_types, nt);
            stan::math::initialize(sim_data, DUMMY_VAR__);
            stan::math::fill(sim_data, DUMMY_VAR__);
            current_statement_begin__ = 150;
            validate_non_negative_index("beta", "nt", nt);
            std::vector<local_scalar_t__> beta(nt, local_scalar_t__(0));
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            current_statement_begin__ = 151;
            validate_non_negative_index("new_admits", "nt", nt);
            Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> new_admits(nt);
            stan::math::initialize(new_admits, DUMMY_VAR__);
            stan::math::fill(new_admits, DUMMY_VAR__);
            current_statement_begin__ = 152;
            validate_non_negative_index("new_cases", "nt", nt);
            Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> new_cases(nt);
            stan::math::initialize(new_cases, DUMMY_VAR__);
            stan::math::fill(new_cases, DUMMY_VAR__);
            current_statement_begin__ = 153;
            validate_non_negative_index("newE_temp", "(nt - 1)", (nt - 1));
            std::vector<local_scalar_t__> newE_temp((nt - 1), local_scalar_t__(0));
            stan::math::initialize(newE_temp, DUMMY_VAR__);
            stan::math::fill(newE_temp, DUMMY_VAR__);
            current_statement_begin__ = 154;
            validate_non_negative_index("total_cases_increase", "nt", nt);
            std::vector<local_scalar_t__> total_cases_increase(nt, local_scalar_t__(0));
            stan::math::initialize(total_cases_increase, DUMMY_VAR__);
            stan::math::fill(total_cases_increase, DUMMY_VAR__);
            // transformed parameters block statements
            {
            current_statement_begin__ = 159;
            local_scalar_t__ newEu(DUMMY_VAR__);
            (void) newEu;  // dummy to suppress unused var warning
            stan::math::initialize(newEu, DUMMY_VAR__);
            stan::math::fill(newEu, DUMMY_VAR__);
            current_statement_begin__ = 160;
            local_scalar_t__ newEv(DUMMY_VAR__);
            (void) newEv;  // dummy to suppress unused var warning
            stan::math::initialize(newEv, DUMMY_VAR__);
            stan::math::fill(newEv, DUMMY_VAR__);
            current_statement_begin__ = 161;
            local_scalar_t__ newIu(DUMMY_VAR__);
            (void) newIu;  // dummy to suppress unused var warning
            stan::math::initialize(newIu, DUMMY_VAR__);
            stan::math::fill(newIu, DUMMY_VAR__);
            current_statement_begin__ = 162;
            local_scalar_t__ newIv(DUMMY_VAR__);
            (void) newIv;  // dummy to suppress unused var warning
            stan::math::initialize(newIv, DUMMY_VAR__);
            stan::math::fill(newIv, DUMMY_VAR__);
            current_statement_begin__ = 163;
            local_scalar_t__ newrecu_mild(DUMMY_VAR__);
            (void) newrecu_mild;  // dummy to suppress unused var warning
            stan::math::initialize(newrecu_mild, DUMMY_VAR__);
            stan::math::fill(newrecu_mild, DUMMY_VAR__);
            current_statement_begin__ = 164;
            local_scalar_t__ newrecv_mild(DUMMY_VAR__);
            (void) newrecv_mild;  // dummy to suppress unused var warning
            stan::math::initialize(newrecv_mild, DUMMY_VAR__);
            stan::math::fill(newrecv_mild, DUMMY_VAR__);
            current_statement_begin__ = 165;
            local_scalar_t__ newrecu_mod(DUMMY_VAR__);
            (void) newrecu_mod;  // dummy to suppress unused var warning
            stan::math::initialize(newrecu_mod, DUMMY_VAR__);
            stan::math::fill(newrecu_mod, DUMMY_VAR__);
            current_statement_begin__ = 166;
            local_scalar_t__ newrecv_mod(DUMMY_VAR__);
            (void) newrecv_mod;  // dummy to suppress unused var warning
            stan::math::initialize(newrecv_mod, DUMMY_VAR__);
            stan::math::fill(newrecv_mod, DUMMY_VAR__);
            current_statement_begin__ = 167;
            local_scalar_t__ newhospu(DUMMY_VAR__);
            (void) newhospu;  // dummy to suppress unused var warning
            stan::math::initialize(newhospu, DUMMY_VAR__);
            stan::math::fill(newhospu, DUMMY_VAR__);
            current_statement_begin__ = 168;
            local_scalar_t__ newhospv(DUMMY_VAR__);
            (void) newhospv;  // dummy to suppress unused var warning
            stan::math::initialize(newhospv, DUMMY_VAR__);
            stan::math::fill(newhospv, DUMMY_VAR__);
            current_statement_begin__ = 169;
            local_scalar_t__ frac_hospv(DUMMY_VAR__);
            (void) frac_hospv;  // dummy to suppress unused var warning
            stan::math::initialize(frac_hospv, DUMMY_VAR__);
            stan::math::fill(frac_hospv, DUMMY_VAR__);
            current_statement_begin__ = 170;
            local_scalar_t__ leave_icuu(DUMMY_VAR__);
            (void) leave_icuu;  // dummy to suppress unused var warning
            stan::math::initialize(leave_icuu, DUMMY_VAR__);
            stan::math::fill(leave_icuu, DUMMY_VAR__);
            current_statement_begin__ = 171;
            local_scalar_t__ leave_icuv(DUMMY_VAR__);
            (void) leave_icuv;  // dummy to suppress unused var warning
            stan::math::initialize(leave_icuv, DUMMY_VAR__);
            stan::math::fill(leave_icuv, DUMMY_VAR__);
            current_statement_begin__ = 172;
            local_scalar_t__ beta_0(DUMMY_VAR__);
            (void) beta_0;  // dummy to suppress unused var warning
            stan::math::initialize(beta_0, DUMMY_VAR__);
            stan::math::fill(beta_0, DUMMY_VAR__);
            current_statement_begin__ = 173;
            local_scalar_t__ zero(DUMMY_VAR__);
            (void) zero;  // dummy to suppress unused var warning
            stan::math::initialize(zero, DUMMY_VAR__);
            stan::math::fill(zero, DUMMY_VAR__);
            current_statement_begin__ = 174;
            local_scalar_t__ vaccinated(DUMMY_VAR__);
            (void) vaccinated;  // dummy to suppress unused var warning
            stan::math::initialize(vaccinated, DUMMY_VAR__);
            stan::math::fill(vaccinated, DUMMY_VAR__);
            current_statement_begin__ = 175;
            local_scalar_t__ frac_vac_S(DUMMY_VAR__);
            (void) frac_vac_S;  // dummy to suppress unused var warning
            stan::math::initialize(frac_vac_S, DUMMY_VAR__);
            stan::math::fill(frac_vac_S, DUMMY_VAR__);
            current_statement_begin__ = 176;
            local_scalar_t__ newSv(DUMMY_VAR__);
            (void) newSv;  // dummy to suppress unused var warning
            stan::math::initialize(newSv, DUMMY_VAR__);
            stan::math::fill(newSv, DUMMY_VAR__);
            current_statement_begin__ = 177;
            local_scalar_t__ newRlivev(DUMMY_VAR__);
            (void) newRlivev;  // dummy to suppress unused var warning
            stan::math::initialize(newRlivev, DUMMY_VAR__);
            stan::math::fill(newRlivev, DUMMY_VAR__);
            current_statement_begin__ = 178;
            local_scalar_t__ S_lostv(DUMMY_VAR__);
            (void) S_lostv;  // dummy to suppress unused var warning
            stan::math::initialize(S_lostv, DUMMY_VAR__);
            stan::math::fill(S_lostv, DUMMY_VAR__);
            current_statement_begin__ = 179;
            local_scalar_t__ R_lostv(DUMMY_VAR__);
            (void) R_lostv;  // dummy to suppress unused var warning
            stan::math::initialize(R_lostv, DUMMY_VAR__);
            stan::math::fill(R_lostv, DUMMY_VAR__);
            current_statement_begin__ = 180;
            local_scalar_t__ R_lostnatu(DUMMY_VAR__);
            (void) R_lostnatu;  // dummy to suppress unused var warning
            stan::math::initialize(R_lostnatu, DUMMY_VAR__);
            stan::math::fill(R_lostnatu, DUMMY_VAR__);
            current_statement_begin__ = 181;
            local_scalar_t__ R_lostnatv(DUMMY_VAR__);
            (void) R_lostnatv;  // dummy to suppress unused var warning
            stan::math::initialize(R_lostnatv, DUMMY_VAR__);
            stan::math::fill(R_lostnatv, DUMMY_VAR__);
            current_statement_begin__ = 185;
            stan::math::assign(beta_0, (r0 / ((frac_hosp * duration_pre_hosp) + ((1 - frac_hosp) * duration_rec_mild))));
            current_statement_begin__ = 186;
            for (int it = 1; it <= nt; ++it) {
                current_statement_begin__ = 187;
                stan::model::assign(beta, 
                            stan::model::cons_list(stan::model::index_uni(it), stan::model::nil_index_list()), 
                            beta_0, 
                            "assigning variable beta");
                current_statement_begin__ = 188;
                for (int iinter = 1; iinter <= ninter; ++iinter) {
                    current_statement_begin__ = 191;
                    stan::model::assign(beta, 
                                stan::model::cons_list(stan::model::index_uni(it), stan::model::nil_index_list()), 
                                (get_base1(beta, it, "beta", 1) * pow(get_base1(beta_multiplier, iinter, "beta_multiplier", 1), inv_logit(((9.19024 / get_base1(len_inter, iinter, "len_inter", 1)) * (it - (get_base1(t_inter, iinter, "t_inter", 1) + (get_base1(len_inter, iinter, "len_inter", 1) / 2))))))), 
                                "assigning variable beta");
                }
            }
            current_statement_begin__ = 196;
            stan::math::assign(zero, (ini_E * 1e-15));
            current_statement_begin__ = 197;
            stan::model::assign(x, 
                        stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        rep_vector(zero, ncompartments), 
                        "assigning variable x");
            current_statement_begin__ = 199;
            stan::model::assign(total_cases_increase, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        zero, 
                        "assigning variable total_cases_increase");
            current_statement_begin__ = 201;
            stan::model::assign(x, 
                        stan::model::cons_list(stan::model::index_uni(Eu), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        ini_E, 
                        "assigning variable x");
            current_statement_begin__ = 202;
            if (as_bool(logical_eq(from_beginning, 0))) {
                current_statement_begin__ = 203;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Hmodu), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            (stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(Hmodu), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "x") + (get_base1(obs_data, obs_hosp_census, 1, "obs_data", 1) - get_base1(obs_data, obs_icu_census, 1, "obs_data", 1))), 
                            "assigning variable x");
                current_statement_begin__ = 204;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Hicuu), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            (stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(Hicuu), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "x") + get_base1(obs_data, obs_icu_census, 1, "obs_data", 1)), 
                            "assigning variable x");
                current_statement_begin__ = 205;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Rmort), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            (stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(Rmort), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "x") + get_base1(obs_data, obs_cum_deaths, 1, "obs_data", 1)), 
                            "assigning variable x");
                current_statement_begin__ = 206;
                stan::model::assign(new_cases, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            (stan::model::rvalue(new_cases, stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), "new_cases") + get_base1(obs_data, obs_cases, 1, "obs_data", 1)), 
                            "assigning variable new_cases");
                current_statement_begin__ = 207;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Imildu), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            get_base1(ini_Imild, 1, "ini_Imild", 1), 
                            "assigning variable x");
                current_statement_begin__ = 208;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Iprehu), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            get_base1(ini_Ipreh, 1, "ini_Ipreh", 1), 
                            "assigning variable x");
                current_statement_begin__ = 209;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Rliveu), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            get_base1(ini_Rlive, 1, "ini_Rlive", 1), 
                            "assigning variable x");
            }
            current_statement_begin__ = 212;
            stan::model::assign(x, 
                        stan::model::cons_list(stan::model::index_uni(Su), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        (npop - sum(stan::model::rvalue(x, stan::model::cons_list(stan::model::index_min_max(2, ncompartments), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "x"))), 
                        "assigning variable x");
            current_statement_begin__ = 218;
            for (int it = 1; it <= (nt - 1); ++it) {
                current_statement_begin__ = 221;
                stan::math::assign(newEu, stan::math::fmin(get_base1(x, Su, it, "x", 1), (((get_base1(x, Su, it, "x", 1) * get_base1(beta, it, "beta", 1)) / npop) * (((get_base1(x, Imildu, it, "x", 1) + get_base1(x, Iprehu, it, "x", 1)) + get_base1(x, Imildv, it, "x", 1)) + get_base1(x, Iprehv, it, "x", 1)))));
                current_statement_begin__ = 225;
                stan::math::assign(newEv, stan::math::fmin(get_base1(x, Sv, it, "x", 1), (((((1 - get_base1(vaccine_efficacy_for_susceptibility, it, "vaccine_efficacy_for_susceptibility", 1)) * get_base1(x, Sv, it, "x", 1)) * get_base1(beta, it, "beta", 1)) / npop) * (((get_base1(x, Imildu, it, "x", 1) + get_base1(x, Iprehu, it, "x", 1)) + get_base1(x, Imildv, it, "x", 1)) + get_base1(x, Iprehv, it, "x", 1)))));
                current_statement_begin__ = 229;
                stan::model::assign(total_cases_increase, 
                            stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list()), 
                            ((newEu + newEv) + get_base1(total_cases_increase, it, "total_cases_increase", 1)), 
                            "assigning variable total_cases_increase");
                current_statement_begin__ = 231;
                if (as_bool((primitive_value((primitive_value(logical_gt(it, 1)) && primitive_value(logical_lt(it, 200)))) && primitive_value(logical_eq(extend, 0))))) {
                    current_statement_begin__ = 232;
                    stan::model::assign(newE_temp, 
                                stan::model::cons_list(stan::model::index_uni(it), stan::model::nil_index_list()), 
                                newEu, 
                                "assigning variable newE_temp");
                } else {
                    current_statement_begin__ = 234;
                    stan::model::assign(newE_temp, 
                                stan::model::cons_list(stan::model::index_uni(it), stan::model::nil_index_list()), 
                                (1 + zero), 
                                "assigning variable newE_temp");
                }
                current_statement_begin__ = 237;
                stan::math::assign(vaccinated, stan::math::fmin(get_base1(vaccinated_per_day, it, "vaccinated_per_day", 1), ((get_base1(x, Su, it, "x", 1) + get_base1(x, Eu, it, "x", 1)) + get_base1(x, Rliveu, it, "x", 1))));
                current_statement_begin__ = 240;
                stan::math::assign(newIu, ((1.0 / duration_latent) * get_base1(x, Eu, it, "x", 1)));
                current_statement_begin__ = 241;
                stan::math::assign(newIv, ((1.0 / duration_latent) * get_base1(x, Ev, it, "x", 1)));
                current_statement_begin__ = 242;
                stan::math::assign(newhospu, ((1.0 / duration_pre_hosp) * get_base1(x, Iprehu, it, "x", 1)));
                current_statement_begin__ = 243;
                stan::math::assign(newhospv, ((1.0 / duration_pre_hosp) * get_base1(x, Iprehv, it, "x", 1)));
                current_statement_begin__ = 244;
                stan::math::assign(newrecu_mild, ((1.0 / duration_rec_mild) * get_base1(x, Imildu, it, "x", 1)));
                current_statement_begin__ = 245;
                stan::math::assign(newrecv_mild, ((1.0 / duration_rec_mild) * get_base1(x, Imildv, it, "x", 1)));
                current_statement_begin__ = 246;
                stan::math::assign(newrecu_mod, ((1.0 / duration_hosp_mod) * get_base1(x, Hmodu, it, "x", 1)));
                current_statement_begin__ = 247;
                stan::math::assign(newrecv_mod, ((1.0 / duration_hosp_mod) * get_base1(x, Hmodv, it, "x", 1)));
                current_statement_begin__ = 248;
                stan::math::assign(leave_icuu, ((1.0 / duration_hosp_icu) * get_base1(x, Hicuu, it, "x", 1)));
                current_statement_begin__ = 249;
                stan::math::assign(leave_icuv, ((1.0 / duration_hosp_icu) * get_base1(x, Hicuv, it, "x", 1)));
                current_statement_begin__ = 250;
                stan::math::assign(frac_vac_S, (get_base1(x, Su, it, "x", 1) / ((get_base1(x, Su, it, "x", 1) + get_base1(x, Eu, it, "x", 1)) + get_base1(x, Rliveu, it, "x", 1))));
                current_statement_begin__ = 251;
                stan::math::assign(newSv, (vaccinated * frac_vac_S));
                current_statement_begin__ = 252;
                stan::math::assign(newRlivev, (vaccinated * (1 - frac_vac_S)));
                current_statement_begin__ = 254;
                stan::math::assign(S_lostv, ((1.0 / get_base1(duration_vaccinated, it, "duration_vaccinated", 1)) * get_base1(x, Sv, it, "x", 1)));
                current_statement_begin__ = 255;
                stan::math::assign(R_lostv, ((1.0 / get_base1(duration_vaccinated, it, "duration_vaccinated", 1)) * get_base1(x, Rlivev, it, "x", 1)));
                current_statement_begin__ = 256;
                stan::math::assign(R_lostnatu, ((1.0 / get_base1(duration_natural, it, "duration_natural", 1)) * get_base1(x, Rliveu, it, "x", 1)));
                current_statement_begin__ = 257;
                stan::math::assign(R_lostnatv, ((1.0 / get_base1(duration_natural, it, "duration_natural", 1)) * get_base1(x, Rlivev, it, "x", 1)));
                current_statement_begin__ = 260;
                stan::math::assign(frac_hospv, (((frac_hosp * get_base1(frac_hosp_multiplier, it, "frac_hosp_multiplier", 1)) * (1 - get_base1(vaccine_efficacy_against_progression, it, "vaccine_efficacy_against_progression", 1))) / (1 - get_base1(vaccine_efficacy_for_susceptibility, it, "vaccine_efficacy_for_susceptibility", 1))));
                current_statement_begin__ = 265;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Su), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((((get_base1(x, Su, it, "x", 1) - newEu) - newSv) + S_lostv) + R_lostnatu), 
                            "assigning variable x");
                current_statement_begin__ = 266;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Sv), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((((get_base1(x, Sv, it, "x", 1) - newEv) + newSv) - S_lostv) + R_lostnatv), 
                            "assigning variable x");
                current_statement_begin__ = 267;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Eu), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((get_base1(x, Eu, it, "x", 1) + newEu) - newIu), 
                            "assigning variable x");
                current_statement_begin__ = 268;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Ev), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((get_base1(x, Ev, it, "x", 1) + newEv) - newIv), 
                            "assigning variable x");
                current_statement_begin__ = 269;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Imildu), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((get_base1(x, Imildu, it, "x", 1) + (newIu * (1 - (frac_hosp * get_base1(frac_hosp_multiplier, it, "frac_hosp_multiplier", 1))))) - newrecu_mild), 
                            "assigning variable x");
                current_statement_begin__ = 270;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Imildv), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((get_base1(x, Imildv, it, "x", 1) + (newIv * (1 - frac_hospv))) - newrecv_mild), 
                            "assigning variable x");
                current_statement_begin__ = 271;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Iprehu), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((get_base1(x, Iprehu, it, "x", 1) + ((newIu * frac_hosp) * get_base1(frac_hosp_multiplier, it, "frac_hosp_multiplier", 1))) - newhospu), 
                            "assigning variable x");
                current_statement_begin__ = 272;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Iprehv), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((get_base1(x, Iprehv, it, "x", 1) + (newIv * frac_hospv)) - newhospv), 
                            "assigning variable x");
                current_statement_begin__ = 273;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Hmodu), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((get_base1(x, Hmodu, it, "x", 1) + (newhospu * (1 - (frac_icu * get_base1(frac_icu_multiplier, it, "frac_icu_multiplier", 1))))) - newrecu_mod), 
                            "assigning variable x");
                current_statement_begin__ = 274;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Hmodv), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((get_base1(x, Hmodv, it, "x", 1) + (newhospv * (1 - (frac_icu * get_base1(frac_icu_multiplier, it, "frac_icu_multiplier", 1))))) - newrecv_mod), 
                            "assigning variable x");
                current_statement_begin__ = 275;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Hicuu), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((get_base1(x, Hicuu, it, "x", 1) + ((newhospu * frac_icu) * get_base1(frac_icu_multiplier, it, "frac_icu_multiplier", 1))) - leave_icuu), 
                            "assigning variable x");
                current_statement_begin__ = 276;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Hicuv), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((get_base1(x, Hicuv, it, "x", 1) + ((newhospv * frac_icu) * get_base1(frac_icu_multiplier, it, "frac_icu_multiplier", 1))) - leave_icuv), 
                            "assigning variable x");
                current_statement_begin__ = 277;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Rliveu), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((((((get_base1(x, Rliveu, it, "x", 1) + newrecu_mild) + newrecu_mod) + (leave_icuu * (1 - (frac_mort * get_base1(frac_mort_multiplier, it, "frac_mort_multiplier", 1))))) - newRlivev) + R_lostv) - R_lostnatu), 
                            "assigning variable x");
                current_statement_begin__ = 278;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Rlivev), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((((((get_base1(x, Rlivev, it, "x", 1) + newrecv_mild) + newrecv_mod) + (leave_icuv * (1 - (frac_mort * get_base1(frac_mort_multiplier, it, "frac_mort_multiplier", 1))))) + newRlivev) - R_lostv) - R_lostnatv), 
                            "assigning variable x");
                current_statement_begin__ = 279;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Rmort), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((get_base1(x, Rmort, it, "x", 1) + ((leave_icuu * frac_mort) * get_base1(frac_mort_multiplier, it, "frac_mort_multiplier", 1))) + ((leave_icuv * frac_mort) * get_base1(frac_mort_multiplier, it, "frac_mort_multiplier", 1))), 
                            "assigning variable x");
                current_statement_begin__ = 282;
                stan::model::assign(new_admits, 
                            stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list()), 
                            (newhospu + newhospv), 
                            "assigning variable new_admits");
                current_statement_begin__ = 284;
                stan::model::assign(new_cases, 
                            stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list()), 
                            ((newIu + newIv) * frac_tested), 
                            "assigning variable new_cases");
                current_statement_begin__ = 288;
                if (as_bool(logical_gt(stan::math::fabs((sum(stan::model::rvalue(x, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), "x")) - npop)), 1e-1))) {
                    current_statement_begin__ = 289;
                    std::stringstream errmsg_stream__;
                    errmsg_stream__ << "Model is leaking, net gain: ";
                    errmsg_stream__ << (sum(stan::model::rvalue(x, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), "x")) - npop);
                    throw std::domain_error(errmsg_stream__.str());
                }
            }
            }
            current_statement_begin__ = 295;
            stan::model::assign(new_admits, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        get_base1(new_admits, 2, "new_admits", 1), 
                        "assigning variable new_admits");
            current_statement_begin__ = 296;
            stan::model::assign(new_cases, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        get_base1(new_cases, 2, "new_cases", 1), 
                        "assigning variable new_cases");
            current_statement_begin__ = 299;
            for (int itype = 1; itype <= nobs_types; ++itype) {
                current_statement_begin__ = 300;
                if (as_bool(logical_eq(itype, obs_hosp_census))) {
                    current_statement_begin__ = 301;
                    stan::model::assign(sim_data, 
                                stan::model::cons_list(stan::model::index_uni(itype), stan::model::nil_index_list()), 
                                add(add(add(get_base1(x, Hmodu, "x", 1), get_base1(x, Hicuu, "x", 1)), get_base1(x, Hmodv, "x", 1)), get_base1(x, Hicuv, "x", 1)), 
                                "assigning variable sim_data");
                } else if (as_bool(logical_eq(itype, obs_icu_census))) {
                    current_statement_begin__ = 303;
                    stan::model::assign(sim_data, 
                                stan::model::cons_list(stan::model::index_uni(itype), stan::model::nil_index_list()), 
                                add(get_base1(x, Hicuu, "x", 1), get_base1(x, Hicuv, "x", 1)), 
                                "assigning variable sim_data");
                } else if (as_bool(logical_eq(itype, obs_cum_deaths))) {
                    current_statement_begin__ = 305;
                    stan::model::assign(sim_data, 
                                stan::model::cons_list(stan::model::index_uni(itype), stan::model::nil_index_list()), 
                                get_base1(x, Rmort, "x", 1), 
                                "assigning variable sim_data");
                } else if (as_bool(logical_eq(itype, obs_cum_admits))) {
                    current_statement_begin__ = 307;
                    stan::model::assign(sim_data, 
                                stan::model::cons_list(stan::model::index_uni(itype), stan::model::nil_index_list()), 
                                new_admits, 
                                "assigning variable sim_data");
                } else if (as_bool(logical_eq(itype, obs_cases))) {
                    current_statement_begin__ = 309;
                    stan::model::assign(sim_data, 
                                stan::model::cons_list(stan::model::index_uni(itype), stan::model::nil_index_list()), 
                                new_cases, 
                                "assigning variable sim_data");
                } else if (as_bool(logical_eq(itype, obs_seroprev))) {
                    current_statement_begin__ = 311;
                    stan::model::assign(sim_data, 
                                stan::model::cons_list(stan::model::index_uni(itype), stan::model::nil_index_list()), 
                                divide(add(add(add(add(add(add(add(get_base1(x, Sv, "x", 1), get_base1(x, Ev, "x", 1)), get_base1(x, Imildv, "x", 1)), get_base1(x, Iprehv, "x", 1)), get_base1(x, Hmodv, "x", 1)), get_base1(x, Hicuv, "x", 1)), get_base1(x, Rliveu, "x", 1)), get_base1(x, Rlivev, "x", 1)), npop), 
                                "assigning variable sim_data");
                } else {
                    current_statement_begin__ = 313;
                    std::stringstream errmsg_stream__;
                    errmsg_stream__ << "unexpected itype";
                    throw std::domain_error(errmsg_stream__.str());
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 148;
            size_t x_j_1_max__ = ncompartments;
            size_t x_j_2_max__ = nt;
            for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(x(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: x" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable x: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            check_greater_or_equal(function__, "x", x, 0.0);
            current_statement_begin__ = 149;
            size_t sim_data_j_1_max__ = nobs_types;
            size_t sim_data_j_2_max__ = nt;
            for (size_t j_1__ = 0; j_1__ < sim_data_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < sim_data_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(sim_data(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: sim_data" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sim_data: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            check_greater_or_equal(function__, "sim_data", sim_data, 0.0);
            current_statement_begin__ = 150;
            size_t beta_k_0_max__ = nt;
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(beta[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: beta" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable beta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            size_t beta_i_0_max__ = nt;
            for (size_t i_0__ = 0; i_0__ < beta_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "beta[i_0__]", beta[i_0__], 0.0);
                check_less_or_equal(function__, "beta[i_0__]", beta[i_0__], beta_limit);
            }
            current_statement_begin__ = 151;
            size_t new_admits_j_1_max__ = nt;
            for (size_t j_1__ = 0; j_1__ < new_admits_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(new_admits(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: new_admits" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable new_admits: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "new_admits", new_admits, 0.0);
            current_statement_begin__ = 152;
            size_t new_cases_j_1_max__ = nt;
            for (size_t j_1__ = 0; j_1__ < new_cases_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(new_cases(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: new_cases" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable new_cases: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "new_cases", new_cases, 0.0);
            current_statement_begin__ = 153;
            size_t newE_temp_k_0_max__ = (nt - 1);
            for (size_t k_0__ = 0; k_0__ < newE_temp_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(newE_temp[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: newE_temp" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable newE_temp: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            size_t newE_temp_i_0_max__ = (nt - 1);
            for (size_t i_0__ = 0; i_0__ < newE_temp_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "newE_temp[i_0__]", newE_temp[i_0__], 1e-10);
            }
            current_statement_begin__ = 154;
            size_t total_cases_increase_k_0_max__ = nt;
            for (size_t k_0__ = 0; k_0__ < total_cases_increase_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(total_cases_increase[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: total_cases_increase" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable total_cases_increase: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            size_t total_cases_increase_i_0_max__ = nt;
            for (size_t i_0__ = 0; i_0__ < total_cases_increase_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "total_cases_increase[i_0__]", total_cases_increase[i_0__], 0.0);
            }
            // model body
            current_statement_begin__ = 318;
            if (as_bool(logical_eq(extend, 0))) {
                current_statement_begin__ = 321;
                lp_accum__.add(normal_log<propto__>(r0, mu_r0, sigma_r0));
                current_statement_begin__ = 323;
                for (int iinter = 1; iinter <= ninter; ++iinter) {
                    current_statement_begin__ = 324;
                    lp_accum__.add(normal_log<propto__>(get_base1(beta_multiplier, iinter, "beta_multiplier", 1), get_base1(mu_beta_inter, iinter, "mu_beta_inter", 1), get_base1(sigma_beta_inter, iinter, "sigma_beta_inter", 1)));
                    current_statement_begin__ = 325;
                    lp_accum__.add(normal_log<propto__>(get_base1(t_inter, iinter, "t_inter", 1), get_base1(mu_t_inter, iinter, "mu_t_inter", 1), get_base1(sigma_t_inter, iinter, "sigma_t_inter", 1)));
                }
                current_statement_begin__ = 328;
                lp_accum__.add(normal_log<propto__>(duration_latent, mu_duration_latent, sigma_duration_latent));
                current_statement_begin__ = 329;
                lp_accum__.add(normal_log<propto__>(duration_rec_mild, mu_duration_rec_mild, sigma_duration_rec_mild));
                current_statement_begin__ = 330;
                lp_accum__.add(normal_log<propto__>(duration_pre_hosp, mu_duration_pre_hosp, sigma_duration_pre_hosp));
                current_statement_begin__ = 331;
                lp_accum__.add(normal_log<propto__>(duration_hosp_mod, mu_duration_hosp_mod, sigma_duration_hosp_mod));
                current_statement_begin__ = 332;
                lp_accum__.add(normal_log<propto__>(duration_hosp_icu, mu_duration_hosp_icu, sigma_duration_hosp_icu));
                current_statement_begin__ = 334;
                lp_accum__.add(normal_log<propto__>(frac_hosp, mu_frac_hosp, sigma_frac_hosp));
                current_statement_begin__ = 335;
                lp_accum__.add(normal_log<propto__>(frac_icu, mu_frac_icu, sigma_frac_icu));
                current_statement_begin__ = 336;
                lp_accum__.add(normal_log<propto__>(frac_mort, mu_frac_mort, sigma_frac_mort));
                current_statement_begin__ = 337;
                lp_accum__.add(normal_log<propto__>(frac_tested, mu_frac_tested, sigma_frac_tested));
                current_statement_begin__ = 339;
                if (as_bool(logical_eq(from_beginning, 1))) {
                    current_statement_begin__ = 340;
                    lp_accum__.add(exponential_log<propto__>(ini_E, (1.0 / mu_iniE)));
                } else {
                    current_statement_begin__ = 342;
                    lp_accum__.add(normal_log<propto__>(ini_E, mu_iniE, sigma_iniE));
                    current_statement_begin__ = 343;
                    lp_accum__.add(normal_log<propto__>(ini_Imild, mu_ini_Imild, sigma_ini_Imild));
                    current_statement_begin__ = 344;
                    lp_accum__.add(normal_log<propto__>(ini_Ipreh, mu_ini_Ipreh, sigma_ini_Ipreh));
                    current_statement_begin__ = 345;
                    lp_accum__.add(normal_log<propto__>(ini_Rlive, mu_ini_Rlive, sigma_ini_Rlive));
                }
                current_statement_begin__ = 351;
                lp_accum__.add(exponential_log<propto__>(sigma_obs, sigma_obs_est_inv));
                current_statement_begin__ = 354;
                for (int itype = 1; itype <= nobs_types; ++itype) {
                    current_statement_begin__ = 355;
                    if (as_bool(logical_gt(get_base1(nobs, itype, "nobs", 1), 0))) {
                        current_statement_begin__ = 356;
                        lp_accum__.add(normal_log<propto__>(stan::model::rvalue(obs_data, stan::model::cons_list(stan::model::index_uni(itype), stan::model::cons_list(stan::model::index_min_max(1, get_base1(nobs, itype, "nobs", 1)), stan::model::nil_index_list())), "obs_data"), stan::model::rvalue(sim_data, stan::model::cons_list(stan::model::index_uni(itype), stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(tobs, stan::model::cons_list(stan::model::index_uni(itype), stan::model::cons_list(stan::model::index_min_max(1, get_base1(nobs, itype, "nobs", 1)), stan::model::nil_index_list())), "tobs")), stan::model::nil_index_list())), "sim_data"), get_base1(sigma_obs, itype, "sigma_obs", 1)));
                    }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("duration_latent");
        names__.push_back("duration_rec_mild");
        names__.push_back("duration_pre_hosp");
        names__.push_back("duration_hosp_mod");
        names__.push_back("duration_hosp_icu");
        names__.push_back("frac_hosp");
        names__.push_back("frac_icu");
        names__.push_back("frac_mort");
        names__.push_back("frac_tested");
        names__.push_back("ini_E");
        names__.push_back("ini_Imild");
        names__.push_back("ini_Ipreh");
        names__.push_back("ini_Rlive");
        names__.push_back("sigma_obs");
        names__.push_back("r0");
        names__.push_back("beta_multiplier");
        names__.push_back("t_inter");
        names__.push_back("x");
        names__.push_back("sim_data");
        names__.push_back("beta");
        names__.push_back("new_admits");
        names__.push_back("new_cases");
        names__.push_back("newE_temp");
        names__.push_back("total_cases_increase");
        names__.push_back("Rt");
        names__.push_back("Rt_unvac");
        names__.push_back("frac_vac");
        names__.push_back("total_cases");
        names__.push_back("ini_cases");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((1 - from_beginning));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((1 - from_beginning));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((1 - from_beginning));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nobs_types);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(ninter);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(ninter);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(ncompartments);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nobs_types);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((nt - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_LEMMA_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double duration_latent = in__.scalar_lb_constrain(1.0);
        vars__.push_back(duration_latent);
        double duration_rec_mild = in__.scalar_lb_constrain(1.0);
        vars__.push_back(duration_rec_mild);
        double duration_pre_hosp = in__.scalar_lb_constrain(1.0);
        vars__.push_back(duration_pre_hosp);
        double duration_hosp_mod = in__.scalar_lb_constrain(1.0);
        vars__.push_back(duration_hosp_mod);
        double duration_hosp_icu = in__.scalar_lb_constrain(1.0);
        vars__.push_back(duration_hosp_icu);
        double frac_hosp = in__.scalar_lub_constrain(0.005, 1.0);
        vars__.push_back(frac_hosp);
        double frac_icu = in__.scalar_lub_constrain(0.0, 1.0);
        vars__.push_back(frac_icu);
        double frac_mort = in__.scalar_lub_constrain(0.0, 1.0);
        vars__.push_back(frac_mort);
        double frac_tested = in__.scalar_lub_constrain(0.0, 1.0);
        vars__.push_back(frac_tested);
        double ini_E = in__.scalar_lb_constrain(0.0);
        vars__.push_back(ini_E);
        std::vector<double> ini_Imild;
        size_t ini_Imild_d_0_max__ = (1 - from_beginning);
        ini_Imild.reserve(ini_Imild_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < ini_Imild_d_0_max__; ++d_0__) {
            ini_Imild.push_back(in__.scalar_lb_constrain(0.0));
        }
        size_t ini_Imild_k_0_max__ = (1 - from_beginning);
        for (size_t k_0__ = 0; k_0__ < ini_Imild_k_0_max__; ++k_0__) {
            vars__.push_back(ini_Imild[k_0__]);
        }
        std::vector<double> ini_Ipreh;
        size_t ini_Ipreh_d_0_max__ = (1 - from_beginning);
        ini_Ipreh.reserve(ini_Ipreh_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < ini_Ipreh_d_0_max__; ++d_0__) {
            ini_Ipreh.push_back(in__.scalar_lb_constrain(0.0));
        }
        size_t ini_Ipreh_k_0_max__ = (1 - from_beginning);
        for (size_t k_0__ = 0; k_0__ < ini_Ipreh_k_0_max__; ++k_0__) {
            vars__.push_back(ini_Ipreh[k_0__]);
        }
        std::vector<double> ini_Rlive;
        size_t ini_Rlive_d_0_max__ = (1 - from_beginning);
        ini_Rlive.reserve(ini_Rlive_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < ini_Rlive_d_0_max__; ++d_0__) {
            ini_Rlive.push_back(in__.scalar_lb_constrain(0.0));
        }
        size_t ini_Rlive_k_0_max__ = (1 - from_beginning);
        for (size_t k_0__ = 0; k_0__ < ini_Rlive_k_0_max__; ++k_0__) {
            vars__.push_back(ini_Rlive[k_0__]);
        }
        std::vector<double> sigma_obs;
        size_t sigma_obs_d_0_max__ = nobs_types;
        sigma_obs.reserve(sigma_obs_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < sigma_obs_d_0_max__; ++d_0__) {
            sigma_obs.push_back(in__.scalar_lb_constrain(0.0));
        }
        size_t sigma_obs_k_0_max__ = nobs_types;
        for (size_t k_0__ = 0; k_0__ < sigma_obs_k_0_max__; ++k_0__) {
            vars__.push_back(sigma_obs[k_0__]);
        }
        double r0 = in__.scalar_lb_constrain(0.0);
        vars__.push_back(r0);
        std::vector<double> beta_multiplier;
        size_t beta_multiplier_d_0_max__ = ninter;
        beta_multiplier.reserve(beta_multiplier_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < beta_multiplier_d_0_max__; ++d_0__) {
            beta_multiplier.push_back(in__.scalar_lb_constrain(0.0));
        }
        size_t beta_multiplier_k_0_max__ = ninter;
        for (size_t k_0__ = 0; k_0__ < beta_multiplier_k_0_max__; ++k_0__) {
            vars__.push_back(beta_multiplier[k_0__]);
        }
        std::vector<double> t_inter;
        size_t t_inter_d_0_max__ = ninter;
        t_inter.reserve(t_inter_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < t_inter_d_0_max__; ++d_0__) {
            t_inter.push_back(in__.scalar_lb_constrain(1.0));
        }
        size_t t_inter_k_0_max__ = ninter;
        for (size_t k_0__ = 0; k_0__ < t_inter_k_0_max__; ++k_0__) {
            vars__.push_back(t_inter[k_0__]);
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 148;
            validate_non_negative_index("x", "ncompartments", ncompartments);
            validate_non_negative_index("x", "nt", nt);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> x(ncompartments, nt);
            stan::math::initialize(x, DUMMY_VAR__);
            stan::math::fill(x, DUMMY_VAR__);
            current_statement_begin__ = 149;
            validate_non_negative_index("sim_data", "nobs_types", nobs_types);
            validate_non_negative_index("sim_data", "nt", nt);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> sim_data(nobs_types, nt);
            stan::math::initialize(sim_data, DUMMY_VAR__);
            stan::math::fill(sim_data, DUMMY_VAR__);
            current_statement_begin__ = 150;
            validate_non_negative_index("beta", "nt", nt);
            std::vector<double> beta(nt, double(0));
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            current_statement_begin__ = 151;
            validate_non_negative_index("new_admits", "nt", nt);
            Eigen::Matrix<double, 1, Eigen::Dynamic> new_admits(nt);
            stan::math::initialize(new_admits, DUMMY_VAR__);
            stan::math::fill(new_admits, DUMMY_VAR__);
            current_statement_begin__ = 152;
            validate_non_negative_index("new_cases", "nt", nt);
            Eigen::Matrix<double, 1, Eigen::Dynamic> new_cases(nt);
            stan::math::initialize(new_cases, DUMMY_VAR__);
            stan::math::fill(new_cases, DUMMY_VAR__);
            current_statement_begin__ = 153;
            validate_non_negative_index("newE_temp", "(nt - 1)", (nt - 1));
            std::vector<double> newE_temp((nt - 1), double(0));
            stan::math::initialize(newE_temp, DUMMY_VAR__);
            stan::math::fill(newE_temp, DUMMY_VAR__);
            current_statement_begin__ = 154;
            validate_non_negative_index("total_cases_increase", "nt", nt);
            std::vector<double> total_cases_increase(nt, double(0));
            stan::math::initialize(total_cases_increase, DUMMY_VAR__);
            stan::math::fill(total_cases_increase, DUMMY_VAR__);
            // do transformed parameters statements
            {
            current_statement_begin__ = 159;
            local_scalar_t__ newEu(DUMMY_VAR__);
            (void) newEu;  // dummy to suppress unused var warning
            stan::math::initialize(newEu, DUMMY_VAR__);
            stan::math::fill(newEu, DUMMY_VAR__);
            current_statement_begin__ = 160;
            local_scalar_t__ newEv(DUMMY_VAR__);
            (void) newEv;  // dummy to suppress unused var warning
            stan::math::initialize(newEv, DUMMY_VAR__);
            stan::math::fill(newEv, DUMMY_VAR__);
            current_statement_begin__ = 161;
            local_scalar_t__ newIu(DUMMY_VAR__);
            (void) newIu;  // dummy to suppress unused var warning
            stan::math::initialize(newIu, DUMMY_VAR__);
            stan::math::fill(newIu, DUMMY_VAR__);
            current_statement_begin__ = 162;
            local_scalar_t__ newIv(DUMMY_VAR__);
            (void) newIv;  // dummy to suppress unused var warning
            stan::math::initialize(newIv, DUMMY_VAR__);
            stan::math::fill(newIv, DUMMY_VAR__);
            current_statement_begin__ = 163;
            local_scalar_t__ newrecu_mild(DUMMY_VAR__);
            (void) newrecu_mild;  // dummy to suppress unused var warning
            stan::math::initialize(newrecu_mild, DUMMY_VAR__);
            stan::math::fill(newrecu_mild, DUMMY_VAR__);
            current_statement_begin__ = 164;
            local_scalar_t__ newrecv_mild(DUMMY_VAR__);
            (void) newrecv_mild;  // dummy to suppress unused var warning
            stan::math::initialize(newrecv_mild, DUMMY_VAR__);
            stan::math::fill(newrecv_mild, DUMMY_VAR__);
            current_statement_begin__ = 165;
            local_scalar_t__ newrecu_mod(DUMMY_VAR__);
            (void) newrecu_mod;  // dummy to suppress unused var warning
            stan::math::initialize(newrecu_mod, DUMMY_VAR__);
            stan::math::fill(newrecu_mod, DUMMY_VAR__);
            current_statement_begin__ = 166;
            local_scalar_t__ newrecv_mod(DUMMY_VAR__);
            (void) newrecv_mod;  // dummy to suppress unused var warning
            stan::math::initialize(newrecv_mod, DUMMY_VAR__);
            stan::math::fill(newrecv_mod, DUMMY_VAR__);
            current_statement_begin__ = 167;
            local_scalar_t__ newhospu(DUMMY_VAR__);
            (void) newhospu;  // dummy to suppress unused var warning
            stan::math::initialize(newhospu, DUMMY_VAR__);
            stan::math::fill(newhospu, DUMMY_VAR__);
            current_statement_begin__ = 168;
            local_scalar_t__ newhospv(DUMMY_VAR__);
            (void) newhospv;  // dummy to suppress unused var warning
            stan::math::initialize(newhospv, DUMMY_VAR__);
            stan::math::fill(newhospv, DUMMY_VAR__);
            current_statement_begin__ = 169;
            local_scalar_t__ frac_hospv(DUMMY_VAR__);
            (void) frac_hospv;  // dummy to suppress unused var warning
            stan::math::initialize(frac_hospv, DUMMY_VAR__);
            stan::math::fill(frac_hospv, DUMMY_VAR__);
            current_statement_begin__ = 170;
            local_scalar_t__ leave_icuu(DUMMY_VAR__);
            (void) leave_icuu;  // dummy to suppress unused var warning
            stan::math::initialize(leave_icuu, DUMMY_VAR__);
            stan::math::fill(leave_icuu, DUMMY_VAR__);
            current_statement_begin__ = 171;
            local_scalar_t__ leave_icuv(DUMMY_VAR__);
            (void) leave_icuv;  // dummy to suppress unused var warning
            stan::math::initialize(leave_icuv, DUMMY_VAR__);
            stan::math::fill(leave_icuv, DUMMY_VAR__);
            current_statement_begin__ = 172;
            local_scalar_t__ beta_0(DUMMY_VAR__);
            (void) beta_0;  // dummy to suppress unused var warning
            stan::math::initialize(beta_0, DUMMY_VAR__);
            stan::math::fill(beta_0, DUMMY_VAR__);
            current_statement_begin__ = 173;
            local_scalar_t__ zero(DUMMY_VAR__);
            (void) zero;  // dummy to suppress unused var warning
            stan::math::initialize(zero, DUMMY_VAR__);
            stan::math::fill(zero, DUMMY_VAR__);
            current_statement_begin__ = 174;
            local_scalar_t__ vaccinated(DUMMY_VAR__);
            (void) vaccinated;  // dummy to suppress unused var warning
            stan::math::initialize(vaccinated, DUMMY_VAR__);
            stan::math::fill(vaccinated, DUMMY_VAR__);
            current_statement_begin__ = 175;
            local_scalar_t__ frac_vac_S(DUMMY_VAR__);
            (void) frac_vac_S;  // dummy to suppress unused var warning
            stan::math::initialize(frac_vac_S, DUMMY_VAR__);
            stan::math::fill(frac_vac_S, DUMMY_VAR__);
            current_statement_begin__ = 176;
            local_scalar_t__ newSv(DUMMY_VAR__);
            (void) newSv;  // dummy to suppress unused var warning
            stan::math::initialize(newSv, DUMMY_VAR__);
            stan::math::fill(newSv, DUMMY_VAR__);
            current_statement_begin__ = 177;
            local_scalar_t__ newRlivev(DUMMY_VAR__);
            (void) newRlivev;  // dummy to suppress unused var warning
            stan::math::initialize(newRlivev, DUMMY_VAR__);
            stan::math::fill(newRlivev, DUMMY_VAR__);
            current_statement_begin__ = 178;
            local_scalar_t__ S_lostv(DUMMY_VAR__);
            (void) S_lostv;  // dummy to suppress unused var warning
            stan::math::initialize(S_lostv, DUMMY_VAR__);
            stan::math::fill(S_lostv, DUMMY_VAR__);
            current_statement_begin__ = 179;
            local_scalar_t__ R_lostv(DUMMY_VAR__);
            (void) R_lostv;  // dummy to suppress unused var warning
            stan::math::initialize(R_lostv, DUMMY_VAR__);
            stan::math::fill(R_lostv, DUMMY_VAR__);
            current_statement_begin__ = 180;
            local_scalar_t__ R_lostnatu(DUMMY_VAR__);
            (void) R_lostnatu;  // dummy to suppress unused var warning
            stan::math::initialize(R_lostnatu, DUMMY_VAR__);
            stan::math::fill(R_lostnatu, DUMMY_VAR__);
            current_statement_begin__ = 181;
            local_scalar_t__ R_lostnatv(DUMMY_VAR__);
            (void) R_lostnatv;  // dummy to suppress unused var warning
            stan::math::initialize(R_lostnatv, DUMMY_VAR__);
            stan::math::fill(R_lostnatv, DUMMY_VAR__);
            current_statement_begin__ = 185;
            stan::math::assign(beta_0, (r0 / ((frac_hosp * duration_pre_hosp) + ((1 - frac_hosp) * duration_rec_mild))));
            current_statement_begin__ = 186;
            for (int it = 1; it <= nt; ++it) {
                current_statement_begin__ = 187;
                stan::model::assign(beta, 
                            stan::model::cons_list(stan::model::index_uni(it), stan::model::nil_index_list()), 
                            beta_0, 
                            "assigning variable beta");
                current_statement_begin__ = 188;
                for (int iinter = 1; iinter <= ninter; ++iinter) {
                    current_statement_begin__ = 191;
                    stan::model::assign(beta, 
                                stan::model::cons_list(stan::model::index_uni(it), stan::model::nil_index_list()), 
                                (get_base1(beta, it, "beta", 1) * pow(get_base1(beta_multiplier, iinter, "beta_multiplier", 1), inv_logit(((9.19024 / get_base1(len_inter, iinter, "len_inter", 1)) * (it - (get_base1(t_inter, iinter, "t_inter", 1) + (get_base1(len_inter, iinter, "len_inter", 1) / 2))))))), 
                                "assigning variable beta");
                }
            }
            current_statement_begin__ = 196;
            stan::math::assign(zero, (ini_E * 1e-15));
            current_statement_begin__ = 197;
            stan::model::assign(x, 
                        stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        rep_vector(zero, ncompartments), 
                        "assigning variable x");
            current_statement_begin__ = 199;
            stan::model::assign(total_cases_increase, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        zero, 
                        "assigning variable total_cases_increase");
            current_statement_begin__ = 201;
            stan::model::assign(x, 
                        stan::model::cons_list(stan::model::index_uni(Eu), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        ini_E, 
                        "assigning variable x");
            current_statement_begin__ = 202;
            if (as_bool(logical_eq(from_beginning, 0))) {
                current_statement_begin__ = 203;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Hmodu), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            (stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(Hmodu), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "x") + (get_base1(obs_data, obs_hosp_census, 1, "obs_data", 1) - get_base1(obs_data, obs_icu_census, 1, "obs_data", 1))), 
                            "assigning variable x");
                current_statement_begin__ = 204;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Hicuu), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            (stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(Hicuu), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "x") + get_base1(obs_data, obs_icu_census, 1, "obs_data", 1)), 
                            "assigning variable x");
                current_statement_begin__ = 205;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Rmort), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            (stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(Rmort), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "x") + get_base1(obs_data, obs_cum_deaths, 1, "obs_data", 1)), 
                            "assigning variable x");
                current_statement_begin__ = 206;
                stan::model::assign(new_cases, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            (stan::model::rvalue(new_cases, stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), "new_cases") + get_base1(obs_data, obs_cases, 1, "obs_data", 1)), 
                            "assigning variable new_cases");
                current_statement_begin__ = 207;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Imildu), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            get_base1(ini_Imild, 1, "ini_Imild", 1), 
                            "assigning variable x");
                current_statement_begin__ = 208;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Iprehu), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            get_base1(ini_Ipreh, 1, "ini_Ipreh", 1), 
                            "assigning variable x");
                current_statement_begin__ = 209;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Rliveu), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            get_base1(ini_Rlive, 1, "ini_Rlive", 1), 
                            "assigning variable x");
            }
            current_statement_begin__ = 212;
            stan::model::assign(x, 
                        stan::model::cons_list(stan::model::index_uni(Su), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        (npop - sum(stan::model::rvalue(x, stan::model::cons_list(stan::model::index_min_max(2, ncompartments), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "x"))), 
                        "assigning variable x");
            current_statement_begin__ = 218;
            for (int it = 1; it <= (nt - 1); ++it) {
                current_statement_begin__ = 221;
                stan::math::assign(newEu, stan::math::fmin(get_base1(x, Su, it, "x", 1), (((get_base1(x, Su, it, "x", 1) * get_base1(beta, it, "beta", 1)) / npop) * (((get_base1(x, Imildu, it, "x", 1) + get_base1(x, Iprehu, it, "x", 1)) + get_base1(x, Imildv, it, "x", 1)) + get_base1(x, Iprehv, it, "x", 1)))));
                current_statement_begin__ = 225;
                stan::math::assign(newEv, stan::math::fmin(get_base1(x, Sv, it, "x", 1), (((((1 - get_base1(vaccine_efficacy_for_susceptibility, it, "vaccine_efficacy_for_susceptibility", 1)) * get_base1(x, Sv, it, "x", 1)) * get_base1(beta, it, "beta", 1)) / npop) * (((get_base1(x, Imildu, it, "x", 1) + get_base1(x, Iprehu, it, "x", 1)) + get_base1(x, Imildv, it, "x", 1)) + get_base1(x, Iprehv, it, "x", 1)))));
                current_statement_begin__ = 229;
                stan::model::assign(total_cases_increase, 
                            stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list()), 
                            ((newEu + newEv) + get_base1(total_cases_increase, it, "total_cases_increase", 1)), 
                            "assigning variable total_cases_increase");
                current_statement_begin__ = 231;
                if (as_bool((primitive_value((primitive_value(logical_gt(it, 1)) && primitive_value(logical_lt(it, 200)))) && primitive_value(logical_eq(extend, 0))))) {
                    current_statement_begin__ = 232;
                    stan::model::assign(newE_temp, 
                                stan::model::cons_list(stan::model::index_uni(it), stan::model::nil_index_list()), 
                                newEu, 
                                "assigning variable newE_temp");
                } else {
                    current_statement_begin__ = 234;
                    stan::model::assign(newE_temp, 
                                stan::model::cons_list(stan::model::index_uni(it), stan::model::nil_index_list()), 
                                (1 + zero), 
                                "assigning variable newE_temp");
                }
                current_statement_begin__ = 237;
                stan::math::assign(vaccinated, stan::math::fmin(get_base1(vaccinated_per_day, it, "vaccinated_per_day", 1), ((get_base1(x, Su, it, "x", 1) + get_base1(x, Eu, it, "x", 1)) + get_base1(x, Rliveu, it, "x", 1))));
                current_statement_begin__ = 240;
                stan::math::assign(newIu, ((1.0 / duration_latent) * get_base1(x, Eu, it, "x", 1)));
                current_statement_begin__ = 241;
                stan::math::assign(newIv, ((1.0 / duration_latent) * get_base1(x, Ev, it, "x", 1)));
                current_statement_begin__ = 242;
                stan::math::assign(newhospu, ((1.0 / duration_pre_hosp) * get_base1(x, Iprehu, it, "x", 1)));
                current_statement_begin__ = 243;
                stan::math::assign(newhospv, ((1.0 / duration_pre_hosp) * get_base1(x, Iprehv, it, "x", 1)));
                current_statement_begin__ = 244;
                stan::math::assign(newrecu_mild, ((1.0 / duration_rec_mild) * get_base1(x, Imildu, it, "x", 1)));
                current_statement_begin__ = 245;
                stan::math::assign(newrecv_mild, ((1.0 / duration_rec_mild) * get_base1(x, Imildv, it, "x", 1)));
                current_statement_begin__ = 246;
                stan::math::assign(newrecu_mod, ((1.0 / duration_hosp_mod) * get_base1(x, Hmodu, it, "x", 1)));
                current_statement_begin__ = 247;
                stan::math::assign(newrecv_mod, ((1.0 / duration_hosp_mod) * get_base1(x, Hmodv, it, "x", 1)));
                current_statement_begin__ = 248;
                stan::math::assign(leave_icuu, ((1.0 / duration_hosp_icu) * get_base1(x, Hicuu, it, "x", 1)));
                current_statement_begin__ = 249;
                stan::math::assign(leave_icuv, ((1.0 / duration_hosp_icu) * get_base1(x, Hicuv, it, "x", 1)));
                current_statement_begin__ = 250;
                stan::math::assign(frac_vac_S, (get_base1(x, Su, it, "x", 1) / ((get_base1(x, Su, it, "x", 1) + get_base1(x, Eu, it, "x", 1)) + get_base1(x, Rliveu, it, "x", 1))));
                current_statement_begin__ = 251;
                stan::math::assign(newSv, (vaccinated * frac_vac_S));
                current_statement_begin__ = 252;
                stan::math::assign(newRlivev, (vaccinated * (1 - frac_vac_S)));
                current_statement_begin__ = 254;
                stan::math::assign(S_lostv, ((1.0 / get_base1(duration_vaccinated, it, "duration_vaccinated", 1)) * get_base1(x, Sv, it, "x", 1)));
                current_statement_begin__ = 255;
                stan::math::assign(R_lostv, ((1.0 / get_base1(duration_vaccinated, it, "duration_vaccinated", 1)) * get_base1(x, Rlivev, it, "x", 1)));
                current_statement_begin__ = 256;
                stan::math::assign(R_lostnatu, ((1.0 / get_base1(duration_natural, it, "duration_natural", 1)) * get_base1(x, Rliveu, it, "x", 1)));
                current_statement_begin__ = 257;
                stan::math::assign(R_lostnatv, ((1.0 / get_base1(duration_natural, it, "duration_natural", 1)) * get_base1(x, Rlivev, it, "x", 1)));
                current_statement_begin__ = 260;
                stan::math::assign(frac_hospv, (((frac_hosp * get_base1(frac_hosp_multiplier, it, "frac_hosp_multiplier", 1)) * (1 - get_base1(vaccine_efficacy_against_progression, it, "vaccine_efficacy_against_progression", 1))) / (1 - get_base1(vaccine_efficacy_for_susceptibility, it, "vaccine_efficacy_for_susceptibility", 1))));
                current_statement_begin__ = 265;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Su), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((((get_base1(x, Su, it, "x", 1) - newEu) - newSv) + S_lostv) + R_lostnatu), 
                            "assigning variable x");
                current_statement_begin__ = 266;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Sv), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((((get_base1(x, Sv, it, "x", 1) - newEv) + newSv) - S_lostv) + R_lostnatv), 
                            "assigning variable x");
                current_statement_begin__ = 267;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Eu), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((get_base1(x, Eu, it, "x", 1) + newEu) - newIu), 
                            "assigning variable x");
                current_statement_begin__ = 268;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Ev), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((get_base1(x, Ev, it, "x", 1) + newEv) - newIv), 
                            "assigning variable x");
                current_statement_begin__ = 269;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Imildu), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((get_base1(x, Imildu, it, "x", 1) + (newIu * (1 - (frac_hosp * get_base1(frac_hosp_multiplier, it, "frac_hosp_multiplier", 1))))) - newrecu_mild), 
                            "assigning variable x");
                current_statement_begin__ = 270;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Imildv), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((get_base1(x, Imildv, it, "x", 1) + (newIv * (1 - frac_hospv))) - newrecv_mild), 
                            "assigning variable x");
                current_statement_begin__ = 271;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Iprehu), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((get_base1(x, Iprehu, it, "x", 1) + ((newIu * frac_hosp) * get_base1(frac_hosp_multiplier, it, "frac_hosp_multiplier", 1))) - newhospu), 
                            "assigning variable x");
                current_statement_begin__ = 272;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Iprehv), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((get_base1(x, Iprehv, it, "x", 1) + (newIv * frac_hospv)) - newhospv), 
                            "assigning variable x");
                current_statement_begin__ = 273;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Hmodu), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((get_base1(x, Hmodu, it, "x", 1) + (newhospu * (1 - (frac_icu * get_base1(frac_icu_multiplier, it, "frac_icu_multiplier", 1))))) - newrecu_mod), 
                            "assigning variable x");
                current_statement_begin__ = 274;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Hmodv), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((get_base1(x, Hmodv, it, "x", 1) + (newhospv * (1 - (frac_icu * get_base1(frac_icu_multiplier, it, "frac_icu_multiplier", 1))))) - newrecv_mod), 
                            "assigning variable x");
                current_statement_begin__ = 275;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Hicuu), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((get_base1(x, Hicuu, it, "x", 1) + ((newhospu * frac_icu) * get_base1(frac_icu_multiplier, it, "frac_icu_multiplier", 1))) - leave_icuu), 
                            "assigning variable x");
                current_statement_begin__ = 276;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Hicuv), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((get_base1(x, Hicuv, it, "x", 1) + ((newhospv * frac_icu) * get_base1(frac_icu_multiplier, it, "frac_icu_multiplier", 1))) - leave_icuv), 
                            "assigning variable x");
                current_statement_begin__ = 277;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Rliveu), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((((((get_base1(x, Rliveu, it, "x", 1) + newrecu_mild) + newrecu_mod) + (leave_icuu * (1 - (frac_mort * get_base1(frac_mort_multiplier, it, "frac_mort_multiplier", 1))))) - newRlivev) + R_lostv) - R_lostnatu), 
                            "assigning variable x");
                current_statement_begin__ = 278;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Rlivev), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((((((get_base1(x, Rlivev, it, "x", 1) + newrecv_mild) + newrecv_mod) + (leave_icuv * (1 - (frac_mort * get_base1(frac_mort_multiplier, it, "frac_mort_multiplier", 1))))) + newRlivev) - R_lostv) - R_lostnatv), 
                            "assigning variable x");
                current_statement_begin__ = 279;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Rmort), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((get_base1(x, Rmort, it, "x", 1) + ((leave_icuu * frac_mort) * get_base1(frac_mort_multiplier, it, "frac_mort_multiplier", 1))) + ((leave_icuv * frac_mort) * get_base1(frac_mort_multiplier, it, "frac_mort_multiplier", 1))), 
                            "assigning variable x");
                current_statement_begin__ = 282;
                stan::model::assign(new_admits, 
                            stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list()), 
                            (newhospu + newhospv), 
                            "assigning variable new_admits");
                current_statement_begin__ = 284;
                stan::model::assign(new_cases, 
                            stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list()), 
                            ((newIu + newIv) * frac_tested), 
                            "assigning variable new_cases");
                current_statement_begin__ = 288;
                if (as_bool(logical_gt(stan::math::fabs((sum(stan::model::rvalue(x, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), "x")) - npop)), 1e-1))) {
                    current_statement_begin__ = 289;
                    std::stringstream errmsg_stream__;
                    errmsg_stream__ << "Model is leaking, net gain: ";
                    errmsg_stream__ << (sum(stan::model::rvalue(x, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), "x")) - npop);
                    throw std::domain_error(errmsg_stream__.str());
                }
            }
            }
            current_statement_begin__ = 295;
            stan::model::assign(new_admits, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        get_base1(new_admits, 2, "new_admits", 1), 
                        "assigning variable new_admits");
            current_statement_begin__ = 296;
            stan::model::assign(new_cases, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        get_base1(new_cases, 2, "new_cases", 1), 
                        "assigning variable new_cases");
            current_statement_begin__ = 299;
            for (int itype = 1; itype <= nobs_types; ++itype) {
                current_statement_begin__ = 300;
                if (as_bool(logical_eq(itype, obs_hosp_census))) {
                    current_statement_begin__ = 301;
                    stan::model::assign(sim_data, 
                                stan::model::cons_list(stan::model::index_uni(itype), stan::model::nil_index_list()), 
                                add(add(add(get_base1(x, Hmodu, "x", 1), get_base1(x, Hicuu, "x", 1)), get_base1(x, Hmodv, "x", 1)), get_base1(x, Hicuv, "x", 1)), 
                                "assigning variable sim_data");
                } else if (as_bool(logical_eq(itype, obs_icu_census))) {
                    current_statement_begin__ = 303;
                    stan::model::assign(sim_data, 
                                stan::model::cons_list(stan::model::index_uni(itype), stan::model::nil_index_list()), 
                                add(get_base1(x, Hicuu, "x", 1), get_base1(x, Hicuv, "x", 1)), 
                                "assigning variable sim_data");
                } else if (as_bool(logical_eq(itype, obs_cum_deaths))) {
                    current_statement_begin__ = 305;
                    stan::model::assign(sim_data, 
                                stan::model::cons_list(stan::model::index_uni(itype), stan::model::nil_index_list()), 
                                get_base1(x, Rmort, "x", 1), 
                                "assigning variable sim_data");
                } else if (as_bool(logical_eq(itype, obs_cum_admits))) {
                    current_statement_begin__ = 307;
                    stan::model::assign(sim_data, 
                                stan::model::cons_list(stan::model::index_uni(itype), stan::model::nil_index_list()), 
                                new_admits, 
                                "assigning variable sim_data");
                } else if (as_bool(logical_eq(itype, obs_cases))) {
                    current_statement_begin__ = 309;
                    stan::model::assign(sim_data, 
                                stan::model::cons_list(stan::model::index_uni(itype), stan::model::nil_index_list()), 
                                new_cases, 
                                "assigning variable sim_data");
                } else if (as_bool(logical_eq(itype, obs_seroprev))) {
                    current_statement_begin__ = 311;
                    stan::model::assign(sim_data, 
                                stan::model::cons_list(stan::model::index_uni(itype), stan::model::nil_index_list()), 
                                divide(add(add(add(add(add(add(add(get_base1(x, Sv, "x", 1), get_base1(x, Ev, "x", 1)), get_base1(x, Imildv, "x", 1)), get_base1(x, Iprehv, "x", 1)), get_base1(x, Hmodv, "x", 1)), get_base1(x, Hicuv, "x", 1)), get_base1(x, Rliveu, "x", 1)), get_base1(x, Rlivev, "x", 1)), npop), 
                                "assigning variable sim_data");
                } else {
                    current_statement_begin__ = 313;
                    std::stringstream errmsg_stream__;
                    errmsg_stream__ << "unexpected itype";
                    throw std::domain_error(errmsg_stream__.str());
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 148;
            check_greater_or_equal(function__, "x", x, 0.0);
            current_statement_begin__ = 149;
            check_greater_or_equal(function__, "sim_data", sim_data, 0.0);
            current_statement_begin__ = 150;
            size_t beta_i_0_max__ = nt;
            for (size_t i_0__ = 0; i_0__ < beta_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "beta[i_0__]", beta[i_0__], 0.0);
                check_less_or_equal(function__, "beta[i_0__]", beta[i_0__], beta_limit);
            }
            current_statement_begin__ = 151;
            check_greater_or_equal(function__, "new_admits", new_admits, 0.0);
            current_statement_begin__ = 152;
            check_greater_or_equal(function__, "new_cases", new_cases, 0.0);
            current_statement_begin__ = 153;
            size_t newE_temp_i_0_max__ = (nt - 1);
            for (size_t i_0__ = 0; i_0__ < newE_temp_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "newE_temp[i_0__]", newE_temp[i_0__], 1e-10);
            }
            current_statement_begin__ = 154;
            size_t total_cases_increase_i_0_max__ = nt;
            for (size_t i_0__ = 0; i_0__ < total_cases_increase_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "total_cases_increase[i_0__]", total_cases_increase[i_0__], 0.0);
            }
            // write transformed parameters
            if (include_tparams__) {
                size_t x_j_2_max__ = nt;
                size_t x_j_1_max__ = ncompartments;
                for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                        vars__.push_back(x(j_1__, j_2__));
                    }
                }
                size_t sim_data_j_2_max__ = nt;
                size_t sim_data_j_1_max__ = nobs_types;
                for (size_t j_2__ = 0; j_2__ < sim_data_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < sim_data_j_1_max__; ++j_1__) {
                        vars__.push_back(sim_data(j_1__, j_2__));
                    }
                }
                size_t beta_k_0_max__ = nt;
                for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                    vars__.push_back(beta[k_0__]);
                }
                size_t new_admits_j_1_max__ = nt;
                for (size_t j_1__ = 0; j_1__ < new_admits_j_1_max__; ++j_1__) {
                    vars__.push_back(new_admits(j_1__));
                }
                size_t new_cases_j_1_max__ = nt;
                for (size_t j_1__ = 0; j_1__ < new_cases_j_1_max__; ++j_1__) {
                    vars__.push_back(new_cases(j_1__));
                }
                size_t newE_temp_k_0_max__ = (nt - 1);
                for (size_t k_0__ = 0; k_0__ < newE_temp_k_0_max__; ++k_0__) {
                    vars__.push_back(newE_temp[k_0__]);
                }
                size_t total_cases_increase_k_0_max__ = nt;
                for (size_t k_0__ = 0; k_0__ < total_cases_increase_k_0_max__; ++k_0__) {
                    vars__.push_back(total_cases_increase[k_0__]);
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 363;
            validate_non_negative_index("Rt", "nt", nt);
            std::vector<double> Rt(nt, double(0));
            stan::math::initialize(Rt, DUMMY_VAR__);
            stan::math::fill(Rt, DUMMY_VAR__);
            current_statement_begin__ = 364;
            validate_non_negative_index("Rt_unvac", "nt", nt);
            std::vector<double> Rt_unvac(nt, double(0));
            stan::math::initialize(Rt_unvac, DUMMY_VAR__);
            stan::math::fill(Rt_unvac, DUMMY_VAR__);
            current_statement_begin__ = 365;
            double frac_vac;
            (void) frac_vac;  // dummy to suppress unused var warning
            stan::math::initialize(frac_vac, DUMMY_VAR__);
            stan::math::fill(frac_vac, DUMMY_VAR__);
            current_statement_begin__ = 366;
            validate_non_negative_index("total_cases", "nt", nt);
            std::vector<double> total_cases(nt, double(0));
            stan::math::initialize(total_cases, DUMMY_VAR__);
            stan::math::fill(total_cases, DUMMY_VAR__);
            current_statement_begin__ = 367;
            double ini_cases;
            (void) ini_cases;  // dummy to suppress unused var warning
            stan::math::initialize(ini_cases, DUMMY_VAR__);
            stan::math::fill(ini_cases, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 368;
            if (as_bool(from_beginning)) {
                current_statement_begin__ = 369;
                stan::math::assign(ini_cases, 0);
            } else {
                current_statement_begin__ = 371;
                stan::math::assign(ini_cases, stan::math::fmax(0.0, normal_rng(mu_ini_cases, sigma_ini_cases, base_rng__)));
            }
            current_statement_begin__ = 373;
            for (int it = 1; it <= nt; ++it) {
                current_statement_begin__ = 374;
                stan::math::assign(frac_vac, (get_base1(x, Sv, it, "x", 1) / (get_base1(x, Su, it, "x", 1) + get_base1(x, Sv, it, "x", 1))));
                current_statement_begin__ = 375;
                stan::model::assign(Rt_unvac, 
                            stan::model::cons_list(stan::model::index_uni(it), stan::model::nil_index_list()), 
                            (((get_base1(beta, it, "beta", 1) * (((frac_hosp * get_base1(frac_hosp_multiplier, it, "frac_hosp_multiplier", 1)) * duration_pre_hosp) + ((1 - (frac_hosp * get_base1(frac_hosp_multiplier, it, "frac_hosp_multiplier", 1))) * duration_rec_mild))) * (get_base1(x, Su, it, "x", 1) + get_base1(x, Sv, it, "x", 1))) / npop), 
                            "assigning variable Rt_unvac");
                current_statement_begin__ = 376;
                stan::model::assign(Rt, 
                            stan::model::cons_list(stan::model::index_uni(it), stan::model::nil_index_list()), 
                            ((1 - (frac_vac * get_base1(vaccine_efficacy_for_susceptibility, it, "vaccine_efficacy_for_susceptibility", 1))) * get_base1(Rt_unvac, it, "Rt_unvac", 1)), 
                            "assigning variable Rt");
                current_statement_begin__ = 377;
                stan::model::assign(total_cases, 
                            stan::model::cons_list(stan::model::index_uni(it), stan::model::nil_index_list()), 
                            (get_base1(total_cases_increase, it, "total_cases_increase", 1) + ini_cases), 
                            "assigning variable total_cases");
            }
            // validate, write generated quantities
            current_statement_begin__ = 363;
            size_t Rt_i_0_max__ = nt;
            for (size_t i_0__ = 0; i_0__ < Rt_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "Rt[i_0__]", Rt[i_0__], 0.0);
            }
            size_t Rt_k_0_max__ = nt;
            for (size_t k_0__ = 0; k_0__ < Rt_k_0_max__; ++k_0__) {
                vars__.push_back(Rt[k_0__]);
            }
            current_statement_begin__ = 364;
            size_t Rt_unvac_i_0_max__ = nt;
            for (size_t i_0__ = 0; i_0__ < Rt_unvac_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "Rt_unvac[i_0__]", Rt_unvac[i_0__], 0.0);
            }
            size_t Rt_unvac_k_0_max__ = nt;
            for (size_t k_0__ = 0; k_0__ < Rt_unvac_k_0_max__; ++k_0__) {
                vars__.push_back(Rt_unvac[k_0__]);
            }
            current_statement_begin__ = 365;
            check_greater_or_equal(function__, "frac_vac", frac_vac, 0.0);
            vars__.push_back(frac_vac);
            current_statement_begin__ = 366;
            size_t total_cases_i_0_max__ = nt;
            for (size_t i_0__ = 0; i_0__ < total_cases_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "total_cases[i_0__]", total_cases[i_0__], 0.0);
            }
            size_t total_cases_k_0_max__ = nt;
            for (size_t k_0__ = 0; k_0__ < total_cases_k_0_max__; ++k_0__) {
                vars__.push_back(total_cases[k_0__]);
            }
            current_statement_begin__ = 367;
            check_greater_or_equal(function__, "ini_cases", ini_cases, 0.0);
            vars__.push_back(ini_cases);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_LEMMA";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "duration_latent";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "duration_rec_mild";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "duration_pre_hosp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "duration_hosp_mod";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "duration_hosp_icu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "frac_hosp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "frac_icu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "frac_mort";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "frac_tested";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "ini_E";
        param_names__.push_back(param_name_stream__.str());
        size_t ini_Imild_k_0_max__ = (1 - from_beginning);
        for (size_t k_0__ = 0; k_0__ < ini_Imild_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ini_Imild" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t ini_Ipreh_k_0_max__ = (1 - from_beginning);
        for (size_t k_0__ = 0; k_0__ < ini_Ipreh_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ini_Ipreh" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t ini_Rlive_k_0_max__ = (1 - from_beginning);
        for (size_t k_0__ = 0; k_0__ < ini_Rlive_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ini_Rlive" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_obs_k_0_max__ = nobs_types;
        for (size_t k_0__ = 0; k_0__ < sigma_obs_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_obs" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "r0";
        param_names__.push_back(param_name_stream__.str());
        size_t beta_multiplier_k_0_max__ = ninter;
        for (size_t k_0__ = 0; k_0__ < beta_multiplier_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_multiplier" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t t_inter_k_0_max__ = ninter;
        for (size_t k_0__ = 0; k_0__ < t_inter_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "t_inter" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t x_j_2_max__ = nt;
            size_t x_j_1_max__ = ncompartments;
            for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "x" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t sim_data_j_2_max__ = nt;
            size_t sim_data_j_1_max__ = nobs_types;
            for (size_t j_2__ = 0; j_2__ < sim_data_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < sim_data_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "sim_data" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t beta_k_0_max__ = nt;
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t new_admits_j_1_max__ = nt;
            for (size_t j_1__ = 0; j_1__ < new_admits_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "new_admits" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t new_cases_j_1_max__ = nt;
            for (size_t j_1__ = 0; j_1__ < new_cases_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "new_cases" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t newE_temp_k_0_max__ = (nt - 1);
            for (size_t k_0__ = 0; k_0__ < newE_temp_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "newE_temp" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t total_cases_increase_k_0_max__ = nt;
            for (size_t k_0__ = 0; k_0__ < total_cases_increase_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "total_cases_increase" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t Rt_k_0_max__ = nt;
        for (size_t k_0__ = 0; k_0__ < Rt_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Rt" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Rt_unvac_k_0_max__ = nt;
        for (size_t k_0__ = 0; k_0__ < Rt_unvac_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Rt_unvac" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "frac_vac";
        param_names__.push_back(param_name_stream__.str());
        size_t total_cases_k_0_max__ = nt;
        for (size_t k_0__ = 0; k_0__ < total_cases_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "total_cases" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "ini_cases";
        param_names__.push_back(param_name_stream__.str());
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "duration_latent";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "duration_rec_mild";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "duration_pre_hosp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "duration_hosp_mod";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "duration_hosp_icu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "frac_hosp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "frac_icu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "frac_mort";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "frac_tested";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "ini_E";
        param_names__.push_back(param_name_stream__.str());
        size_t ini_Imild_k_0_max__ = (1 - from_beginning);
        for (size_t k_0__ = 0; k_0__ < ini_Imild_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ini_Imild" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t ini_Ipreh_k_0_max__ = (1 - from_beginning);
        for (size_t k_0__ = 0; k_0__ < ini_Ipreh_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ini_Ipreh" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t ini_Rlive_k_0_max__ = (1 - from_beginning);
        for (size_t k_0__ = 0; k_0__ < ini_Rlive_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ini_Rlive" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_obs_k_0_max__ = nobs_types;
        for (size_t k_0__ = 0; k_0__ < sigma_obs_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_obs" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "r0";
        param_names__.push_back(param_name_stream__.str());
        size_t beta_multiplier_k_0_max__ = ninter;
        for (size_t k_0__ = 0; k_0__ < beta_multiplier_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_multiplier" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t t_inter_k_0_max__ = ninter;
        for (size_t k_0__ = 0; k_0__ < t_inter_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "t_inter" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t x_j_2_max__ = nt;
            size_t x_j_1_max__ = ncompartments;
            for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "x" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t sim_data_j_2_max__ = nt;
            size_t sim_data_j_1_max__ = nobs_types;
            for (size_t j_2__ = 0; j_2__ < sim_data_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < sim_data_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "sim_data" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t beta_k_0_max__ = nt;
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t new_admits_j_1_max__ = nt;
            for (size_t j_1__ = 0; j_1__ < new_admits_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "new_admits" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t new_cases_j_1_max__ = nt;
            for (size_t j_1__ = 0; j_1__ < new_cases_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "new_cases" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t newE_temp_k_0_max__ = (nt - 1);
            for (size_t k_0__ = 0; k_0__ < newE_temp_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "newE_temp" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t total_cases_increase_k_0_max__ = nt;
            for (size_t k_0__ = 0; k_0__ < total_cases_increase_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "total_cases_increase" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t Rt_k_0_max__ = nt;
        for (size_t k_0__ = 0; k_0__ < Rt_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Rt" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Rt_unvac_k_0_max__ = nt;
        for (size_t k_0__ = 0; k_0__ < Rt_unvac_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Rt_unvac" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "frac_vac";
        param_names__.push_back(param_name_stream__.str());
        size_t total_cases_k_0_max__ = nt;
        for (size_t k_0__ = 0; k_0__ < total_cases_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "total_cases" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "ini_cases";
        param_names__.push_back(param_name_stream__.str());
    }
}; // model
}  // namespace
typedef model_LEMMA_namespace::model_LEMMA stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
