// Generated by rstantools.  Do not edit by hand.

/*
    LEMMA is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    LEMMA is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with LEMMA.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_LEMMA_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_LEMMA");
    reader.add_event(360, 358, "end", "model_LEMMA");
    return reader;
}
#include <stan_meta_header.hpp>
class model_LEMMA
  : public stan::model::model_base_crtp<model_LEMMA> {
private:
        int nobs_types;
        std::vector<int> nobs;
        int nobs_max;
        std::vector<std::vector<int> > tobs;
        matrix_d obs_data;
        int nt;
        double npop;
        double mu_duration_latent;
        double sigma_duration_latent;
        double mu_duration_rec_mild;
        double sigma_duration_rec_mild;
        double mu_duration_pre_hosp;
        double sigma_duration_pre_hosp;
        double mu_duration_hosp_mod;
        double sigma_duration_hosp_mod;
        double mu_frac_tested;
        double sigma_frac_tested;
        double mu_test_delay;
        double sigma_test_delay;
        double mu_beta0;
        double sigma_beta0;
        double mu_frac_hosp;
        double sigma_frac_hosp;
        double mu_trans_multiplier;
        double sigma_trans_multiplier;
        double mu_duration_latent_multiplier;
        double sigma_duration_latent_multiplier;
        double mu_frac_hosp_multiplier;
        double sigma_frac_hosp_multiplier;
        double mu_duration_hosp_mod_multiplier;
        double sigma_duration_hosp_mod_multiplier;
        double mu_duration_protection_infection;
        double sigma_duration_protection_infection;
        double lambda_initial_infected1;
        double initial_infected2_fraction;
        std::vector<double> sigma_obs_est_inv;
        double VE_infection1;
        double VE_infection2;
        double init_hosp1;
        double frac_incidental1;
        double frac_incidental2;
        int variant2_introduction;
        int ninter;
        std::vector<double> t_inter;
        std::vector<double> len_inter;
        std::vector<double> mu_beta_inter;
        std::vector<double> sigma_beta_inter;
        int S;
        int E1;
        int E2;
        int Imild1;
        int Imild2;
        int Ipreh1;
        int Ipreh2;
        int Hmod1;
        int Hmod2;
        int P1;
        int P12;
        int Rlive1;
        int Rlive12;
        int ncompartments;
        int obs_hosp_census;
        int obs_cases1;
        int obs_cases2;
public:
    model_LEMMA(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_LEMMA(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_LEMMA_namespace::model_LEMMA";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "nobs_types", "int", context__.to_vec());
            nobs_types = int(0);
            vals_i__ = context__.vals_i("nobs_types");
            pos__ = 0;
            nobs_types = vals_i__[pos__++];
            check_greater_or_equal(function__, "nobs_types", nobs_types, 0);
            current_statement_begin__ = 10;
            validate_non_negative_index("nobs", "nobs_types", nobs_types);
            context__.validate_dims("data initialization", "nobs", "int", context__.to_vec(nobs_types));
            nobs = std::vector<int>(nobs_types, int(0));
            vals_i__ = context__.vals_i("nobs");
            pos__ = 0;
            size_t nobs_k_0_max__ = nobs_types;
            for (size_t k_0__ = 0; k_0__ < nobs_k_0_max__; ++k_0__) {
                nobs[k_0__] = vals_i__[pos__++];
            }
            size_t nobs_i_0_max__ = nobs_types;
            for (size_t i_0__ = 0; i_0__ < nobs_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "nobs[i_0__]", nobs[i_0__], 0);
            }
            current_statement_begin__ = 11;
            context__.validate_dims("data initialization", "nobs_max", "int", context__.to_vec());
            nobs_max = int(0);
            vals_i__ = context__.vals_i("nobs_max");
            pos__ = 0;
            nobs_max = vals_i__[pos__++];
            check_greater_or_equal(function__, "nobs_max", nobs_max, 0);
            current_statement_begin__ = 12;
            validate_non_negative_index("tobs", "nobs_types", nobs_types);
            validate_non_negative_index("tobs", "nobs_max", nobs_max);
            context__.validate_dims("data initialization", "tobs", "int", context__.to_vec(nobs_types,nobs_max));
            tobs = std::vector<std::vector<int> >(nobs_types, std::vector<int>(nobs_max, int(0)));
            vals_i__ = context__.vals_i("tobs");
            pos__ = 0;
            size_t tobs_k_0_max__ = nobs_types;
            size_t tobs_k_1_max__ = nobs_max;
            for (size_t k_1__ = 0; k_1__ < tobs_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < tobs_k_0_max__; ++k_0__) {
                    tobs[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t tobs_i_0_max__ = nobs_types;
            size_t tobs_i_1_max__ = nobs_max;
            for (size_t i_0__ = 0; i_0__ < tobs_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < tobs_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "tobs[i_0__][i_1__]", tobs[i_0__][i_1__], -(1));
                }
            }
            current_statement_begin__ = 13;
            validate_non_negative_index("obs_data", "nobs_types", nobs_types);
            validate_non_negative_index("obs_data", "nobs_max", nobs_max);
            context__.validate_dims("data initialization", "obs_data", "matrix_d", context__.to_vec(nobs_types,nobs_max));
            obs_data = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(nobs_types, nobs_max);
            vals_r__ = context__.vals_r("obs_data");
            pos__ = 0;
            size_t obs_data_j_2_max__ = nobs_max;
            size_t obs_data_j_1_max__ = nobs_types;
            for (size_t j_2__ = 0; j_2__ < obs_data_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < obs_data_j_1_max__; ++j_1__) {
                    obs_data(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            check_greater_or_equal(function__, "obs_data", obs_data, -(1.0));
            current_statement_begin__ = 14;
            context__.validate_dims("data initialization", "nt", "int", context__.to_vec());
            nt = int(0);
            vals_i__ = context__.vals_i("nt");
            pos__ = 0;
            nt = vals_i__[pos__++];
            check_greater_or_equal(function__, "nt", nt, 0);
            current_statement_begin__ = 15;
            context__.validate_dims("data initialization", "npop", "double", context__.to_vec());
            npop = double(0);
            vals_r__ = context__.vals_r("npop");
            pos__ = 0;
            npop = vals_r__[pos__++];
            check_greater_or_equal(function__, "npop", npop, 0.0);
            current_statement_begin__ = 19;
            context__.validate_dims("data initialization", "mu_duration_latent", "double", context__.to_vec());
            mu_duration_latent = double(0);
            vals_r__ = context__.vals_r("mu_duration_latent");
            pos__ = 0;
            mu_duration_latent = vals_r__[pos__++];
            check_greater_or_equal(function__, "mu_duration_latent", mu_duration_latent, 1.0);
            current_statement_begin__ = 20;
            context__.validate_dims("data initialization", "sigma_duration_latent", "double", context__.to_vec());
            sigma_duration_latent = double(0);
            vals_r__ = context__.vals_r("sigma_duration_latent");
            pos__ = 0;
            sigma_duration_latent = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_duration_latent", sigma_duration_latent, 0.0);
            current_statement_begin__ = 21;
            context__.validate_dims("data initialization", "mu_duration_rec_mild", "double", context__.to_vec());
            mu_duration_rec_mild = double(0);
            vals_r__ = context__.vals_r("mu_duration_rec_mild");
            pos__ = 0;
            mu_duration_rec_mild = vals_r__[pos__++];
            check_greater_or_equal(function__, "mu_duration_rec_mild", mu_duration_rec_mild, 1.0);
            current_statement_begin__ = 22;
            context__.validate_dims("data initialization", "sigma_duration_rec_mild", "double", context__.to_vec());
            sigma_duration_rec_mild = double(0);
            vals_r__ = context__.vals_r("sigma_duration_rec_mild");
            pos__ = 0;
            sigma_duration_rec_mild = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_duration_rec_mild", sigma_duration_rec_mild, 0.0);
            current_statement_begin__ = 23;
            context__.validate_dims("data initialization", "mu_duration_pre_hosp", "double", context__.to_vec());
            mu_duration_pre_hosp = double(0);
            vals_r__ = context__.vals_r("mu_duration_pre_hosp");
            pos__ = 0;
            mu_duration_pre_hosp = vals_r__[pos__++];
            check_greater_or_equal(function__, "mu_duration_pre_hosp", mu_duration_pre_hosp, 1.0);
            current_statement_begin__ = 24;
            context__.validate_dims("data initialization", "sigma_duration_pre_hosp", "double", context__.to_vec());
            sigma_duration_pre_hosp = double(0);
            vals_r__ = context__.vals_r("sigma_duration_pre_hosp");
            pos__ = 0;
            sigma_duration_pre_hosp = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_duration_pre_hosp", sigma_duration_pre_hosp, 0.0);
            current_statement_begin__ = 25;
            context__.validate_dims("data initialization", "mu_duration_hosp_mod", "double", context__.to_vec());
            mu_duration_hosp_mod = double(0);
            vals_r__ = context__.vals_r("mu_duration_hosp_mod");
            pos__ = 0;
            mu_duration_hosp_mod = vals_r__[pos__++];
            check_greater_or_equal(function__, "mu_duration_hosp_mod", mu_duration_hosp_mod, 1.0);
            current_statement_begin__ = 26;
            context__.validate_dims("data initialization", "sigma_duration_hosp_mod", "double", context__.to_vec());
            sigma_duration_hosp_mod = double(0);
            vals_r__ = context__.vals_r("sigma_duration_hosp_mod");
            pos__ = 0;
            sigma_duration_hosp_mod = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_duration_hosp_mod", sigma_duration_hosp_mod, 0.0);
            current_statement_begin__ = 28;
            context__.validate_dims("data initialization", "mu_frac_tested", "double", context__.to_vec());
            mu_frac_tested = double(0);
            vals_r__ = context__.vals_r("mu_frac_tested");
            pos__ = 0;
            mu_frac_tested = vals_r__[pos__++];
            check_greater_or_equal(function__, "mu_frac_tested", mu_frac_tested, 0.0);
            current_statement_begin__ = 29;
            context__.validate_dims("data initialization", "sigma_frac_tested", "double", context__.to_vec());
            sigma_frac_tested = double(0);
            vals_r__ = context__.vals_r("sigma_frac_tested");
            pos__ = 0;
            sigma_frac_tested = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_frac_tested", sigma_frac_tested, 0.0);
            current_statement_begin__ = 30;
            context__.validate_dims("data initialization", "mu_test_delay", "double", context__.to_vec());
            mu_test_delay = double(0);
            vals_r__ = context__.vals_r("mu_test_delay");
            pos__ = 0;
            mu_test_delay = vals_r__[pos__++];
            check_greater_or_equal(function__, "mu_test_delay", mu_test_delay, 0.0);
            current_statement_begin__ = 31;
            context__.validate_dims("data initialization", "sigma_test_delay", "double", context__.to_vec());
            sigma_test_delay = double(0);
            vals_r__ = context__.vals_r("sigma_test_delay");
            pos__ = 0;
            sigma_test_delay = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_test_delay", sigma_test_delay, 0.0);
            current_statement_begin__ = 32;
            context__.validate_dims("data initialization", "mu_beta0", "double", context__.to_vec());
            mu_beta0 = double(0);
            vals_r__ = context__.vals_r("mu_beta0");
            pos__ = 0;
            mu_beta0 = vals_r__[pos__++];
            check_greater_or_equal(function__, "mu_beta0", mu_beta0, 0.0);
            current_statement_begin__ = 33;
            context__.validate_dims("data initialization", "sigma_beta0", "double", context__.to_vec());
            sigma_beta0 = double(0);
            vals_r__ = context__.vals_r("sigma_beta0");
            pos__ = 0;
            sigma_beta0 = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_beta0", sigma_beta0, 0.0);
            current_statement_begin__ = 34;
            context__.validate_dims("data initialization", "mu_frac_hosp", "double", context__.to_vec());
            mu_frac_hosp = double(0);
            vals_r__ = context__.vals_r("mu_frac_hosp");
            pos__ = 0;
            mu_frac_hosp = vals_r__[pos__++];
            check_greater_or_equal(function__, "mu_frac_hosp", mu_frac_hosp, 0.0);
            current_statement_begin__ = 35;
            context__.validate_dims("data initialization", "sigma_frac_hosp", "double", context__.to_vec());
            sigma_frac_hosp = double(0);
            vals_r__ = context__.vals_r("sigma_frac_hosp");
            pos__ = 0;
            sigma_frac_hosp = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_frac_hosp", sigma_frac_hosp, 0.0);
            current_statement_begin__ = 36;
            context__.validate_dims("data initialization", "mu_trans_multiplier", "double", context__.to_vec());
            mu_trans_multiplier = double(0);
            vals_r__ = context__.vals_r("mu_trans_multiplier");
            pos__ = 0;
            mu_trans_multiplier = vals_r__[pos__++];
            check_greater_or_equal(function__, "mu_trans_multiplier", mu_trans_multiplier, 0.0);
            current_statement_begin__ = 37;
            context__.validate_dims("data initialization", "sigma_trans_multiplier", "double", context__.to_vec());
            sigma_trans_multiplier = double(0);
            vals_r__ = context__.vals_r("sigma_trans_multiplier");
            pos__ = 0;
            sigma_trans_multiplier = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_trans_multiplier", sigma_trans_multiplier, 0.0);
            current_statement_begin__ = 38;
            context__.validate_dims("data initialization", "mu_duration_latent_multiplier", "double", context__.to_vec());
            mu_duration_latent_multiplier = double(0);
            vals_r__ = context__.vals_r("mu_duration_latent_multiplier");
            pos__ = 0;
            mu_duration_latent_multiplier = vals_r__[pos__++];
            check_greater_or_equal(function__, "mu_duration_latent_multiplier", mu_duration_latent_multiplier, 0.0);
            current_statement_begin__ = 39;
            context__.validate_dims("data initialization", "sigma_duration_latent_multiplier", "double", context__.to_vec());
            sigma_duration_latent_multiplier = double(0);
            vals_r__ = context__.vals_r("sigma_duration_latent_multiplier");
            pos__ = 0;
            sigma_duration_latent_multiplier = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_duration_latent_multiplier", sigma_duration_latent_multiplier, 0.0);
            current_statement_begin__ = 40;
            context__.validate_dims("data initialization", "mu_frac_hosp_multiplier", "double", context__.to_vec());
            mu_frac_hosp_multiplier = double(0);
            vals_r__ = context__.vals_r("mu_frac_hosp_multiplier");
            pos__ = 0;
            mu_frac_hosp_multiplier = vals_r__[pos__++];
            check_greater_or_equal(function__, "mu_frac_hosp_multiplier", mu_frac_hosp_multiplier, 0.0);
            current_statement_begin__ = 41;
            context__.validate_dims("data initialization", "sigma_frac_hosp_multiplier", "double", context__.to_vec());
            sigma_frac_hosp_multiplier = double(0);
            vals_r__ = context__.vals_r("sigma_frac_hosp_multiplier");
            pos__ = 0;
            sigma_frac_hosp_multiplier = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_frac_hosp_multiplier", sigma_frac_hosp_multiplier, 0.0);
            current_statement_begin__ = 42;
            context__.validate_dims("data initialization", "mu_duration_hosp_mod_multiplier", "double", context__.to_vec());
            mu_duration_hosp_mod_multiplier = double(0);
            vals_r__ = context__.vals_r("mu_duration_hosp_mod_multiplier");
            pos__ = 0;
            mu_duration_hosp_mod_multiplier = vals_r__[pos__++];
            check_greater_or_equal(function__, "mu_duration_hosp_mod_multiplier", mu_duration_hosp_mod_multiplier, 0.0);
            current_statement_begin__ = 43;
            context__.validate_dims("data initialization", "sigma_duration_hosp_mod_multiplier", "double", context__.to_vec());
            sigma_duration_hosp_mod_multiplier = double(0);
            vals_r__ = context__.vals_r("sigma_duration_hosp_mod_multiplier");
            pos__ = 0;
            sigma_duration_hosp_mod_multiplier = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_duration_hosp_mod_multiplier", sigma_duration_hosp_mod_multiplier, 0.0);
            current_statement_begin__ = 45;
            context__.validate_dims("data initialization", "mu_duration_protection_infection", "double", context__.to_vec());
            mu_duration_protection_infection = double(0);
            vals_r__ = context__.vals_r("mu_duration_protection_infection");
            pos__ = 0;
            mu_duration_protection_infection = vals_r__[pos__++];
            check_greater_or_equal(function__, "mu_duration_protection_infection", mu_duration_protection_infection, 0.0);
            current_statement_begin__ = 46;
            context__.validate_dims("data initialization", "sigma_duration_protection_infection", "double", context__.to_vec());
            sigma_duration_protection_infection = double(0);
            vals_r__ = context__.vals_r("sigma_duration_protection_infection");
            pos__ = 0;
            sigma_duration_protection_infection = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_duration_protection_infection", sigma_duration_protection_infection, 0.0);
            current_statement_begin__ = 48;
            context__.validate_dims("data initialization", "lambda_initial_infected1", "double", context__.to_vec());
            lambda_initial_infected1 = double(0);
            vals_r__ = context__.vals_r("lambda_initial_infected1");
            pos__ = 0;
            lambda_initial_infected1 = vals_r__[pos__++];
            check_greater_or_equal(function__, "lambda_initial_infected1", lambda_initial_infected1, 0.0);
            current_statement_begin__ = 49;
            context__.validate_dims("data initialization", "initial_infected2_fraction", "double", context__.to_vec());
            initial_infected2_fraction = double(0);
            vals_r__ = context__.vals_r("initial_infected2_fraction");
            pos__ = 0;
            initial_infected2_fraction = vals_r__[pos__++];
            check_greater_or_equal(function__, "initial_infected2_fraction", initial_infected2_fraction, 0.0);
            current_statement_begin__ = 51;
            validate_non_negative_index("sigma_obs_est_inv", "nobs_types", nobs_types);
            context__.validate_dims("data initialization", "sigma_obs_est_inv", "double", context__.to_vec(nobs_types));
            sigma_obs_est_inv = std::vector<double>(nobs_types, double(0));
            vals_r__ = context__.vals_r("sigma_obs_est_inv");
            pos__ = 0;
            size_t sigma_obs_est_inv_k_0_max__ = nobs_types;
            for (size_t k_0__ = 0; k_0__ < sigma_obs_est_inv_k_0_max__; ++k_0__) {
                sigma_obs_est_inv[k_0__] = vals_r__[pos__++];
            }
            size_t sigma_obs_est_inv_i_0_max__ = nobs_types;
            for (size_t i_0__ = 0; i_0__ < sigma_obs_est_inv_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "sigma_obs_est_inv[i_0__]", sigma_obs_est_inv[i_0__], 0.0);
            }
            current_statement_begin__ = 53;
            context__.validate_dims("data initialization", "VE_infection1", "double", context__.to_vec());
            VE_infection1 = double(0);
            vals_r__ = context__.vals_r("VE_infection1");
            pos__ = 0;
            VE_infection1 = vals_r__[pos__++];
            check_greater_or_equal(function__, "VE_infection1", VE_infection1, 0.0);
            current_statement_begin__ = 54;
            context__.validate_dims("data initialization", "VE_infection2", "double", context__.to_vec());
            VE_infection2 = double(0);
            vals_r__ = context__.vals_r("VE_infection2");
            pos__ = 0;
            VE_infection2 = vals_r__[pos__++];
            check_greater_or_equal(function__, "VE_infection2", VE_infection2, 0.0);
            current_statement_begin__ = 55;
            context__.validate_dims("data initialization", "init_hosp1", "double", context__.to_vec());
            init_hosp1 = double(0);
            vals_r__ = context__.vals_r("init_hosp1");
            pos__ = 0;
            init_hosp1 = vals_r__[pos__++];
            check_greater_or_equal(function__, "init_hosp1", init_hosp1, 0.0);
            current_statement_begin__ = 61;
            context__.validate_dims("data initialization", "frac_incidental1", "double", context__.to_vec());
            frac_incidental1 = double(0);
            vals_r__ = context__.vals_r("frac_incidental1");
            pos__ = 0;
            frac_incidental1 = vals_r__[pos__++];
            check_greater_or_equal(function__, "frac_incidental1", frac_incidental1, 0.0);
            current_statement_begin__ = 62;
            context__.validate_dims("data initialization", "frac_incidental2", "double", context__.to_vec());
            frac_incidental2 = double(0);
            vals_r__ = context__.vals_r("frac_incidental2");
            pos__ = 0;
            frac_incidental2 = vals_r__[pos__++];
            check_greater_or_equal(function__, "frac_incidental2", frac_incidental2, 0.0);
            current_statement_begin__ = 65;
            context__.validate_dims("data initialization", "variant2_introduction", "int", context__.to_vec());
            variant2_introduction = int(0);
            vals_i__ = context__.vals_i("variant2_introduction");
            pos__ = 0;
            variant2_introduction = vals_i__[pos__++];
            check_greater_or_equal(function__, "variant2_introduction", variant2_introduction, 0);
            current_statement_begin__ = 67;
            context__.validate_dims("data initialization", "ninter", "int", context__.to_vec());
            ninter = int(0);
            vals_i__ = context__.vals_i("ninter");
            pos__ = 0;
            ninter = vals_i__[pos__++];
            check_greater_or_equal(function__, "ninter", ninter, 0);
            current_statement_begin__ = 68;
            validate_non_negative_index("t_inter", "ninter", ninter);
            context__.validate_dims("data initialization", "t_inter", "double", context__.to_vec(ninter));
            t_inter = std::vector<double>(ninter, double(0));
            vals_r__ = context__.vals_r("t_inter");
            pos__ = 0;
            size_t t_inter_k_0_max__ = ninter;
            for (size_t k_0__ = 0; k_0__ < t_inter_k_0_max__; ++k_0__) {
                t_inter[k_0__] = vals_r__[pos__++];
            }
            size_t t_inter_i_0_max__ = ninter;
            for (size_t i_0__ = 0; i_0__ < t_inter_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "t_inter[i_0__]", t_inter[i_0__], 1.0);
            }
            current_statement_begin__ = 69;
            validate_non_negative_index("len_inter", "ninter", ninter);
            context__.validate_dims("data initialization", "len_inter", "double", context__.to_vec(ninter));
            len_inter = std::vector<double>(ninter, double(0));
            vals_r__ = context__.vals_r("len_inter");
            pos__ = 0;
            size_t len_inter_k_0_max__ = ninter;
            for (size_t k_0__ = 0; k_0__ < len_inter_k_0_max__; ++k_0__) {
                len_inter[k_0__] = vals_r__[pos__++];
            }
            size_t len_inter_i_0_max__ = ninter;
            for (size_t i_0__ = 0; i_0__ < len_inter_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "len_inter[i_0__]", len_inter[i_0__], 1.0);
            }
            current_statement_begin__ = 70;
            validate_non_negative_index("mu_beta_inter", "ninter", ninter);
            context__.validate_dims("data initialization", "mu_beta_inter", "double", context__.to_vec(ninter));
            mu_beta_inter = std::vector<double>(ninter, double(0));
            vals_r__ = context__.vals_r("mu_beta_inter");
            pos__ = 0;
            size_t mu_beta_inter_k_0_max__ = ninter;
            for (size_t k_0__ = 0; k_0__ < mu_beta_inter_k_0_max__; ++k_0__) {
                mu_beta_inter[k_0__] = vals_r__[pos__++];
            }
            size_t mu_beta_inter_i_0_max__ = ninter;
            for (size_t i_0__ = 0; i_0__ < mu_beta_inter_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "mu_beta_inter[i_0__]", mu_beta_inter[i_0__], 0.0);
            }
            current_statement_begin__ = 71;
            validate_non_negative_index("sigma_beta_inter", "ninter", ninter);
            context__.validate_dims("data initialization", "sigma_beta_inter", "double", context__.to_vec(ninter));
            sigma_beta_inter = std::vector<double>(ninter, double(0));
            vals_r__ = context__.vals_r("sigma_beta_inter");
            pos__ = 0;
            size_t sigma_beta_inter_k_0_max__ = ninter;
            for (size_t k_0__ = 0; k_0__ < sigma_beta_inter_k_0_max__; ++k_0__) {
                sigma_beta_inter[k_0__] = vals_r__[pos__++];
            }
            size_t sigma_beta_inter_i_0_max__ = ninter;
            for (size_t i_0__ = 0; i_0__ < sigma_beta_inter_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "sigma_beta_inter[i_0__]", sigma_beta_inter[i_0__], 0.0);
            }
            // initialize transformed data variables
            current_statement_begin__ = 78;
            S = int(0);
            stan::math::fill(S, std::numeric_limits<int>::min());
            stan::math::assign(S,1);
            current_statement_begin__ = 79;
            E1 = int(0);
            stan::math::fill(E1, std::numeric_limits<int>::min());
            stan::math::assign(E1,2);
            current_statement_begin__ = 80;
            E2 = int(0);
            stan::math::fill(E2, std::numeric_limits<int>::min());
            stan::math::assign(E2,3);
            current_statement_begin__ = 81;
            Imild1 = int(0);
            stan::math::fill(Imild1, std::numeric_limits<int>::min());
            stan::math::assign(Imild1,4);
            current_statement_begin__ = 82;
            Imild2 = int(0);
            stan::math::fill(Imild2, std::numeric_limits<int>::min());
            stan::math::assign(Imild2,5);
            current_statement_begin__ = 83;
            Ipreh1 = int(0);
            stan::math::fill(Ipreh1, std::numeric_limits<int>::min());
            stan::math::assign(Ipreh1,6);
            current_statement_begin__ = 84;
            Ipreh2 = int(0);
            stan::math::fill(Ipreh2, std::numeric_limits<int>::min());
            stan::math::assign(Ipreh2,7);
            current_statement_begin__ = 85;
            Hmod1 = int(0);
            stan::math::fill(Hmod1, std::numeric_limits<int>::min());
            stan::math::assign(Hmod1,8);
            current_statement_begin__ = 86;
            Hmod2 = int(0);
            stan::math::fill(Hmod2, std::numeric_limits<int>::min());
            stan::math::assign(Hmod2,9);
            current_statement_begin__ = 87;
            P1 = int(0);
            stan::math::fill(P1, std::numeric_limits<int>::min());
            stan::math::assign(P1,10);
            current_statement_begin__ = 88;
            P12 = int(0);
            stan::math::fill(P12, std::numeric_limits<int>::min());
            stan::math::assign(P12,11);
            current_statement_begin__ = 89;
            Rlive1 = int(0);
            stan::math::fill(Rlive1, std::numeric_limits<int>::min());
            stan::math::assign(Rlive1,12);
            current_statement_begin__ = 90;
            Rlive12 = int(0);
            stan::math::fill(Rlive12, std::numeric_limits<int>::min());
            stan::math::assign(Rlive12,13);
            current_statement_begin__ = 92;
            ncompartments = int(0);
            stan::math::fill(ncompartments, std::numeric_limits<int>::min());
            stan::math::assign(ncompartments,13);
            current_statement_begin__ = 94;
            obs_hosp_census = int(0);
            stan::math::fill(obs_hosp_census, std::numeric_limits<int>::min());
            stan::math::assign(obs_hosp_census,1);
            current_statement_begin__ = 95;
            obs_cases1 = int(0);
            stan::math::fill(obs_cases1, std::numeric_limits<int>::min());
            stan::math::assign(obs_cases1,2);
            current_statement_begin__ = 96;
            obs_cases2 = int(0);
            stan::math::fill(obs_cases2, std::numeric_limits<int>::min());
            stan::math::assign(obs_cases2,3);
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 99;
            num_params_r__ += 1;
            current_statement_begin__ = 100;
            num_params_r__ += 1;
            current_statement_begin__ = 101;
            num_params_r__ += 1;
            current_statement_begin__ = 102;
            num_params_r__ += 1;
            current_statement_begin__ = 103;
            num_params_r__ += 1;
            current_statement_begin__ = 104;
            num_params_r__ += 1;
            current_statement_begin__ = 106;
            num_params_r__ += 1;
            current_statement_begin__ = 107;
            num_params_r__ += 1;
            current_statement_begin__ = 108;
            num_params_r__ += 1;
            current_statement_begin__ = 110;
            num_params_r__ += 1;
            current_statement_begin__ = 112;
            num_params_r__ += 1;
            current_statement_begin__ = 113;
            validate_non_negative_index("sigma_obs", "nobs_types", nobs_types);
            num_params_r__ += (1 * nobs_types);
            current_statement_begin__ = 115;
            num_params_r__ += 1;
            current_statement_begin__ = 117;
            num_params_r__ += 1;
            current_statement_begin__ = 118;
            validate_non_negative_index("beta_multiplier", "ninter", ninter);
            num_params_r__ += (1 * ninter);
            current_statement_begin__ = 119;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_LEMMA() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 99;
        if (!(context__.contains_r("duration_latent1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable duration_latent1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("duration_latent1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "duration_latent1", "double", context__.to_vec());
        double duration_latent1(0);
        duration_latent1 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(1.0, duration_latent1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable duration_latent1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 100;
        if (!(context__.contains_r("duration_rec_mild")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable duration_rec_mild missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("duration_rec_mild");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "duration_rec_mild", "double", context__.to_vec());
        double duration_rec_mild(0);
        duration_rec_mild = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(1.0, duration_rec_mild);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable duration_rec_mild: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 101;
        if (!(context__.contains_r("duration_pre_hosp")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable duration_pre_hosp missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("duration_pre_hosp");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "duration_pre_hosp", "double", context__.to_vec());
        double duration_pre_hosp(0);
        duration_pre_hosp = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(1.0, duration_pre_hosp);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable duration_pre_hosp: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 102;
        if (!(context__.contains_r("duration_hosp_mod1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable duration_hosp_mod1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("duration_hosp_mod1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "duration_hosp_mod1", "double", context__.to_vec());
        double duration_hosp_mod1(0);
        duration_hosp_mod1 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(1.0, duration_hosp_mod1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable duration_hosp_mod1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 103;
        if (!(context__.contains_r("duration_protection_infection")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable duration_protection_infection missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("duration_protection_infection");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "duration_protection_infection", "double", context__.to_vec());
        double duration_protection_infection(0);
        duration_protection_infection = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(1.0, duration_protection_infection);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable duration_protection_infection: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 104;
        if (!(context__.contains_r("frac_hosp1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable frac_hosp1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("frac_hosp1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "frac_hosp1", "double", context__.to_vec());
        double frac_hosp1(0);
        frac_hosp1 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0.0, frac_hosp1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable frac_hosp1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 106;
        if (!(context__.contains_r("duration_latent_multiplier")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable duration_latent_multiplier missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("duration_latent_multiplier");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "duration_latent_multiplier", "double", context__.to_vec());
        double duration_latent_multiplier(0);
        duration_latent_multiplier = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0.0, duration_latent_multiplier);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable duration_latent_multiplier: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 107;
        if (!(context__.contains_r("duration_hosp_mod_multiplier")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable duration_hosp_mod_multiplier missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("duration_hosp_mod_multiplier");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "duration_hosp_mod_multiplier", "double", context__.to_vec());
        double duration_hosp_mod_multiplier(0);
        duration_hosp_mod_multiplier = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0.0, duration_hosp_mod_multiplier);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable duration_hosp_mod_multiplier: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 108;
        if (!(context__.contains_r("frac_hosp_multiplier")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable frac_hosp_multiplier missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("frac_hosp_multiplier");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "frac_hosp_multiplier", "double", context__.to_vec());
        double frac_hosp_multiplier(0);
        frac_hosp_multiplier = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0.0, frac_hosp_multiplier);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable frac_hosp_multiplier: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 110;
        if (!(context__.contains_r("frac_tested")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable frac_tested missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("frac_tested");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "frac_tested", "double", context__.to_vec());
        double frac_tested(0);
        frac_tested = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0.0, 1.0, frac_tested);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable frac_tested: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 112;
        if (!(context__.contains_r("initial_infected1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable initial_infected1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("initial_infected1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "initial_infected1", "double", context__.to_vec());
        double initial_infected1(0);
        initial_infected1 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0.0, initial_infected1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable initial_infected1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 113;
        if (!(context__.contains_r("sigma_obs")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_obs missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_obs");
        pos__ = 0U;
        validate_non_negative_index("sigma_obs", "nobs_types", nobs_types);
        context__.validate_dims("parameter initialization", "sigma_obs", "double", context__.to_vec(nobs_types));
        std::vector<double> sigma_obs(nobs_types, double(0));
        size_t sigma_obs_k_0_max__ = nobs_types;
        for (size_t k_0__ = 0; k_0__ < sigma_obs_k_0_max__; ++k_0__) {
            sigma_obs[k_0__] = vals_r__[pos__++];
        }
        size_t sigma_obs_i_0_max__ = nobs_types;
        for (size_t i_0__ = 0; i_0__ < sigma_obs_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0.0, sigma_obs[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_obs: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 115;
        if (!(context__.contains_r("test_delay")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable test_delay missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("test_delay");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "test_delay", "double", context__.to_vec());
        double test_delay(0);
        test_delay = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(1.0, test_delay);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable test_delay: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 117;
        if (!(context__.contains_r("beta_0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_0");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "beta_0", "double", context__.to_vec());
        double beta_0(0);
        beta_0 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0.0, beta_0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 118;
        if (!(context__.contains_r("beta_multiplier")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_multiplier missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_multiplier");
        pos__ = 0U;
        validate_non_negative_index("beta_multiplier", "ninter", ninter);
        context__.validate_dims("parameter initialization", "beta_multiplier", "double", context__.to_vec(ninter));
        std::vector<double> beta_multiplier(ninter, double(0));
        size_t beta_multiplier_k_0_max__ = ninter;
        for (size_t k_0__ = 0; k_0__ < beta_multiplier_k_0_max__; ++k_0__) {
            beta_multiplier[k_0__] = vals_r__[pos__++];
        }
        size_t beta_multiplier_i_0_max__ = ninter;
        for (size_t i_0__ = 0; i_0__ < beta_multiplier_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0.0, beta_multiplier[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_multiplier: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 119;
        if (!(context__.contains_r("trans_multiplier")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable trans_multiplier missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("trans_multiplier");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "trans_multiplier", "double", context__.to_vec());
        double trans_multiplier(0);
        trans_multiplier = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0.0, trans_multiplier);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable trans_multiplier: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 99;
            local_scalar_t__ duration_latent1;
            (void) duration_latent1;  // dummy to suppress unused var warning
            if (jacobian__)
                duration_latent1 = in__.scalar_lb_constrain(1.0, lp__);
            else
                duration_latent1 = in__.scalar_lb_constrain(1.0);
            current_statement_begin__ = 100;
            local_scalar_t__ duration_rec_mild;
            (void) duration_rec_mild;  // dummy to suppress unused var warning
            if (jacobian__)
                duration_rec_mild = in__.scalar_lb_constrain(1.0, lp__);
            else
                duration_rec_mild = in__.scalar_lb_constrain(1.0);
            current_statement_begin__ = 101;
            local_scalar_t__ duration_pre_hosp;
            (void) duration_pre_hosp;  // dummy to suppress unused var warning
            if (jacobian__)
                duration_pre_hosp = in__.scalar_lb_constrain(1.0, lp__);
            else
                duration_pre_hosp = in__.scalar_lb_constrain(1.0);
            current_statement_begin__ = 102;
            local_scalar_t__ duration_hosp_mod1;
            (void) duration_hosp_mod1;  // dummy to suppress unused var warning
            if (jacobian__)
                duration_hosp_mod1 = in__.scalar_lb_constrain(1.0, lp__);
            else
                duration_hosp_mod1 = in__.scalar_lb_constrain(1.0);
            current_statement_begin__ = 103;
            local_scalar_t__ duration_protection_infection;
            (void) duration_protection_infection;  // dummy to suppress unused var warning
            if (jacobian__)
                duration_protection_infection = in__.scalar_lb_constrain(1.0, lp__);
            else
                duration_protection_infection = in__.scalar_lb_constrain(1.0);
            current_statement_begin__ = 104;
            local_scalar_t__ frac_hosp1;
            (void) frac_hosp1;  // dummy to suppress unused var warning
            if (jacobian__)
                frac_hosp1 = in__.scalar_lb_constrain(0.0, lp__);
            else
                frac_hosp1 = in__.scalar_lb_constrain(0.0);
            current_statement_begin__ = 106;
            local_scalar_t__ duration_latent_multiplier;
            (void) duration_latent_multiplier;  // dummy to suppress unused var warning
            if (jacobian__)
                duration_latent_multiplier = in__.scalar_lb_constrain(0.0, lp__);
            else
                duration_latent_multiplier = in__.scalar_lb_constrain(0.0);
            current_statement_begin__ = 107;
            local_scalar_t__ duration_hosp_mod_multiplier;
            (void) duration_hosp_mod_multiplier;  // dummy to suppress unused var warning
            if (jacobian__)
                duration_hosp_mod_multiplier = in__.scalar_lb_constrain(0.0, lp__);
            else
                duration_hosp_mod_multiplier = in__.scalar_lb_constrain(0.0);
            current_statement_begin__ = 108;
            local_scalar_t__ frac_hosp_multiplier;
            (void) frac_hosp_multiplier;  // dummy to suppress unused var warning
            if (jacobian__)
                frac_hosp_multiplier = in__.scalar_lb_constrain(0.0, lp__);
            else
                frac_hosp_multiplier = in__.scalar_lb_constrain(0.0);
            current_statement_begin__ = 110;
            local_scalar_t__ frac_tested;
            (void) frac_tested;  // dummy to suppress unused var warning
            if (jacobian__)
                frac_tested = in__.scalar_lub_constrain(0.0, 1.0, lp__);
            else
                frac_tested = in__.scalar_lub_constrain(0.0, 1.0);
            current_statement_begin__ = 112;
            local_scalar_t__ initial_infected1;
            (void) initial_infected1;  // dummy to suppress unused var warning
            if (jacobian__)
                initial_infected1 = in__.scalar_lb_constrain(0.0, lp__);
            else
                initial_infected1 = in__.scalar_lb_constrain(0.0);
            current_statement_begin__ = 113;
            std::vector<local_scalar_t__> sigma_obs;
            size_t sigma_obs_d_0_max__ = nobs_types;
            sigma_obs.reserve(sigma_obs_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < sigma_obs_d_0_max__; ++d_0__) {
                if (jacobian__)
                    sigma_obs.push_back(in__.scalar_lb_constrain(0.0, lp__));
                else
                    sigma_obs.push_back(in__.scalar_lb_constrain(0.0));
            }
            current_statement_begin__ = 115;
            local_scalar_t__ test_delay;
            (void) test_delay;  // dummy to suppress unused var warning
            if (jacobian__)
                test_delay = in__.scalar_lb_constrain(1.0, lp__);
            else
                test_delay = in__.scalar_lb_constrain(1.0);
            current_statement_begin__ = 117;
            local_scalar_t__ beta_0;
            (void) beta_0;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_0 = in__.scalar_lb_constrain(0.0, lp__);
            else
                beta_0 = in__.scalar_lb_constrain(0.0);
            current_statement_begin__ = 118;
            std::vector<local_scalar_t__> beta_multiplier;
            size_t beta_multiplier_d_0_max__ = ninter;
            beta_multiplier.reserve(beta_multiplier_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < beta_multiplier_d_0_max__; ++d_0__) {
                if (jacobian__)
                    beta_multiplier.push_back(in__.scalar_lb_constrain(0.0, lp__));
                else
                    beta_multiplier.push_back(in__.scalar_lb_constrain(0.0));
            }
            current_statement_begin__ = 119;
            local_scalar_t__ trans_multiplier;
            (void) trans_multiplier;  // dummy to suppress unused var warning
            if (jacobian__)
                trans_multiplier = in__.scalar_lb_constrain(0.0, lp__);
            else
                trans_multiplier = in__.scalar_lb_constrain(0.0);
            // transformed parameters
            current_statement_begin__ = 122;
            validate_non_negative_index("x", "ncompartments", ncompartments);
            validate_non_negative_index("x", "nt", nt);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> x(ncompartments, nt);
            stan::math::initialize(x, DUMMY_VAR__);
            stan::math::fill(x, DUMMY_VAR__);
            current_statement_begin__ = 123;
            validate_non_negative_index("sim_data", "nobs_types", nobs_types);
            validate_non_negative_index("sim_data", "nt", nt);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> sim_data(nobs_types, nt);
            stan::math::initialize(sim_data, DUMMY_VAR__);
            stan::math::fill(sim_data, DUMMY_VAR__);
            current_statement_begin__ = 124;
            validate_non_negative_index("new_cases1", "nt", nt);
            Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> new_cases1(nt);
            stan::math::initialize(new_cases1, DUMMY_VAR__);
            stan::math::fill(new_cases1, DUMMY_VAR__);
            current_statement_begin__ = 125;
            validate_non_negative_index("new_cases2", "nt", nt);
            Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> new_cases2(nt);
            stan::math::initialize(new_cases2, DUMMY_VAR__);
            stan::math::fill(new_cases2, DUMMY_VAR__);
            current_statement_begin__ = 126;
            validate_non_negative_index("soon_positive1", "nt", nt);
            Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> soon_positive1(nt);
            stan::math::initialize(soon_positive1, DUMMY_VAR__);
            stan::math::fill(soon_positive1, DUMMY_VAR__);
            current_statement_begin__ = 127;
            validate_non_negative_index("soon_positive2", "nt", nt);
            Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> soon_positive2(nt);
            stan::math::initialize(soon_positive2, DUMMY_VAR__);
            stan::math::fill(soon_positive2, DUMMY_VAR__);
            current_statement_begin__ = 128;
            validate_non_negative_index("beta", "nt", nt);
            std::vector<local_scalar_t__> beta(nt, local_scalar_t__(0));
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            current_statement_begin__ = 130;
            local_scalar_t__ duration_latent2;
            (void) duration_latent2;  // dummy to suppress unused var warning
            stan::math::initialize(duration_latent2, DUMMY_VAR__);
            stan::math::fill(duration_latent2, DUMMY_VAR__);
            current_statement_begin__ = 131;
            local_scalar_t__ duration_hosp_mod2;
            (void) duration_hosp_mod2;  // dummy to suppress unused var warning
            stan::math::initialize(duration_hosp_mod2, DUMMY_VAR__);
            stan::math::fill(duration_hosp_mod2, DUMMY_VAR__);
            current_statement_begin__ = 132;
            local_scalar_t__ frac_hosp2;
            (void) frac_hosp2;  // dummy to suppress unused var warning
            stan::math::initialize(frac_hosp2, DUMMY_VAR__);
            stan::math::fill(frac_hosp2, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 134;
            for (int it = 1; it <= nt; ++it) {
                current_statement_begin__ = 135;
                for (int itype = 1; itype <= nobs_types; ++itype) {
                    current_statement_begin__ = 136;
                    stan::model::assign(sim_data, 
                                stan::model::cons_list(stan::model::index_uni(itype), stan::model::cons_list(stan::model::index_uni(it), stan::model::nil_index_list())), 
                                0.0, 
                                "assigning variable sim_data");
                }
            }
            {
            current_statement_begin__ = 142;
            local_scalar_t__ newE1(DUMMY_VAR__);
            (void) newE1;  // dummy to suppress unused var warning
            stan::math::initialize(newE1, DUMMY_VAR__);
            stan::math::fill(newE1, DUMMY_VAR__);
            current_statement_begin__ = 143;
            local_scalar_t__ newE2(DUMMY_VAR__);
            (void) newE2;  // dummy to suppress unused var warning
            stan::math::initialize(newE2, DUMMY_VAR__);
            stan::math::fill(newE2, DUMMY_VAR__);
            current_statement_begin__ = 144;
            local_scalar_t__ newI1(DUMMY_VAR__);
            (void) newI1;  // dummy to suppress unused var warning
            stan::math::initialize(newI1, DUMMY_VAR__);
            stan::math::fill(newI1, DUMMY_VAR__);
            current_statement_begin__ = 145;
            local_scalar_t__ newI2(DUMMY_VAR__);
            (void) newI2;  // dummy to suppress unused var warning
            stan::math::initialize(newI2, DUMMY_VAR__);
            stan::math::fill(newI2, DUMMY_VAR__);
            current_statement_begin__ = 146;
            local_scalar_t__ frac_init_E(DUMMY_VAR__);
            (void) frac_init_E;  // dummy to suppress unused var warning
            stan::math::initialize(frac_init_E, DUMMY_VAR__);
            stan::math::fill(frac_init_E, DUMMY_VAR__);
            current_statement_begin__ = 147;
            local_scalar_t__ avg_duration(DUMMY_VAR__);
            (void) avg_duration;  // dummy to suppress unused var warning
            stan::math::initialize(avg_duration, DUMMY_VAR__);
            stan::math::fill(avg_duration, DUMMY_VAR__);
            current_statement_begin__ = 148;
            local_scalar_t__ frac_boosters_to_susceptible(DUMMY_VAR__);
            (void) frac_boosters_to_susceptible;  // dummy to suppress unused var warning
            stan::math::initialize(frac_boosters_to_susceptible, DUMMY_VAR__);
            stan::math::fill(frac_boosters_to_susceptible, DUMMY_VAR__);
            current_statement_begin__ = 149;
            local_scalar_t__ new_protected1(DUMMY_VAR__);
            (void) new_protected1;  // dummy to suppress unused var warning
            stan::math::initialize(new_protected1, DUMMY_VAR__);
            stan::math::fill(new_protected1, DUMMY_VAR__);
            current_statement_begin__ = 150;
            local_scalar_t__ new_protected12(DUMMY_VAR__);
            (void) new_protected12;  // dummy to suppress unused var warning
            stan::math::initialize(new_protected12, DUMMY_VAR__);
            stan::math::fill(new_protected12, DUMMY_VAR__);
            current_statement_begin__ = 151;
            local_scalar_t__ increased_severity_protection(DUMMY_VAR__);
            (void) increased_severity_protection;  // dummy to suppress unused var warning
            stan::math::initialize(increased_severity_protection, DUMMY_VAR__);
            stan::math::fill(increased_severity_protection, DUMMY_VAR__);
            current_statement_begin__ = 152;
            local_scalar_t__ frac_increased_severity_protection(DUMMY_VAR__);
            (void) frac_increased_severity_protection;  // dummy to suppress unused var warning
            stan::math::initialize(frac_increased_severity_protection, DUMMY_VAR__);
            stan::math::fill(frac_increased_severity_protection, DUMMY_VAR__);
            current_statement_begin__ = 153;
            local_scalar_t__ new_admits1(DUMMY_VAR__);
            (void) new_admits1;  // dummy to suppress unused var warning
            stan::math::initialize(new_admits1, DUMMY_VAR__);
            stan::math::fill(new_admits1, DUMMY_VAR__);
            current_statement_begin__ = 154;
            local_scalar_t__ new_admits2(DUMMY_VAR__);
            (void) new_admits2;  // dummy to suppress unused var warning
            stan::math::initialize(new_admits2, DUMMY_VAR__);
            stan::math::fill(new_admits2, DUMMY_VAR__);
            current_statement_begin__ = 155;
            local_scalar_t__ VE_severe_given_infection(DUMMY_VAR__);
            (void) VE_severe_given_infection;  // dummy to suppress unused var warning
            stan::math::initialize(VE_severe_given_infection, DUMMY_VAR__);
            stan::math::fill(VE_severe_given_infection, DUMMY_VAR__);
            current_statement_begin__ = 156;
            local_scalar_t__ lost_protection_infection1(DUMMY_VAR__);
            (void) lost_protection_infection1;  // dummy to suppress unused var warning
            stan::math::initialize(lost_protection_infection1, DUMMY_VAR__);
            stan::math::fill(lost_protection_infection1, DUMMY_VAR__);
            current_statement_begin__ = 157;
            local_scalar_t__ lost_protection_infection12(DUMMY_VAR__);
            (void) lost_protection_infection12;  // dummy to suppress unused var warning
            stan::math::initialize(lost_protection_infection12, DUMMY_VAR__);
            stan::math::fill(lost_protection_infection12, DUMMY_VAR__);
            current_statement_begin__ = 158;
            local_scalar_t__ frac_hosp_init(DUMMY_VAR__);
            (void) frac_hosp_init;  // dummy to suppress unused var warning
            stan::math::initialize(frac_hosp_init, DUMMY_VAR__);
            stan::math::fill(frac_hosp_init, DUMMY_VAR__);
            current_statement_begin__ = 159;
            local_scalar_t__ S2(DUMMY_VAR__);
            (void) S2;  // dummy to suppress unused var warning
            stan::math::initialize(S2, DUMMY_VAR__);
            stan::math::fill(S2, DUMMY_VAR__);
            current_statement_begin__ = 160;
            local_scalar_t__ frac_E2_from_S(DUMMY_VAR__);
            (void) frac_E2_from_S;  // dummy to suppress unused var warning
            stan::math::initialize(frac_E2_from_S, DUMMY_VAR__);
            stan::math::fill(frac_E2_from_S, DUMMY_VAR__);
            current_statement_begin__ = 161;
            local_scalar_t__ frac_E2_from_P1(DUMMY_VAR__);
            (void) frac_E2_from_P1;  // dummy to suppress unused var warning
            stan::math::initialize(frac_E2_from_P1, DUMMY_VAR__);
            stan::math::fill(frac_E2_from_P1, DUMMY_VAR__);
            current_statement_begin__ = 162;
            local_scalar_t__ frac_E2_from_Rlive1(DUMMY_VAR__);
            (void) frac_E2_from_Rlive1;  // dummy to suppress unused var warning
            stan::math::initialize(frac_E2_from_Rlive1, DUMMY_VAR__);
            stan::math::fill(frac_E2_from_Rlive1, DUMMY_VAR__);
            current_statement_begin__ = 164;
            stan::math::assign(duration_latent2, (duration_latent1 * duration_latent_multiplier));
            current_statement_begin__ = 165;
            stan::math::assign(duration_hosp_mod2, (duration_hosp_mod1 * duration_hosp_mod_multiplier));
            current_statement_begin__ = 166;
            stan::math::assign(frac_hosp2, (frac_hosp1 * frac_hosp_multiplier));
            current_statement_begin__ = 169;
            stan::math::assign(VE_severe_given_infection, 0);
            current_statement_begin__ = 170;
            stan::math::assign(frac_hosp_init, (frac_hosp1 * (1 - VE_severe_given_infection)));
            current_statement_begin__ = 172;
            stan::math::assign(avg_duration, duration_rec_mild);
            current_statement_begin__ = 174;
            stan::model::assign(x, 
                        stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        rep_vector(0.0, ncompartments), 
                        "assigning variable x");
            current_statement_begin__ = 175;
            stan::math::assign(frac_init_E, (duration_latent1 / (duration_latent1 + avg_duration)));
            current_statement_begin__ = 176;
            stan::model::assign(x, 
                        stan::model::cons_list(stan::model::index_uni(E1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        (frac_init_E * initial_infected1), 
                        "assigning variable x");
            current_statement_begin__ = 177;
            stan::model::assign(x, 
                        stan::model::cons_list(stan::model::index_uni(Imild1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        (((1 - frac_init_E) * initial_infected1) * (1 - frac_hosp_init)), 
                        "assigning variable x");
            current_statement_begin__ = 178;
            stan::model::assign(x, 
                        stan::model::cons_list(stan::model::index_uni(Ipreh1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        (((1 - frac_init_E) * initial_infected1) * frac_hosp_init), 
                        "assigning variable x");
            current_statement_begin__ = 179;
            stan::model::assign(x, 
                        stan::model::cons_list(stan::model::index_uni(Hmod1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        init_hosp1, 
                        "assigning variable x");
            current_statement_begin__ = 180;
            stan::model::assign(x, 
                        stan::model::cons_list(stan::model::index_uni(P1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        (npop * (VE_infection1 - VE_infection2)), 
                        "assigning variable x");
            current_statement_begin__ = 181;
            stan::model::assign(x, 
                        stan::model::cons_list(stan::model::index_uni(P12), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        (npop * VE_infection2), 
                        "assigning variable x");
            current_statement_begin__ = 183;
            stan::model::assign(x, 
                        stan::model::cons_list(stan::model::index_uni(S), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        ((((npop - initial_infected1) - get_base1(x, P1, 1, "x", 1)) - get_base1(x, P12, 1, "x", 1)) - get_base1(x, Hmod1, 1, "x", 1)), 
                        "assigning variable x");
            current_statement_begin__ = 185;
            stan::model::assign(soon_positive1, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        0.0, 
                        "assigning variable soon_positive1");
            current_statement_begin__ = 186;
            stan::model::assign(new_cases1, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        0.0, 
                        "assigning variable new_cases1");
            current_statement_begin__ = 187;
            if (as_bool(logical_eq(get_base1(get_base1(tobs, obs_cases1, "tobs", 1), 1, "tobs", 2), 1))) {
                current_statement_begin__ = 188;
                std::stringstream errmsg_stream__;
                errmsg_stream__ << "Minimum tobs[obs_cases, :] is 2";
                throw std::domain_error(errmsg_stream__.str());
            }
            current_statement_begin__ = 190;
            stan::model::assign(soon_positive2, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        0.0, 
                        "assigning variable soon_positive2");
            current_statement_begin__ = 191;
            stan::model::assign(new_cases2, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        0.0, 
                        "assigning variable new_cases2");
            current_statement_begin__ = 192;
            if (as_bool(logical_eq(get_base1(get_base1(tobs, obs_cases2, "tobs", 1), 1, "tobs", 2), 1))) {
                current_statement_begin__ = 193;
                std::stringstream errmsg_stream__;
                errmsg_stream__ << "Minimum tobs[obs_cases, :] is 2";
                throw std::domain_error(errmsg_stream__.str());
            }
            current_statement_begin__ = 196;
            for (int it = 1; it <= nt; ++it) {
                current_statement_begin__ = 197;
                stan::model::assign(beta, 
                            stan::model::cons_list(stan::model::index_uni(it), stan::model::nil_index_list()), 
                            beta_0, 
                            "assigning variable beta");
                current_statement_begin__ = 198;
                for (int iinter = 1; iinter <= ninter; ++iinter) {
                    current_statement_begin__ = 201;
                    stan::model::assign(beta, 
                                stan::model::cons_list(stan::model::index_uni(it), stan::model::nil_index_list()), 
                                (get_base1(beta, it, "beta", 1) * pow(get_base1(beta_multiplier, iinter, "beta_multiplier", 1), inv_logit(((9.19024 / get_base1(len_inter, iinter, "len_inter", 1)) * (it - (get_base1(t_inter, iinter, "t_inter", 1) + (get_base1(len_inter, iinter, "len_inter", 1) / 2))))))), 
                                "assigning variable beta");
                }
            }
            current_statement_begin__ = 205;
            for (int it = 1; it <= (nt - 1); ++it) {
                current_statement_begin__ = 206;
                stan::math::assign(newE1, stan::math::fmin(get_base1(x, S, it, "x", 1), (((get_base1(beta, it, "beta", 1) * get_base1(x, S, it, "x", 1)) * (get_base1(x, Imild1, it, "x", 1) + get_base1(x, Ipreh1, it, "x", 1))) / npop)));
                current_statement_begin__ = 207;
                stan::math::assign(S2, ((get_base1(x, S, it, "x", 1) + get_base1(x, P1, it, "x", 1)) + get_base1(x, Rlive1, it, "x", 1)));
                current_statement_begin__ = 209;
                stan::math::assign(frac_E2_from_S, (get_base1(x, S, it, "x", 1) / S2));
                current_statement_begin__ = 210;
                stan::math::assign(frac_E2_from_P1, (get_base1(x, P1, it, "x", 1) / S2));
                current_statement_begin__ = 211;
                stan::math::assign(frac_E2_from_Rlive1, (1 - (frac_E2_from_S + frac_E2_from_P1)));
                current_statement_begin__ = 213;
                if (as_bool(logical_eq(it, variant2_introduction))) {
                    current_statement_begin__ = 214;
                    stan::math::assign(newE2, (initial_infected2_fraction * newE1));
                    current_statement_begin__ = 215;
                    if (pstream__) {
                        stan_print(pstream__,"newE2 = ");
                        stan_print(pstream__,newE2);
                        *pstream__ << std::endl;
                    }
                } else {
                    current_statement_begin__ = 217;
                    stan::math::assign(newE2, stan::math::fmin(S2, ((((get_base1(beta, it, "beta", 1) * trans_multiplier) * S2) * (get_base1(x, Imild2, it, "x", 1) + get_base1(x, Ipreh2, it, "x", 1))) / npop)));
                }
                current_statement_begin__ = 221;
                stan::math::assign(newI1, (get_base1(x, E1, it, "x", 1) / duration_latent1));
                current_statement_begin__ = 222;
                stan::math::assign(newI2, (get_base1(x, E2, it, "x", 1) / duration_latent2));
                current_statement_begin__ = 238;
                stan::math::assign(new_protected1, 0);
                current_statement_begin__ = 239;
                stan::math::assign(new_protected12, 0);
                current_statement_begin__ = 241;
                stan::math::assign(new_admits1, (get_base1(x, Ipreh1, it, "x", 1) / duration_pre_hosp));
                current_statement_begin__ = 242;
                stan::math::assign(new_admits2, (get_base1(x, Ipreh2, it, "x", 1) / duration_pre_hosp));
                current_statement_begin__ = 244;
                stan::math::assign(lost_protection_infection1, (get_base1(x, P1, it, "x", 1) / duration_protection_infection));
                current_statement_begin__ = 245;
                stan::math::assign(lost_protection_infection12, (get_base1(x, P12, it, "x", 1) / duration_protection_infection));
                current_statement_begin__ = 247;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(S), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            (((get_base1(x, S, it, "x", 1) - newE1) + lost_protection_infection1) - (newE2 * frac_E2_from_S)), 
                            "assigning variable x");
                current_statement_begin__ = 248;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(E1), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((get_base1(x, E1, it, "x", 1) + newE1) - newI1), 
                            "assigning variable x");
                current_statement_begin__ = 249;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(E2), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((get_base1(x, E2, it, "x", 1) + newE2) - newI2), 
                            "assigning variable x");
                current_statement_begin__ = 251;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Imild1), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((get_base1(x, Imild1, it, "x", 1) + (newI1 * (1 - frac_hosp1))) - (get_base1(x, Imild1, it, "x", 1) / duration_rec_mild)), 
                            "assigning variable x");
                current_statement_begin__ = 252;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Imild2), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((get_base1(x, Imild2, it, "x", 1) + (newI2 * (1 - frac_hosp2))) - (get_base1(x, Imild2, it, "x", 1) / duration_rec_mild)), 
                            "assigning variable x");
                current_statement_begin__ = 254;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Ipreh1), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((get_base1(x, Ipreh1, it, "x", 1) + (newI1 * frac_hosp1)) - new_admits1), 
                            "assigning variable x");
                current_statement_begin__ = 255;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Ipreh2), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((get_base1(x, Ipreh2, it, "x", 1) + (newI2 * frac_hosp2)) - new_admits2), 
                            "assigning variable x");
                current_statement_begin__ = 257;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Hmod1), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((get_base1(x, Hmod1, it, "x", 1) + new_admits1) - (get_base1(x, Hmod1, it, "x", 1) / duration_hosp_mod1)), 
                            "assigning variable x");
                current_statement_begin__ = 258;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Hmod2), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((get_base1(x, Hmod2, it, "x", 1) + new_admits2) - (get_base1(x, Hmod2, it, "x", 1) / duration_hosp_mod2)), 
                            "assigning variable x");
                current_statement_begin__ = 260;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(P1), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((((get_base1(x, P1, it, "x", 1) + new_protected1) - lost_protection_infection1) + lost_protection_infection12) - (newE2 * frac_E2_from_P1)), 
                            "assigning variable x");
                current_statement_begin__ = 261;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(P12), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((get_base1(x, P12, it, "x", 1) + new_protected12) - lost_protection_infection12), 
                            "assigning variable x");
                current_statement_begin__ = 263;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Rlive1), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            (((get_base1(x, Rlive1, it, "x", 1) + (get_base1(x, Hmod1, it, "x", 1) / duration_hosp_mod1)) + (get_base1(x, Imild1, it, "x", 1) / duration_rec_mild)) - (newE2 * frac_E2_from_Rlive1)), 
                            "assigning variable x");
                current_statement_begin__ = 264;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Rlive12), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((get_base1(x, Rlive12, it, "x", 1) + (get_base1(x, Hmod2, it, "x", 1) / duration_hosp_mod2)) + (get_base1(x, Imild2, it, "x", 1) / duration_rec_mild)), 
                            "assigning variable x");
                current_statement_begin__ = 268;
                stan::model::assign(soon_positive1, 
                            stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list()), 
                            ((get_base1(soon_positive1, it, "soon_positive1", 1) + (newE1 * frac_tested)) - (get_base1(soon_positive1, it, "soon_positive1", 1) / test_delay)), 
                            "assigning variable soon_positive1");
                current_statement_begin__ = 269;
                stan::model::assign(soon_positive2, 
                            stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list()), 
                            ((get_base1(soon_positive2, it, "soon_positive2", 1) + (newE2 * frac_tested)) - (get_base1(soon_positive2, it, "soon_positive2", 1) / test_delay)), 
                            "assigning variable soon_positive2");
                current_statement_begin__ = 270;
                stan::model::assign(new_cases1, 
                            stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list()), 
                            (get_base1(soon_positive1, (it + 1), "soon_positive1", 1) / test_delay), 
                            "assigning variable new_cases1");
                current_statement_begin__ = 271;
                stan::model::assign(new_cases2, 
                            stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list()), 
                            (get_base1(soon_positive2, (it + 1), "soon_positive2", 1) / test_delay), 
                            "assigning variable new_cases2");
                current_statement_begin__ = 285;
                if (as_bool(logical_gt(stan::math::fabs((sum(stan::model::rvalue(x, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), "x")) - npop)), 0.01))) {
                    current_statement_begin__ = 287;
                    std::stringstream errmsg_stream__;
                    errmsg_stream__ << "Model is leaking, net gain: ";
                    errmsg_stream__ << (sum(stan::model::rvalue(x, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), "x")) - npop);
                    errmsg_stream__ << "it= ";
                    errmsg_stream__ << it;
                    errmsg_stream__ << " ";
                    errmsg_stream__ << stan::model::rvalue(x, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(it), stan::model::nil_index_list())), "x");
                    errmsg_stream__ << " ====  ";
                    errmsg_stream__ << stan::model::rvalue(x, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), "x");
                    throw std::domain_error(errmsg_stream__.str());
                }
            }
            current_statement_begin__ = 292;
            stan::model::assign(sim_data, 
                        stan::model::cons_list(stan::model::index_uni(obs_hosp_census), stan::model::nil_index_list()), 
                        add(multiply(get_base1(x, Hmod1, "x", 1), (1 + frac_incidental1)), multiply(get_base1(x, Hmod2, "x", 1), (1 + frac_incidental2))), 
                        "assigning variable sim_data");
            current_statement_begin__ = 293;
            stan::model::assign(sim_data, 
                        stan::model::cons_list(stan::model::index_uni(obs_cases1), stan::model::nil_index_list()), 
                        new_cases1, 
                        "assigning variable sim_data");
            current_statement_begin__ = 294;
            stan::model::assign(sim_data, 
                        stan::model::cons_list(stan::model::index_uni(obs_cases2), stan::model::nil_index_list()), 
                        new_cases2, 
                        "assigning variable sim_data");
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 122;
            size_t x_j_1_max__ = ncompartments;
            size_t x_j_2_max__ = nt;
            for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(x(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: x" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable x: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            check_greater_or_equal(function__, "x", x, 0.0);
            current_statement_begin__ = 123;
            size_t sim_data_j_1_max__ = nobs_types;
            size_t sim_data_j_2_max__ = nt;
            for (size_t j_1__ = 0; j_1__ < sim_data_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < sim_data_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(sim_data(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: sim_data" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sim_data: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            check_greater_or_equal(function__, "sim_data", sim_data, 0.0);
            current_statement_begin__ = 124;
            size_t new_cases1_j_1_max__ = nt;
            for (size_t j_1__ = 0; j_1__ < new_cases1_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(new_cases1(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: new_cases1" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable new_cases1: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "new_cases1", new_cases1, 0.0);
            current_statement_begin__ = 125;
            size_t new_cases2_j_1_max__ = nt;
            for (size_t j_1__ = 0; j_1__ < new_cases2_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(new_cases2(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: new_cases2" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable new_cases2: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "new_cases2", new_cases2, 0.0);
            current_statement_begin__ = 126;
            size_t soon_positive1_j_1_max__ = nt;
            for (size_t j_1__ = 0; j_1__ < soon_positive1_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(soon_positive1(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: soon_positive1" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable soon_positive1: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "soon_positive1", soon_positive1, 0.0);
            current_statement_begin__ = 127;
            size_t soon_positive2_j_1_max__ = nt;
            for (size_t j_1__ = 0; j_1__ < soon_positive2_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(soon_positive2(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: soon_positive2" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable soon_positive2: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "soon_positive2", soon_positive2, 0.0);
            current_statement_begin__ = 128;
            size_t beta_k_0_max__ = nt;
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(beta[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: beta" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable beta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            size_t beta_i_0_max__ = nt;
            for (size_t i_0__ = 0; i_0__ < beta_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "beta[i_0__]", beta[i_0__], 0.0);
            }
            current_statement_begin__ = 130;
            if (stan::math::is_uninitialized(duration_latent2)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: duration_latent2";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable duration_latent2: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "duration_latent2", duration_latent2, 1.0);
            current_statement_begin__ = 131;
            if (stan::math::is_uninitialized(duration_hosp_mod2)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: duration_hosp_mod2";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable duration_hosp_mod2: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "duration_hosp_mod2", duration_hosp_mod2, 1.0);
            current_statement_begin__ = 132;
            if (stan::math::is_uninitialized(frac_hosp2)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: frac_hosp2";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable frac_hosp2: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "frac_hosp2", frac_hosp2, 0.0);
            // model body
            current_statement_begin__ = 305;
            lp_accum__.add(normal_log<propto__>(duration_latent1, mu_duration_latent, sigma_duration_latent));
            current_statement_begin__ = 306;
            lp_accum__.add(normal_log<propto__>(duration_latent_multiplier, mu_duration_latent_multiplier, sigma_duration_latent_multiplier));
            current_statement_begin__ = 307;
            lp_accum__.add(normal_log<propto__>(duration_rec_mild, mu_duration_rec_mild, sigma_duration_rec_mild));
            current_statement_begin__ = 308;
            lp_accum__.add(normal_log<propto__>(duration_pre_hosp, mu_duration_pre_hosp, sigma_duration_pre_hosp));
            current_statement_begin__ = 309;
            lp_accum__.add(normal_log<propto__>(duration_hosp_mod1, mu_duration_hosp_mod, sigma_duration_hosp_mod));
            current_statement_begin__ = 310;
            lp_accum__.add(normal_log<propto__>(duration_hosp_mod_multiplier, mu_duration_hosp_mod_multiplier, sigma_duration_hosp_mod_multiplier));
            current_statement_begin__ = 311;
            lp_accum__.add(normal_log<propto__>(duration_protection_infection, mu_duration_protection_infection, sigma_duration_protection_infection));
            current_statement_begin__ = 313;
            lp_accum__.add(normal_log<propto__>(beta_0, mu_beta0, sigma_beta0));
            current_statement_begin__ = 314;
            for (int iinter = 1; iinter <= ninter; ++iinter) {
                current_statement_begin__ = 315;
                lp_accum__.add(normal_log<propto__>(get_base1(beta_multiplier, iinter, "beta_multiplier", 1), get_base1(mu_beta_inter, iinter, "mu_beta_inter", 1), get_base1(sigma_beta_inter, iinter, "sigma_beta_inter", 1)));
            }
            current_statement_begin__ = 318;
            lp_accum__.add(normal_log<propto__>(frac_tested, mu_frac_tested, sigma_frac_tested));
            current_statement_begin__ = 319;
            lp_accum__.add(normal_log<propto__>(trans_multiplier, mu_trans_multiplier, sigma_trans_multiplier));
            current_statement_begin__ = 320;
            lp_accum__.add(normal_log<propto__>(test_delay, mu_test_delay, sigma_test_delay));
            current_statement_begin__ = 322;
            lp_accum__.add(exponential_log<propto__>(initial_infected1, lambda_initial_infected1));
            current_statement_begin__ = 326;
            lp_accum__.add(exponential_log<propto__>(sigma_obs, sigma_obs_est_inv));
            current_statement_begin__ = 329;
            for (int itype = 1; itype <= nobs_types; ++itype) {
                current_statement_begin__ = 330;
                if (as_bool(logical_gt(get_base1(nobs, itype, "nobs", 1), 0))) {
                    current_statement_begin__ = 331;
                    lp_accum__.add(normal_log<propto__>(stan::model::rvalue(obs_data, stan::model::cons_list(stan::model::index_uni(itype), stan::model::cons_list(stan::model::index_min_max(1, get_base1(nobs, itype, "nobs", 1)), stan::model::nil_index_list())), "obs_data"), stan::model::rvalue(sim_data, stan::model::cons_list(stan::model::index_uni(itype), stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(tobs, stan::model::cons_list(stan::model::index_uni(itype), stan::model::cons_list(stan::model::index_min_max(1, get_base1(nobs, itype, "nobs", 1)), stan::model::nil_index_list())), "tobs")), stan::model::nil_index_list())), "sim_data"), get_base1(sigma_obs, itype, "sigma_obs", 1)));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("duration_latent1");
        names__.push_back("duration_rec_mild");
        names__.push_back("duration_pre_hosp");
        names__.push_back("duration_hosp_mod1");
        names__.push_back("duration_protection_infection");
        names__.push_back("frac_hosp1");
        names__.push_back("duration_latent_multiplier");
        names__.push_back("duration_hosp_mod_multiplier");
        names__.push_back("frac_hosp_multiplier");
        names__.push_back("frac_tested");
        names__.push_back("initial_infected1");
        names__.push_back("sigma_obs");
        names__.push_back("test_delay");
        names__.push_back("beta_0");
        names__.push_back("beta_multiplier");
        names__.push_back("trans_multiplier");
        names__.push_back("x");
        names__.push_back("sim_data");
        names__.push_back("new_cases1");
        names__.push_back("new_cases2");
        names__.push_back("soon_positive1");
        names__.push_back("soon_positive2");
        names__.push_back("beta");
        names__.push_back("duration_latent2");
        names__.push_back("duration_hosp_mod2");
        names__.push_back("frac_hosp2");
        names__.push_back("sim_data_with_error");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nobs_types);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(ninter);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(ncompartments);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nobs_types);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nobs_types);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_LEMMA_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double duration_latent1 = in__.scalar_lb_constrain(1.0);
        vars__.push_back(duration_latent1);
        double duration_rec_mild = in__.scalar_lb_constrain(1.0);
        vars__.push_back(duration_rec_mild);
        double duration_pre_hosp = in__.scalar_lb_constrain(1.0);
        vars__.push_back(duration_pre_hosp);
        double duration_hosp_mod1 = in__.scalar_lb_constrain(1.0);
        vars__.push_back(duration_hosp_mod1);
        double duration_protection_infection = in__.scalar_lb_constrain(1.0);
        vars__.push_back(duration_protection_infection);
        double frac_hosp1 = in__.scalar_lb_constrain(0.0);
        vars__.push_back(frac_hosp1);
        double duration_latent_multiplier = in__.scalar_lb_constrain(0.0);
        vars__.push_back(duration_latent_multiplier);
        double duration_hosp_mod_multiplier = in__.scalar_lb_constrain(0.0);
        vars__.push_back(duration_hosp_mod_multiplier);
        double frac_hosp_multiplier = in__.scalar_lb_constrain(0.0);
        vars__.push_back(frac_hosp_multiplier);
        double frac_tested = in__.scalar_lub_constrain(0.0, 1.0);
        vars__.push_back(frac_tested);
        double initial_infected1 = in__.scalar_lb_constrain(0.0);
        vars__.push_back(initial_infected1);
        std::vector<double> sigma_obs;
        size_t sigma_obs_d_0_max__ = nobs_types;
        sigma_obs.reserve(sigma_obs_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < sigma_obs_d_0_max__; ++d_0__) {
            sigma_obs.push_back(in__.scalar_lb_constrain(0.0));
        }
        size_t sigma_obs_k_0_max__ = nobs_types;
        for (size_t k_0__ = 0; k_0__ < sigma_obs_k_0_max__; ++k_0__) {
            vars__.push_back(sigma_obs[k_0__]);
        }
        double test_delay = in__.scalar_lb_constrain(1.0);
        vars__.push_back(test_delay);
        double beta_0 = in__.scalar_lb_constrain(0.0);
        vars__.push_back(beta_0);
        std::vector<double> beta_multiplier;
        size_t beta_multiplier_d_0_max__ = ninter;
        beta_multiplier.reserve(beta_multiplier_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < beta_multiplier_d_0_max__; ++d_0__) {
            beta_multiplier.push_back(in__.scalar_lb_constrain(0.0));
        }
        size_t beta_multiplier_k_0_max__ = ninter;
        for (size_t k_0__ = 0; k_0__ < beta_multiplier_k_0_max__; ++k_0__) {
            vars__.push_back(beta_multiplier[k_0__]);
        }
        double trans_multiplier = in__.scalar_lb_constrain(0.0);
        vars__.push_back(trans_multiplier);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 122;
            validate_non_negative_index("x", "ncompartments", ncompartments);
            validate_non_negative_index("x", "nt", nt);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> x(ncompartments, nt);
            stan::math::initialize(x, DUMMY_VAR__);
            stan::math::fill(x, DUMMY_VAR__);
            current_statement_begin__ = 123;
            validate_non_negative_index("sim_data", "nobs_types", nobs_types);
            validate_non_negative_index("sim_data", "nt", nt);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> sim_data(nobs_types, nt);
            stan::math::initialize(sim_data, DUMMY_VAR__);
            stan::math::fill(sim_data, DUMMY_VAR__);
            current_statement_begin__ = 124;
            validate_non_negative_index("new_cases1", "nt", nt);
            Eigen::Matrix<double, 1, Eigen::Dynamic> new_cases1(nt);
            stan::math::initialize(new_cases1, DUMMY_VAR__);
            stan::math::fill(new_cases1, DUMMY_VAR__);
            current_statement_begin__ = 125;
            validate_non_negative_index("new_cases2", "nt", nt);
            Eigen::Matrix<double, 1, Eigen::Dynamic> new_cases2(nt);
            stan::math::initialize(new_cases2, DUMMY_VAR__);
            stan::math::fill(new_cases2, DUMMY_VAR__);
            current_statement_begin__ = 126;
            validate_non_negative_index("soon_positive1", "nt", nt);
            Eigen::Matrix<double, 1, Eigen::Dynamic> soon_positive1(nt);
            stan::math::initialize(soon_positive1, DUMMY_VAR__);
            stan::math::fill(soon_positive1, DUMMY_VAR__);
            current_statement_begin__ = 127;
            validate_non_negative_index("soon_positive2", "nt", nt);
            Eigen::Matrix<double, 1, Eigen::Dynamic> soon_positive2(nt);
            stan::math::initialize(soon_positive2, DUMMY_VAR__);
            stan::math::fill(soon_positive2, DUMMY_VAR__);
            current_statement_begin__ = 128;
            validate_non_negative_index("beta", "nt", nt);
            std::vector<double> beta(nt, double(0));
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            current_statement_begin__ = 130;
            double duration_latent2;
            (void) duration_latent2;  // dummy to suppress unused var warning
            stan::math::initialize(duration_latent2, DUMMY_VAR__);
            stan::math::fill(duration_latent2, DUMMY_VAR__);
            current_statement_begin__ = 131;
            double duration_hosp_mod2;
            (void) duration_hosp_mod2;  // dummy to suppress unused var warning
            stan::math::initialize(duration_hosp_mod2, DUMMY_VAR__);
            stan::math::fill(duration_hosp_mod2, DUMMY_VAR__);
            current_statement_begin__ = 132;
            double frac_hosp2;
            (void) frac_hosp2;  // dummy to suppress unused var warning
            stan::math::initialize(frac_hosp2, DUMMY_VAR__);
            stan::math::fill(frac_hosp2, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 134;
            for (int it = 1; it <= nt; ++it) {
                current_statement_begin__ = 135;
                for (int itype = 1; itype <= nobs_types; ++itype) {
                    current_statement_begin__ = 136;
                    stan::model::assign(sim_data, 
                                stan::model::cons_list(stan::model::index_uni(itype), stan::model::cons_list(stan::model::index_uni(it), stan::model::nil_index_list())), 
                                0.0, 
                                "assigning variable sim_data");
                }
            }
            {
            current_statement_begin__ = 142;
            local_scalar_t__ newE1(DUMMY_VAR__);
            (void) newE1;  // dummy to suppress unused var warning
            stan::math::initialize(newE1, DUMMY_VAR__);
            stan::math::fill(newE1, DUMMY_VAR__);
            current_statement_begin__ = 143;
            local_scalar_t__ newE2(DUMMY_VAR__);
            (void) newE2;  // dummy to suppress unused var warning
            stan::math::initialize(newE2, DUMMY_VAR__);
            stan::math::fill(newE2, DUMMY_VAR__);
            current_statement_begin__ = 144;
            local_scalar_t__ newI1(DUMMY_VAR__);
            (void) newI1;  // dummy to suppress unused var warning
            stan::math::initialize(newI1, DUMMY_VAR__);
            stan::math::fill(newI1, DUMMY_VAR__);
            current_statement_begin__ = 145;
            local_scalar_t__ newI2(DUMMY_VAR__);
            (void) newI2;  // dummy to suppress unused var warning
            stan::math::initialize(newI2, DUMMY_VAR__);
            stan::math::fill(newI2, DUMMY_VAR__);
            current_statement_begin__ = 146;
            local_scalar_t__ frac_init_E(DUMMY_VAR__);
            (void) frac_init_E;  // dummy to suppress unused var warning
            stan::math::initialize(frac_init_E, DUMMY_VAR__);
            stan::math::fill(frac_init_E, DUMMY_VAR__);
            current_statement_begin__ = 147;
            local_scalar_t__ avg_duration(DUMMY_VAR__);
            (void) avg_duration;  // dummy to suppress unused var warning
            stan::math::initialize(avg_duration, DUMMY_VAR__);
            stan::math::fill(avg_duration, DUMMY_VAR__);
            current_statement_begin__ = 148;
            local_scalar_t__ frac_boosters_to_susceptible(DUMMY_VAR__);
            (void) frac_boosters_to_susceptible;  // dummy to suppress unused var warning
            stan::math::initialize(frac_boosters_to_susceptible, DUMMY_VAR__);
            stan::math::fill(frac_boosters_to_susceptible, DUMMY_VAR__);
            current_statement_begin__ = 149;
            local_scalar_t__ new_protected1(DUMMY_VAR__);
            (void) new_protected1;  // dummy to suppress unused var warning
            stan::math::initialize(new_protected1, DUMMY_VAR__);
            stan::math::fill(new_protected1, DUMMY_VAR__);
            current_statement_begin__ = 150;
            local_scalar_t__ new_protected12(DUMMY_VAR__);
            (void) new_protected12;  // dummy to suppress unused var warning
            stan::math::initialize(new_protected12, DUMMY_VAR__);
            stan::math::fill(new_protected12, DUMMY_VAR__);
            current_statement_begin__ = 151;
            local_scalar_t__ increased_severity_protection(DUMMY_VAR__);
            (void) increased_severity_protection;  // dummy to suppress unused var warning
            stan::math::initialize(increased_severity_protection, DUMMY_VAR__);
            stan::math::fill(increased_severity_protection, DUMMY_VAR__);
            current_statement_begin__ = 152;
            local_scalar_t__ frac_increased_severity_protection(DUMMY_VAR__);
            (void) frac_increased_severity_protection;  // dummy to suppress unused var warning
            stan::math::initialize(frac_increased_severity_protection, DUMMY_VAR__);
            stan::math::fill(frac_increased_severity_protection, DUMMY_VAR__);
            current_statement_begin__ = 153;
            local_scalar_t__ new_admits1(DUMMY_VAR__);
            (void) new_admits1;  // dummy to suppress unused var warning
            stan::math::initialize(new_admits1, DUMMY_VAR__);
            stan::math::fill(new_admits1, DUMMY_VAR__);
            current_statement_begin__ = 154;
            local_scalar_t__ new_admits2(DUMMY_VAR__);
            (void) new_admits2;  // dummy to suppress unused var warning
            stan::math::initialize(new_admits2, DUMMY_VAR__);
            stan::math::fill(new_admits2, DUMMY_VAR__);
            current_statement_begin__ = 155;
            local_scalar_t__ VE_severe_given_infection(DUMMY_VAR__);
            (void) VE_severe_given_infection;  // dummy to suppress unused var warning
            stan::math::initialize(VE_severe_given_infection, DUMMY_VAR__);
            stan::math::fill(VE_severe_given_infection, DUMMY_VAR__);
            current_statement_begin__ = 156;
            local_scalar_t__ lost_protection_infection1(DUMMY_VAR__);
            (void) lost_protection_infection1;  // dummy to suppress unused var warning
            stan::math::initialize(lost_protection_infection1, DUMMY_VAR__);
            stan::math::fill(lost_protection_infection1, DUMMY_VAR__);
            current_statement_begin__ = 157;
            local_scalar_t__ lost_protection_infection12(DUMMY_VAR__);
            (void) lost_protection_infection12;  // dummy to suppress unused var warning
            stan::math::initialize(lost_protection_infection12, DUMMY_VAR__);
            stan::math::fill(lost_protection_infection12, DUMMY_VAR__);
            current_statement_begin__ = 158;
            local_scalar_t__ frac_hosp_init(DUMMY_VAR__);
            (void) frac_hosp_init;  // dummy to suppress unused var warning
            stan::math::initialize(frac_hosp_init, DUMMY_VAR__);
            stan::math::fill(frac_hosp_init, DUMMY_VAR__);
            current_statement_begin__ = 159;
            local_scalar_t__ S2(DUMMY_VAR__);
            (void) S2;  // dummy to suppress unused var warning
            stan::math::initialize(S2, DUMMY_VAR__);
            stan::math::fill(S2, DUMMY_VAR__);
            current_statement_begin__ = 160;
            local_scalar_t__ frac_E2_from_S(DUMMY_VAR__);
            (void) frac_E2_from_S;  // dummy to suppress unused var warning
            stan::math::initialize(frac_E2_from_S, DUMMY_VAR__);
            stan::math::fill(frac_E2_from_S, DUMMY_VAR__);
            current_statement_begin__ = 161;
            local_scalar_t__ frac_E2_from_P1(DUMMY_VAR__);
            (void) frac_E2_from_P1;  // dummy to suppress unused var warning
            stan::math::initialize(frac_E2_from_P1, DUMMY_VAR__);
            stan::math::fill(frac_E2_from_P1, DUMMY_VAR__);
            current_statement_begin__ = 162;
            local_scalar_t__ frac_E2_from_Rlive1(DUMMY_VAR__);
            (void) frac_E2_from_Rlive1;  // dummy to suppress unused var warning
            stan::math::initialize(frac_E2_from_Rlive1, DUMMY_VAR__);
            stan::math::fill(frac_E2_from_Rlive1, DUMMY_VAR__);
            current_statement_begin__ = 164;
            stan::math::assign(duration_latent2, (duration_latent1 * duration_latent_multiplier));
            current_statement_begin__ = 165;
            stan::math::assign(duration_hosp_mod2, (duration_hosp_mod1 * duration_hosp_mod_multiplier));
            current_statement_begin__ = 166;
            stan::math::assign(frac_hosp2, (frac_hosp1 * frac_hosp_multiplier));
            current_statement_begin__ = 169;
            stan::math::assign(VE_severe_given_infection, 0);
            current_statement_begin__ = 170;
            stan::math::assign(frac_hosp_init, (frac_hosp1 * (1 - VE_severe_given_infection)));
            current_statement_begin__ = 172;
            stan::math::assign(avg_duration, duration_rec_mild);
            current_statement_begin__ = 174;
            stan::model::assign(x, 
                        stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        rep_vector(0.0, ncompartments), 
                        "assigning variable x");
            current_statement_begin__ = 175;
            stan::math::assign(frac_init_E, (duration_latent1 / (duration_latent1 + avg_duration)));
            current_statement_begin__ = 176;
            stan::model::assign(x, 
                        stan::model::cons_list(stan::model::index_uni(E1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        (frac_init_E * initial_infected1), 
                        "assigning variable x");
            current_statement_begin__ = 177;
            stan::model::assign(x, 
                        stan::model::cons_list(stan::model::index_uni(Imild1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        (((1 - frac_init_E) * initial_infected1) * (1 - frac_hosp_init)), 
                        "assigning variable x");
            current_statement_begin__ = 178;
            stan::model::assign(x, 
                        stan::model::cons_list(stan::model::index_uni(Ipreh1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        (((1 - frac_init_E) * initial_infected1) * frac_hosp_init), 
                        "assigning variable x");
            current_statement_begin__ = 179;
            stan::model::assign(x, 
                        stan::model::cons_list(stan::model::index_uni(Hmod1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        init_hosp1, 
                        "assigning variable x");
            current_statement_begin__ = 180;
            stan::model::assign(x, 
                        stan::model::cons_list(stan::model::index_uni(P1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        (npop * (VE_infection1 - VE_infection2)), 
                        "assigning variable x");
            current_statement_begin__ = 181;
            stan::model::assign(x, 
                        stan::model::cons_list(stan::model::index_uni(P12), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        (npop * VE_infection2), 
                        "assigning variable x");
            current_statement_begin__ = 183;
            stan::model::assign(x, 
                        stan::model::cons_list(stan::model::index_uni(S), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        ((((npop - initial_infected1) - get_base1(x, P1, 1, "x", 1)) - get_base1(x, P12, 1, "x", 1)) - get_base1(x, Hmod1, 1, "x", 1)), 
                        "assigning variable x");
            current_statement_begin__ = 185;
            stan::model::assign(soon_positive1, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        0.0, 
                        "assigning variable soon_positive1");
            current_statement_begin__ = 186;
            stan::model::assign(new_cases1, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        0.0, 
                        "assigning variable new_cases1");
            current_statement_begin__ = 187;
            if (as_bool(logical_eq(get_base1(get_base1(tobs, obs_cases1, "tobs", 1), 1, "tobs", 2), 1))) {
                current_statement_begin__ = 188;
                std::stringstream errmsg_stream__;
                errmsg_stream__ << "Minimum tobs[obs_cases, :] is 2";
                throw std::domain_error(errmsg_stream__.str());
            }
            current_statement_begin__ = 190;
            stan::model::assign(soon_positive2, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        0.0, 
                        "assigning variable soon_positive2");
            current_statement_begin__ = 191;
            stan::model::assign(new_cases2, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        0.0, 
                        "assigning variable new_cases2");
            current_statement_begin__ = 192;
            if (as_bool(logical_eq(get_base1(get_base1(tobs, obs_cases2, "tobs", 1), 1, "tobs", 2), 1))) {
                current_statement_begin__ = 193;
                std::stringstream errmsg_stream__;
                errmsg_stream__ << "Minimum tobs[obs_cases, :] is 2";
                throw std::domain_error(errmsg_stream__.str());
            }
            current_statement_begin__ = 196;
            for (int it = 1; it <= nt; ++it) {
                current_statement_begin__ = 197;
                stan::model::assign(beta, 
                            stan::model::cons_list(stan::model::index_uni(it), stan::model::nil_index_list()), 
                            beta_0, 
                            "assigning variable beta");
                current_statement_begin__ = 198;
                for (int iinter = 1; iinter <= ninter; ++iinter) {
                    current_statement_begin__ = 201;
                    stan::model::assign(beta, 
                                stan::model::cons_list(stan::model::index_uni(it), stan::model::nil_index_list()), 
                                (get_base1(beta, it, "beta", 1) * pow(get_base1(beta_multiplier, iinter, "beta_multiplier", 1), inv_logit(((9.19024 / get_base1(len_inter, iinter, "len_inter", 1)) * (it - (get_base1(t_inter, iinter, "t_inter", 1) + (get_base1(len_inter, iinter, "len_inter", 1) / 2))))))), 
                                "assigning variable beta");
                }
            }
            current_statement_begin__ = 205;
            for (int it = 1; it <= (nt - 1); ++it) {
                current_statement_begin__ = 206;
                stan::math::assign(newE1, stan::math::fmin(get_base1(x, S, it, "x", 1), (((get_base1(beta, it, "beta", 1) * get_base1(x, S, it, "x", 1)) * (get_base1(x, Imild1, it, "x", 1) + get_base1(x, Ipreh1, it, "x", 1))) / npop)));
                current_statement_begin__ = 207;
                stan::math::assign(S2, ((get_base1(x, S, it, "x", 1) + get_base1(x, P1, it, "x", 1)) + get_base1(x, Rlive1, it, "x", 1)));
                current_statement_begin__ = 209;
                stan::math::assign(frac_E2_from_S, (get_base1(x, S, it, "x", 1) / S2));
                current_statement_begin__ = 210;
                stan::math::assign(frac_E2_from_P1, (get_base1(x, P1, it, "x", 1) / S2));
                current_statement_begin__ = 211;
                stan::math::assign(frac_E2_from_Rlive1, (1 - (frac_E2_from_S + frac_E2_from_P1)));
                current_statement_begin__ = 213;
                if (as_bool(logical_eq(it, variant2_introduction))) {
                    current_statement_begin__ = 214;
                    stan::math::assign(newE2, (initial_infected2_fraction * newE1));
                    current_statement_begin__ = 215;
                    if (pstream__) {
                        stan_print(pstream__,"newE2 = ");
                        stan_print(pstream__,newE2);
                        *pstream__ << std::endl;
                    }
                } else {
                    current_statement_begin__ = 217;
                    stan::math::assign(newE2, stan::math::fmin(S2, ((((get_base1(beta, it, "beta", 1) * trans_multiplier) * S2) * (get_base1(x, Imild2, it, "x", 1) + get_base1(x, Ipreh2, it, "x", 1))) / npop)));
                }
                current_statement_begin__ = 221;
                stan::math::assign(newI1, (get_base1(x, E1, it, "x", 1) / duration_latent1));
                current_statement_begin__ = 222;
                stan::math::assign(newI2, (get_base1(x, E2, it, "x", 1) / duration_latent2));
                current_statement_begin__ = 238;
                stan::math::assign(new_protected1, 0);
                current_statement_begin__ = 239;
                stan::math::assign(new_protected12, 0);
                current_statement_begin__ = 241;
                stan::math::assign(new_admits1, (get_base1(x, Ipreh1, it, "x", 1) / duration_pre_hosp));
                current_statement_begin__ = 242;
                stan::math::assign(new_admits2, (get_base1(x, Ipreh2, it, "x", 1) / duration_pre_hosp));
                current_statement_begin__ = 244;
                stan::math::assign(lost_protection_infection1, (get_base1(x, P1, it, "x", 1) / duration_protection_infection));
                current_statement_begin__ = 245;
                stan::math::assign(lost_protection_infection12, (get_base1(x, P12, it, "x", 1) / duration_protection_infection));
                current_statement_begin__ = 247;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(S), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            (((get_base1(x, S, it, "x", 1) - newE1) + lost_protection_infection1) - (newE2 * frac_E2_from_S)), 
                            "assigning variable x");
                current_statement_begin__ = 248;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(E1), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((get_base1(x, E1, it, "x", 1) + newE1) - newI1), 
                            "assigning variable x");
                current_statement_begin__ = 249;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(E2), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((get_base1(x, E2, it, "x", 1) + newE2) - newI2), 
                            "assigning variable x");
                current_statement_begin__ = 251;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Imild1), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((get_base1(x, Imild1, it, "x", 1) + (newI1 * (1 - frac_hosp1))) - (get_base1(x, Imild1, it, "x", 1) / duration_rec_mild)), 
                            "assigning variable x");
                current_statement_begin__ = 252;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Imild2), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((get_base1(x, Imild2, it, "x", 1) + (newI2 * (1 - frac_hosp2))) - (get_base1(x, Imild2, it, "x", 1) / duration_rec_mild)), 
                            "assigning variable x");
                current_statement_begin__ = 254;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Ipreh1), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((get_base1(x, Ipreh1, it, "x", 1) + (newI1 * frac_hosp1)) - new_admits1), 
                            "assigning variable x");
                current_statement_begin__ = 255;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Ipreh2), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((get_base1(x, Ipreh2, it, "x", 1) + (newI2 * frac_hosp2)) - new_admits2), 
                            "assigning variable x");
                current_statement_begin__ = 257;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Hmod1), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((get_base1(x, Hmod1, it, "x", 1) + new_admits1) - (get_base1(x, Hmod1, it, "x", 1) / duration_hosp_mod1)), 
                            "assigning variable x");
                current_statement_begin__ = 258;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Hmod2), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((get_base1(x, Hmod2, it, "x", 1) + new_admits2) - (get_base1(x, Hmod2, it, "x", 1) / duration_hosp_mod2)), 
                            "assigning variable x");
                current_statement_begin__ = 260;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(P1), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((((get_base1(x, P1, it, "x", 1) + new_protected1) - lost_protection_infection1) + lost_protection_infection12) - (newE2 * frac_E2_from_P1)), 
                            "assigning variable x");
                current_statement_begin__ = 261;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(P12), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((get_base1(x, P12, it, "x", 1) + new_protected12) - lost_protection_infection12), 
                            "assigning variable x");
                current_statement_begin__ = 263;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Rlive1), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            (((get_base1(x, Rlive1, it, "x", 1) + (get_base1(x, Hmod1, it, "x", 1) / duration_hosp_mod1)) + (get_base1(x, Imild1, it, "x", 1) / duration_rec_mild)) - (newE2 * frac_E2_from_Rlive1)), 
                            "assigning variable x");
                current_statement_begin__ = 264;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(Rlive12), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), 
                            ((get_base1(x, Rlive12, it, "x", 1) + (get_base1(x, Hmod2, it, "x", 1) / duration_hosp_mod2)) + (get_base1(x, Imild2, it, "x", 1) / duration_rec_mild)), 
                            "assigning variable x");
                current_statement_begin__ = 268;
                stan::model::assign(soon_positive1, 
                            stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list()), 
                            ((get_base1(soon_positive1, it, "soon_positive1", 1) + (newE1 * frac_tested)) - (get_base1(soon_positive1, it, "soon_positive1", 1) / test_delay)), 
                            "assigning variable soon_positive1");
                current_statement_begin__ = 269;
                stan::model::assign(soon_positive2, 
                            stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list()), 
                            ((get_base1(soon_positive2, it, "soon_positive2", 1) + (newE2 * frac_tested)) - (get_base1(soon_positive2, it, "soon_positive2", 1) / test_delay)), 
                            "assigning variable soon_positive2");
                current_statement_begin__ = 270;
                stan::model::assign(new_cases1, 
                            stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list()), 
                            (get_base1(soon_positive1, (it + 1), "soon_positive1", 1) / test_delay), 
                            "assigning variable new_cases1");
                current_statement_begin__ = 271;
                stan::model::assign(new_cases2, 
                            stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list()), 
                            (get_base1(soon_positive2, (it + 1), "soon_positive2", 1) / test_delay), 
                            "assigning variable new_cases2");
                current_statement_begin__ = 285;
                if (as_bool(logical_gt(stan::math::fabs((sum(stan::model::rvalue(x, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), "x")) - npop)), 0.01))) {
                    current_statement_begin__ = 287;
                    std::stringstream errmsg_stream__;
                    errmsg_stream__ << "Model is leaking, net gain: ";
                    errmsg_stream__ << (sum(stan::model::rvalue(x, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), "x")) - npop);
                    errmsg_stream__ << "it= ";
                    errmsg_stream__ << it;
                    errmsg_stream__ << " ";
                    errmsg_stream__ << stan::model::rvalue(x, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(it), stan::model::nil_index_list())), "x");
                    errmsg_stream__ << " ====  ";
                    errmsg_stream__ << stan::model::rvalue(x, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni((it + 1)), stan::model::nil_index_list())), "x");
                    throw std::domain_error(errmsg_stream__.str());
                }
            }
            current_statement_begin__ = 292;
            stan::model::assign(sim_data, 
                        stan::model::cons_list(stan::model::index_uni(obs_hosp_census), stan::model::nil_index_list()), 
                        add(multiply(get_base1(x, Hmod1, "x", 1), (1 + frac_incidental1)), multiply(get_base1(x, Hmod2, "x", 1), (1 + frac_incidental2))), 
                        "assigning variable sim_data");
            current_statement_begin__ = 293;
            stan::model::assign(sim_data, 
                        stan::model::cons_list(stan::model::index_uni(obs_cases1), stan::model::nil_index_list()), 
                        new_cases1, 
                        "assigning variable sim_data");
            current_statement_begin__ = 294;
            stan::model::assign(sim_data, 
                        stan::model::cons_list(stan::model::index_uni(obs_cases2), stan::model::nil_index_list()), 
                        new_cases2, 
                        "assigning variable sim_data");
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 122;
            check_greater_or_equal(function__, "x", x, 0.0);
            current_statement_begin__ = 123;
            check_greater_or_equal(function__, "sim_data", sim_data, 0.0);
            current_statement_begin__ = 124;
            check_greater_or_equal(function__, "new_cases1", new_cases1, 0.0);
            current_statement_begin__ = 125;
            check_greater_or_equal(function__, "new_cases2", new_cases2, 0.0);
            current_statement_begin__ = 126;
            check_greater_or_equal(function__, "soon_positive1", soon_positive1, 0.0);
            current_statement_begin__ = 127;
            check_greater_or_equal(function__, "soon_positive2", soon_positive2, 0.0);
            current_statement_begin__ = 128;
            size_t beta_i_0_max__ = nt;
            for (size_t i_0__ = 0; i_0__ < beta_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "beta[i_0__]", beta[i_0__], 0.0);
            }
            current_statement_begin__ = 130;
            check_greater_or_equal(function__, "duration_latent2", duration_latent2, 1.0);
            current_statement_begin__ = 131;
            check_greater_or_equal(function__, "duration_hosp_mod2", duration_hosp_mod2, 1.0);
            current_statement_begin__ = 132;
            check_greater_or_equal(function__, "frac_hosp2", frac_hosp2, 0.0);
            // write transformed parameters
            if (include_tparams__) {
                size_t x_j_2_max__ = nt;
                size_t x_j_1_max__ = ncompartments;
                for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                        vars__.push_back(x(j_1__, j_2__));
                    }
                }
                size_t sim_data_j_2_max__ = nt;
                size_t sim_data_j_1_max__ = nobs_types;
                for (size_t j_2__ = 0; j_2__ < sim_data_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < sim_data_j_1_max__; ++j_1__) {
                        vars__.push_back(sim_data(j_1__, j_2__));
                    }
                }
                size_t new_cases1_j_1_max__ = nt;
                for (size_t j_1__ = 0; j_1__ < new_cases1_j_1_max__; ++j_1__) {
                    vars__.push_back(new_cases1(j_1__));
                }
                size_t new_cases2_j_1_max__ = nt;
                for (size_t j_1__ = 0; j_1__ < new_cases2_j_1_max__; ++j_1__) {
                    vars__.push_back(new_cases2(j_1__));
                }
                size_t soon_positive1_j_1_max__ = nt;
                for (size_t j_1__ = 0; j_1__ < soon_positive1_j_1_max__; ++j_1__) {
                    vars__.push_back(soon_positive1(j_1__));
                }
                size_t soon_positive2_j_1_max__ = nt;
                for (size_t j_1__ = 0; j_1__ < soon_positive2_j_1_max__; ++j_1__) {
                    vars__.push_back(soon_positive2(j_1__));
                }
                size_t beta_k_0_max__ = nt;
                for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                    vars__.push_back(beta[k_0__]);
                }
                vars__.push_back(duration_latent2);
                vars__.push_back(duration_hosp_mod2);
                vars__.push_back(frac_hosp2);
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 337;
            validate_non_negative_index("sim_data_with_error", "nobs_types", nobs_types);
            validate_non_negative_index("sim_data_with_error", "nt", nt);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> sim_data_with_error(nobs_types, nt);
            stan::math::initialize(sim_data_with_error, DUMMY_VAR__);
            stan::math::fill(sim_data_with_error, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 340;
            for (int itype = 1; itype <= nobs_types; ++itype) {
                current_statement_begin__ = 341;
                if (as_bool(logical_gt(get_base1(nobs, itype, "nobs", 1), 0))) {
                    current_statement_begin__ = 342;
                    for (int it = 1; it <= nt; ++it) {
                        current_statement_begin__ = 343;
                        stan::model::assign(sim_data_with_error, 
                                    stan::model::cons_list(stan::model::index_uni(itype), stan::model::cons_list(stan::model::index_uni(it), stan::model::nil_index_list())), 
                                    stan::math::fmax(0.0, normal_rng(get_base1(sim_data, itype, it, "sim_data", 1), get_base1(sigma_obs, itype, "sigma_obs", 1), base_rng__)), 
                                    "assigning variable sim_data_with_error");
                    }
                } else {
                    current_statement_begin__ = 346;
                    stan::model::assign(sim_data_with_error, 
                                stan::model::cons_list(stan::model::index_uni(itype), stan::model::nil_index_list()), 
                                get_base1(sim_data, itype, "sim_data", 1), 
                                "assigning variable sim_data_with_error");
                }
            }
            {
            current_statement_begin__ = 350;
            local_scalar_t__ frac_prehosp(DUMMY_VAR__);
            (void) frac_prehosp;  // dummy to suppress unused var warning
            stan::math::initialize(frac_prehosp, DUMMY_VAR__);
            stan::math::fill(frac_prehosp, DUMMY_VAR__);
            current_statement_begin__ = 351;
            local_scalar_t__ avg_duration(DUMMY_VAR__);
            (void) avg_duration;  // dummy to suppress unused var warning
            stan::math::initialize(avg_duration, DUMMY_VAR__);
            stan::math::fill(avg_duration, DUMMY_VAR__);
            }
            // validate, write generated quantities
            current_statement_begin__ = 337;
            check_greater_or_equal(function__, "sim_data_with_error", sim_data_with_error, 0.0);
            size_t sim_data_with_error_j_2_max__ = nt;
            size_t sim_data_with_error_j_1_max__ = nobs_types;
            for (size_t j_2__ = 0; j_2__ < sim_data_with_error_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < sim_data_with_error_j_1_max__; ++j_1__) {
                    vars__.push_back(sim_data_with_error(j_1__, j_2__));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_LEMMA";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "duration_latent1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "duration_rec_mild";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "duration_pre_hosp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "duration_hosp_mod1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "duration_protection_infection";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "frac_hosp1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "duration_latent_multiplier";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "duration_hosp_mod_multiplier";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "frac_hosp_multiplier";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "frac_tested";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "initial_infected1";
        param_names__.push_back(param_name_stream__.str());
        size_t sigma_obs_k_0_max__ = nobs_types;
        for (size_t k_0__ = 0; k_0__ < sigma_obs_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_obs" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "test_delay";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_0";
        param_names__.push_back(param_name_stream__.str());
        size_t beta_multiplier_k_0_max__ = ninter;
        for (size_t k_0__ = 0; k_0__ < beta_multiplier_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_multiplier" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "trans_multiplier";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t x_j_2_max__ = nt;
            size_t x_j_1_max__ = ncompartments;
            for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "x" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t sim_data_j_2_max__ = nt;
            size_t sim_data_j_1_max__ = nobs_types;
            for (size_t j_2__ = 0; j_2__ < sim_data_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < sim_data_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "sim_data" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t new_cases1_j_1_max__ = nt;
            for (size_t j_1__ = 0; j_1__ < new_cases1_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "new_cases1" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t new_cases2_j_1_max__ = nt;
            for (size_t j_1__ = 0; j_1__ < new_cases2_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "new_cases2" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t soon_positive1_j_1_max__ = nt;
            for (size_t j_1__ = 0; j_1__ < soon_positive1_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "soon_positive1" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t soon_positive2_j_1_max__ = nt;
            for (size_t j_1__ = 0; j_1__ < soon_positive2_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "soon_positive2" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t beta_k_0_max__ = nt;
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "duration_latent2";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "duration_hosp_mod2";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "frac_hosp2";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
        size_t sim_data_with_error_j_2_max__ = nt;
        size_t sim_data_with_error_j_1_max__ = nobs_types;
        for (size_t j_2__ = 0; j_2__ < sim_data_with_error_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < sim_data_with_error_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sim_data_with_error" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "duration_latent1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "duration_rec_mild";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "duration_pre_hosp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "duration_hosp_mod1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "duration_protection_infection";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "frac_hosp1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "duration_latent_multiplier";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "duration_hosp_mod_multiplier";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "frac_hosp_multiplier";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "frac_tested";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "initial_infected1";
        param_names__.push_back(param_name_stream__.str());
        size_t sigma_obs_k_0_max__ = nobs_types;
        for (size_t k_0__ = 0; k_0__ < sigma_obs_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_obs" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "test_delay";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_0";
        param_names__.push_back(param_name_stream__.str());
        size_t beta_multiplier_k_0_max__ = ninter;
        for (size_t k_0__ = 0; k_0__ < beta_multiplier_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_multiplier" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "trans_multiplier";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t x_j_2_max__ = nt;
            size_t x_j_1_max__ = ncompartments;
            for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "x" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t sim_data_j_2_max__ = nt;
            size_t sim_data_j_1_max__ = nobs_types;
            for (size_t j_2__ = 0; j_2__ < sim_data_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < sim_data_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "sim_data" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t new_cases1_j_1_max__ = nt;
            for (size_t j_1__ = 0; j_1__ < new_cases1_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "new_cases1" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t new_cases2_j_1_max__ = nt;
            for (size_t j_1__ = 0; j_1__ < new_cases2_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "new_cases2" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t soon_positive1_j_1_max__ = nt;
            for (size_t j_1__ = 0; j_1__ < soon_positive1_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "soon_positive1" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t soon_positive2_j_1_max__ = nt;
            for (size_t j_1__ = 0; j_1__ < soon_positive2_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "soon_positive2" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t beta_k_0_max__ = nt;
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "duration_latent2";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "duration_hosp_mod2";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "frac_hosp2";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
        size_t sim_data_with_error_j_2_max__ = nt;
        size_t sim_data_with_error_j_1_max__ = nobs_types;
        for (size_t j_2__ = 0; j_2__ < sim_data_with_error_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < sim_data_with_error_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sim_data_with_error" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
}; // model
}  // namespace
typedef model_LEMMA_namespace::model_LEMMA stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
